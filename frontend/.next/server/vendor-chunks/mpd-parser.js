"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mpd-parser";
exports.ids = ["vendor-chunks/mpd-parser"];
exports.modules = {

/***/ "(ssr)/../node_modules/mpd-parser/dist/mpd-parser.es.js":
/*!********************************************************!*\
  !*** ../node_modules/mpd-parser/dist/mpd-parser.es.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   addSidxSegmentsToPlaylist: () => (/* binding */ addSidxSegmentsToPlaylist$1),\n/* harmony export */   generateSidxKey: () => (/* binding */ generateSidxKey),\n/* harmony export */   inheritAttributes: () => (/* binding */ inheritAttributes),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseUTCTiming: () => (/* binding */ parseUTCTiming),\n/* harmony export */   stringToMpdXml: () => (/* binding */ stringToMpdXml),\n/* harmony export */   toM3u8: () => (/* binding */ toM3u8),\n/* harmony export */   toPlaylists: () => (/* binding */ toPlaylists)\n/* harmony export */ });\n/* harmony import */ var _videojs_vhs_utils_es_resolve_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @videojs/vhs-utils/es/resolve-url */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/resolve-url.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _videojs_vhs_utils_es_media_groups__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @videojs/vhs-utils/es/media-groups */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/media-groups.js\");\n/* harmony import */ var _videojs_vhs_utils_es_decode_b64_to_uint8_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @videojs/vhs-utils/es/decode-b64-to-uint8-array */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js\");\n/* harmony import */ var _xmldom_xmldom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @xmldom/xmldom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/index.js\");\n/*! @name mpd-parser @version 0.22.1 @license Apache-2.0 */ \n\n\n\n\nvar version = \"0.22.1\";\nvar isObject = function isObject(obj) {\n    return !!obj && typeof obj === \"object\";\n};\nvar merge = function merge() {\n    for(var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++){\n        objects[_key] = arguments[_key];\n    }\n    return objects.reduce(function(result, source) {\n        if (typeof source !== \"object\") {\n            return result;\n        }\n        Object.keys(source).forEach(function(key) {\n            if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n                result[key] = result[key].concat(source[key]);\n            } else if (isObject(result[key]) && isObject(source[key])) {\n                result[key] = merge(result[key], source[key]);\n            } else {\n                result[key] = source[key];\n            }\n        });\n        return result;\n    }, {});\n};\nvar values = function values(o) {\n    return Object.keys(o).map(function(k) {\n        return o[k];\n    });\n};\nvar range = function range(start, end) {\n    var result = [];\n    for(var i = start; i < end; i++){\n        result.push(i);\n    }\n    return result;\n};\nvar flatten = function flatten(lists) {\n    return lists.reduce(function(x, y) {\n        return x.concat(y);\n    }, []);\n};\nvar from = function from(list) {\n    if (!list.length) {\n        return [];\n    }\n    var result = [];\n    for(var i = 0; i < list.length; i++){\n        result.push(list[i]);\n    }\n    return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n    return l.reduce(function(a, e, i) {\n        if (e[key]) {\n            a.push(i);\n        }\n        return a;\n    }, []);\n};\n/**\n * Returns the first index that satisfies the matching function, or -1 if not found.\n *\n * Only necessary because of IE11 support.\n *\n * @param {Array} list - the list to search through\n * @param {Function} matchingFunction - the matching function\n *\n * @return {number} the matching index or -1 if not found\n */ var findIndex = function findIndex(list, matchingFunction) {\n    for(var i = 0; i < list.length; i++){\n        if (matchingFunction(list[i])) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */ var union = function union(lists, keyFunction) {\n    return values(lists.reduce(function(acc, list) {\n        list.forEach(function(el) {\n            acc[keyFunction(el)] = el;\n        });\n        return acc;\n    }, {}));\n};\nvar errors = {\n    INVALID_NUMBER_OF_PERIOD: \"INVALID_NUMBER_OF_PERIOD\",\n    DASH_EMPTY_MANIFEST: \"DASH_EMPTY_MANIFEST\",\n    DASH_INVALID_XML: \"DASH_INVALID_XML\",\n    NO_BASE_URL: \"NO_BASE_URL\",\n    MISSING_SEGMENT_INFORMATION: \"MISSING_SEGMENT_INFORMATION\",\n    SEGMENT_TIME_UNSPECIFIED: \"SEGMENT_TIME_UNSPECIFIED\",\n    UNSUPPORTED_UTC_TIMING_SCHEME: \"UNSUPPORTED_UTC_TIMING_SCHEME\"\n};\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */ /**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */ var urlTypeToSegment = function urlTypeToSegment(_ref) {\n    var _ref$baseUrl = _ref.baseUrl, baseUrl = _ref$baseUrl === void 0 ? \"\" : _ref$baseUrl, _ref$source = _ref.source, source = _ref$source === void 0 ? \"\" : _ref$source, _ref$range = _ref.range, range = _ref$range === void 0 ? \"\" : _ref$range, _ref$indexRange = _ref.indexRange, indexRange = _ref$indexRange === void 0 ? \"\" : _ref$indexRange;\n    var segment = {\n        uri: source,\n        resolvedUri: (0,_videojs_vhs_utils_es_resolve_url__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(baseUrl || \"\", source)\n    };\n    if (range || indexRange) {\n        var rangeStr = range ? range : indexRange;\n        var ranges = rangeStr.split(\"-\"); // default to parsing this as a BigInt if possible\n        var startRange = (global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt) ? global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(ranges[0]) : parseInt(ranges[0], 10);\n        var endRange = (global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt) ? global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n        if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === \"bigint\") {\n            startRange = Number(startRange);\n        }\n        if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === \"bigint\") {\n            endRange = Number(endRange);\n        }\n        var length;\n        if (typeof endRange === \"bigint\" || typeof startRange === \"bigint\") {\n            length = global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(endRange) - global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(startRange) + global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(1);\n        } else {\n            length = endRange - startRange + 1;\n        }\n        if (typeof length === \"bigint\" && length < Number.MAX_SAFE_INTEGER) {\n            length = Number(length);\n        } // byterange should be inclusive according to\n        // RFC 2616, Clause 14.35.1\n        segment.byterange = {\n            length: length,\n            offset: startRange\n        };\n    }\n    return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n    // `endRange` is one less than `offset + length` because the HTTP range\n    // header uses inclusive ranges\n    var endRange;\n    if (typeof byterange.offset === \"bigint\" || typeof byterange.length === \"bigint\") {\n        endRange = global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(byterange.offset) + global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(byterange.length) - global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(1);\n    } else {\n        endRange = byterange.offset + byterange.length - 1;\n    }\n    return byterange.offset + \"-\" + endRange;\n};\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */ var parseEndNumber = function parseEndNumber(endNumber) {\n    if (endNumber && typeof endNumber !== \"number\") {\n        endNumber = parseInt(endNumber, 10);\n    }\n    if (isNaN(endNumber)) {\n        return null;\n    }\n    return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */ var segmentRange = {\n    /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */ static: function _static(attributes) {\n        var duration = attributes.duration, _attributes$timescale = attributes.timescale, timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale, sourceDuration = attributes.sourceDuration, periodDuration = attributes.periodDuration;\n        var endNumber = parseEndNumber(attributes.endNumber);\n        var segmentDuration = duration / timescale;\n        if (typeof endNumber === \"number\") {\n            return {\n                start: 0,\n                end: endNumber\n            };\n        }\n        if (typeof periodDuration === \"number\") {\n            return {\n                start: 0,\n                end: periodDuration / segmentDuration\n            };\n        }\n        return {\n            start: 0,\n            end: sourceDuration / segmentDuration\n        };\n    },\n    /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */ dynamic: function dynamic(attributes) {\n        var NOW = attributes.NOW, clientOffset = attributes.clientOffset, availabilityStartTime = attributes.availabilityStartTime, _attributes$timescale2 = attributes.timescale, timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2, duration = attributes.duration, _attributes$periodSta = attributes.periodStart, periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta, _attributes$minimumUp = attributes.minimumUpdatePeriod, minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp, _attributes$timeShift = attributes.timeShiftBufferDepth, timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n        var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n        // after retrieving UTC server time.\n        var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n        // Convert the period start time to EPOCH.\n        var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n        var periodEndWC = now + minimumUpdatePeriod;\n        var periodDuration = periodEndWC - periodStartWC;\n        var segmentCount = Math.ceil(periodDuration * timescale / duration);\n        var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n        var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n        return {\n            start: Math.max(0, availableStart),\n            end: typeof endNumber === \"number\" ? endNumber : Math.min(segmentCount, availableEnd)\n        };\n    }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */ /**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */ var toSegments = function toSegments(attributes) {\n    return function(number) {\n        var duration = attributes.duration, _attributes$timescale3 = attributes.timescale, timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3, periodStart = attributes.periodStart, _attributes$startNumb = attributes.startNumber, startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n        return {\n            number: startNumber + number,\n            duration: duration / timescale,\n            timeline: periodStart,\n            time: number * duration\n        };\n    };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */ var parseByDuration = function parseByDuration(attributes) {\n    var type = attributes.type, duration = attributes.duration, _attributes$timescale4 = attributes.timescale, timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4, periodDuration = attributes.periodDuration, sourceDuration = attributes.sourceDuration;\n    var _segmentRange$type = segmentRange[type](attributes), start = _segmentRange$type.start, end = _segmentRange$type.end;\n    var segments = range(start, end).map(toSegments(attributes));\n    if (type === \"static\") {\n        var index = segments.length - 1; // section is either a period or the full source\n        var sectionDuration = typeof periodDuration === \"number\" ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n        segments[index].duration = sectionDuration - duration / timescale * index;\n    }\n    return segments;\n};\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */ var segmentsFromBase = function segmentsFromBase(attributes) {\n    var baseUrl = attributes.baseUrl, _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ, sourceDuration = attributes.sourceDuration, _attributes$indexRang = attributes.indexRange, indexRange = _attributes$indexRang === void 0 ? \"\" : _attributes$indexRang, periodStart = attributes.periodStart, presentationTime = attributes.presentationTime, _attributes$number = attributes.number, number = _attributes$number === void 0 ? 0 : _attributes$number, duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n    if (!baseUrl) {\n        throw new Error(errors.NO_BASE_URL);\n    }\n    var initSegment = urlTypeToSegment({\n        baseUrl: baseUrl,\n        source: initialization.sourceURL,\n        range: initialization.range\n    });\n    var segment = urlTypeToSegment({\n        baseUrl: baseUrl,\n        source: baseUrl,\n        indexRange: indexRange\n    });\n    segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n    // (since SegmentBase is only for one total segment)\n    if (duration) {\n        var segmentTimeInfo = parseByDuration(attributes);\n        if (segmentTimeInfo.length) {\n            segment.duration = segmentTimeInfo[0].duration;\n            segment.timeline = segmentTimeInfo[0].timeline;\n        }\n    } else if (sourceDuration) {\n        segment.duration = sourceDuration;\n        segment.timeline = periodStart;\n    } // If presentation time is provided, these segments are being generated by SIDX\n    // references, and should use the time provided. For the general case of SegmentBase,\n    // there should only be one segment in the period, so its presentation time is the same\n    // as its period start.\n    segment.presentationTime = presentationTime || periodStart;\n    segment.number = number;\n    return [\n        segment\n    ];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */ var addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n    // Retain init segment information\n    var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n    var sourceDuration = playlist.sidx.duration; // Retain source timeline\n    var timeline = playlist.timeline || 0;\n    var sidxByteRange = playlist.sidx.byterange;\n    var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n    var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n    var mediaReferences = sidx.references.filter(function(r) {\n        return r.referenceType !== 1;\n    });\n    var segments = [];\n    var type = playlist.endList ? \"static\" : \"dynamic\";\n    var periodStart = playlist.sidx.timeline;\n    var presentationTime = periodStart;\n    var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n    var startIndex; // eslint-disable-next-line\n    if (typeof sidx.firstOffset === \"bigint\") {\n        startIndex = global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(sidxEnd) + sidx.firstOffset;\n    } else {\n        startIndex = sidxEnd + sidx.firstOffset;\n    }\n    for(var i = 0; i < mediaReferences.length; i++){\n        var reference = sidx.references[i]; // size of the referenced (sub)segment\n        var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n        // this will be converted to seconds when generating segments\n        var duration = reference.subsegmentDuration; // should be an inclusive range\n        var endIndex = void 0; // eslint-disable-next-line\n        if (typeof startIndex === \"bigint\") {\n            endIndex = startIndex + global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(size) - global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(1);\n        } else {\n            endIndex = startIndex + size - 1;\n        }\n        var indexRange = startIndex + \"-\" + endIndex;\n        var attributes = {\n            baseUrl: baseUrl,\n            timescale: timescale,\n            timeline: timeline,\n            periodStart: periodStart,\n            presentationTime: presentationTime,\n            number: number,\n            duration: duration,\n            sourceDuration: sourceDuration,\n            indexRange: indexRange,\n            type: type\n        };\n        var segment = segmentsFromBase(attributes)[0];\n        if (initSegment) {\n            segment.map = initSegment;\n        }\n        segments.push(segment);\n        if (typeof startIndex === \"bigint\") {\n            startIndex += global_window__WEBPACK_IMPORTED_MODULE_1___default().BigInt(size);\n        } else {\n            startIndex += size;\n        }\n        presentationTime += duration / timescale;\n        number++;\n    }\n    playlist.segments = segments;\n    return playlist;\n};\nvar SUPPORTED_MEDIA_TYPES = [\n    \"AUDIO\",\n    \"SUBTITLES\"\n]; // allow one 60fps frame as leniency (arbitrarily chosen)\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */ var getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n    return union(timelineStarts, function(_ref) {\n        var timeline = _ref.timeline;\n        return timeline;\n    }).sort(function(a, b) {\n        return a.timeline > b.timeline ? 1 : -1;\n    });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */ var findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n    for(var i = 0; i < playlists.length; i++){\n        if (playlists[i].attributes.NAME === name) {\n            return playlists[i];\n        }\n    }\n    return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */ var getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n    var mediaGroupPlaylists = [];\n    (0,_videojs_vhs_utils_es_media_groups__WEBPACK_IMPORTED_MODULE_2__.forEachMediaGroup)(manifest, SUPPORTED_MEDIA_TYPES, function(properties, type, group, label) {\n        mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n    });\n    return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */ var updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref2) {\n    var playlist = _ref2.playlist, mediaSequence = _ref2.mediaSequence;\n    playlist.mediaSequence = mediaSequence;\n    playlist.segments.forEach(function(segment, index) {\n        segment.number = playlist.mediaSequence + index;\n    });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */ var updateSequenceNumbers = function updateSequenceNumbers(_ref3) {\n    var oldPlaylists = _ref3.oldPlaylists, newPlaylists = _ref3.newPlaylists, timelineStarts = _ref3.timelineStarts;\n    newPlaylists.forEach(function(playlist) {\n        playlist.discontinuitySequence = findIndex(timelineStarts, function(_ref4) {\n            var timeline = _ref4.timeline;\n            return timeline === playlist.timeline;\n        }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n        // (see ISO_23009-1-2012 5.3.5.2).\n        //\n        // If the same Representation existed in a prior Period, it will retain the same NAME.\n        var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n        if (!oldPlaylist) {\n            // Since this is a new playlist, the media sequence values can start from 0 without\n            // consequence.\n            return;\n        } // TODO better support for live SIDX\n        //\n        // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n        // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n        // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n        // not supported when the SIDX properties change on refreshes.\n        //\n        // In the future, if support needs to be added, the merging logic here can be called\n        // after SIDX references are resolved. For now, exit early to prevent exceptions being\n        // thrown due to undefined references.\n        if (playlist.sidx) {\n            return;\n        } // Since we don't yet support early available timelines, we don't need to support\n        // playlists with no segments.\n        var firstNewSegment = playlist.segments[0];\n        var oldMatchingSegmentIndex = findIndex(oldPlaylist.segments, function(oldSegment) {\n            return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n        }); // No matching segment from the old playlist means the entire playlist was refreshed.\n        // In this case the media sequence should account for this update, and the new segments\n        // should be marked as discontinuous from the prior content, since the last prior\n        // timeline was removed.\n        if (oldMatchingSegmentIndex === -1) {\n            updateMediaSequenceForPlaylist({\n                playlist: playlist,\n                mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n            });\n            playlist.segments[0].discontinuity = true;\n            playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n            //\n            // If the new playlist's timeline is the same as the last seen segment's timeline,\n            // then a discontinuity can be added to identify that there's potentially missing\n            // content. If there's no missing content, the discontinuity should still be rather\n            // harmless. It's possible that if segment durations are accurate enough, that the\n            // existence of a gap can be determined using the presentation times and durations,\n            // but if the segment timing info is off, it may introduce more problems than simply\n            // adding the discontinuity.\n            //\n            // If the new playlist's timeline is different from the last seen segment's timeline,\n            // then a discontinuity can be added to identify that this is the first seen segment\n            // of a new timeline. However, the logic at the start of this function that\n            // determined the disconinuity sequence by timeline index is now off by one (the\n            // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n            // we added it), so the disconinuity sequence must be decremented.\n            //\n            // A period may also have a duration of zero, so the case of no segments is handled\n            // here even though we don't yet support early available periods.\n            if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n                playlist.discontinuitySequence--;\n            }\n            return;\n        } // If the first segment matched with a prior segment on a discontinuity (it's matching\n        // on the first segment of a period), then the discontinuitySequence shouldn't be the\n        // timeline's matching one, but instead should be the one prior, and the first segment\n        // of the new manifest should be marked with a discontinuity.\n        //\n        // The reason for this special case is that discontinuity sequence shows how many\n        // discontinuities have fallen off of the playlist, and discontinuities are marked on\n        // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n        // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n        // sequence, and that first segment is an indicator, but can be removed before that\n        // timeline is gone.\n        var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n        if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n            firstNewSegment.discontinuity = true;\n            playlist.discontinuityStarts.unshift(0);\n            playlist.discontinuitySequence--;\n        }\n        updateMediaSequenceForPlaylist({\n            playlist: playlist,\n            mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n        });\n    });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */ var positionManifestOnTimeline = function positionManifestOnTimeline(_ref5) {\n    var oldManifest = _ref5.oldManifest, newManifest = _ref5.newManifest;\n    // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n    //\n    // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n    //\n    // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n    //\n    // Because of this change, and the difficulty of supporting periods with changing start\n    // times, periods with changing start times are not supported. This makes the logic much\n    // simpler, since periods with the same start time can be considerred the same period\n    // across refreshes.\n    //\n    // To give an example as to the difficulty of handling periods where the start time may\n    // change, if a single period manifest is refreshed with another manifest with a single\n    // period, and both the start and end times are increased, then the only way to determine\n    // if it's a new period or an old one that has changed is to look through the segments of\n    // each playlist and determine the presentation time bounds to find a match. In addition,\n    // if the period start changed to exceed the old period end, then there would be no\n    // match, and it would not be possible to determine whether the refreshed period is a new\n    // one or the old one.\n    var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n    var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n    // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n    // of properties are saved for each seen Period. Even long running live streams won't\n    // generate too many Periods, unless the stream is watched for decades. In the future,\n    // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n    // but it may not become an issue, and the additional info can be useful for debugging.\n    newManifest.timelineStarts = getUniqueTimelineStarts([\n        oldManifest.timelineStarts,\n        newManifest.timelineStarts\n    ]);\n    updateSequenceNumbers({\n        oldPlaylists: oldPlaylists,\n        newPlaylists: newPlaylists,\n        timelineStarts: newManifest.timelineStarts\n    });\n    return newManifest;\n};\nvar generateSidxKey = function generateSidxKey(sidx) {\n    return sidx && sidx.uri + \"-\" + byteRangeToString(sidx.byterange);\n};\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n    var mergedPlaylists = values(playlists.reduce(function(acc, playlist) {\n        // assuming playlist IDs are the same across periods\n        // TODO: handle multiperiod where representation sets are not the same\n        // across periods\n        var name = playlist.attributes.id + (playlist.attributes.lang || \"\");\n        if (!acc[name]) {\n            // First Period\n            acc[name] = playlist;\n            acc[name].attributes.timelineStarts = [];\n        } else {\n            // Subsequent Periods\n            if (playlist.segments) {\n                var _acc$name$segments;\n                // first segment of subsequent periods signal a discontinuity\n                if (playlist.segments[0]) {\n                    playlist.segments[0].discontinuity = true;\n                }\n                (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);\n            } // bubble up contentProtection, this assumes all DRM content\n            // has the same contentProtection\n            if (playlist.attributes.contentProtection) {\n                acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n            }\n        }\n        acc[name].attributes.timelineStarts.push({\n            // Although they represent the same number, it's important to have both to make it\n            // compatible with HLS potentially having a similar attribute.\n            start: playlist.attributes.periodStart,\n            timeline: playlist.attributes.periodStart\n        });\n        return acc;\n    }, {}));\n    return mergedPlaylists.map(function(playlist) {\n        playlist.discontinuityStarts = findIndexes(playlist.segments || [], \"discontinuity\");\n        return playlist;\n    });\n};\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n    var sidxKey = generateSidxKey(playlist.sidx);\n    var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n    if (sidxMatch) {\n        addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n    }\n    return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n    if (sidxMapping === void 0) {\n        sidxMapping = {};\n    }\n    if (!Object.keys(sidxMapping).length) {\n        return playlists;\n    }\n    for(var i in playlists){\n        playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n    }\n    return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n    var _attributes;\n    var attributes = _ref.attributes, segments = _ref.segments, sidx = _ref.sidx, mediaSequence = _ref.mediaSequence, discontinuitySequence = _ref.discontinuitySequence, discontinuityStarts = _ref.discontinuityStarts;\n    var playlist = {\n        attributes: (_attributes = {\n            NAME: attributes.id,\n            BANDWIDTH: attributes.bandwidth,\n            CODECS: attributes.codecs\n        }, _attributes[\"PROGRAM-ID\"] = 1, _attributes),\n        uri: \"\",\n        endList: attributes.type === \"static\",\n        timeline: attributes.periodStart,\n        resolvedUri: \"\",\n        targetDuration: attributes.duration,\n        discontinuitySequence: discontinuitySequence,\n        discontinuityStarts: discontinuityStarts,\n        timelineStarts: attributes.timelineStarts,\n        mediaSequence: mediaSequence,\n        segments: segments\n    };\n    if (attributes.contentProtection) {\n        playlist.contentProtection = attributes.contentProtection;\n    }\n    if (sidx) {\n        playlist.sidx = sidx;\n    }\n    if (isAudioOnly) {\n        playlist.attributes.AUDIO = \"audio\";\n        playlist.attributes.SUBTITLES = \"subs\";\n    }\n    return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n    var _m3u8Attributes;\n    var attributes = _ref2.attributes, segments = _ref2.segments, mediaSequence = _ref2.mediaSequence, discontinuityStarts = _ref2.discontinuityStarts, discontinuitySequence = _ref2.discontinuitySequence;\n    if (typeof segments === \"undefined\") {\n        // vtt tracks may use single file in BaseURL\n        segments = [\n            {\n                uri: attributes.baseUrl,\n                timeline: attributes.periodStart,\n                resolvedUri: attributes.baseUrl || \"\",\n                duration: attributes.sourceDuration,\n                number: 0\n            }\n        ]; // targetDuration should be the same duration as the only segment\n        attributes.duration = attributes.sourceDuration;\n    }\n    var m3u8Attributes = (_m3u8Attributes = {\n        NAME: attributes.id,\n        BANDWIDTH: attributes.bandwidth\n    }, _m3u8Attributes[\"PROGRAM-ID\"] = 1, _m3u8Attributes);\n    if (attributes.codecs) {\n        m3u8Attributes.CODECS = attributes.codecs;\n    }\n    return {\n        attributes: m3u8Attributes,\n        uri: \"\",\n        endList: attributes.type === \"static\",\n        timeline: attributes.periodStart,\n        resolvedUri: attributes.baseUrl || \"\",\n        targetDuration: attributes.duration,\n        timelineStarts: attributes.timelineStarts,\n        discontinuityStarts: discontinuityStarts,\n        discontinuitySequence: discontinuitySequence,\n        mediaSequence: mediaSequence,\n        segments: segments\n    };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n    if (sidxMapping === void 0) {\n        sidxMapping = {};\n    }\n    if (isAudioOnly === void 0) {\n        isAudioOnly = false;\n    }\n    var mainPlaylist;\n    var formattedPlaylists = playlists.reduce(function(a, playlist) {\n        var role = playlist.attributes.role && playlist.attributes.role.value || \"\";\n        var language = playlist.attributes.lang || \"\";\n        var label = playlist.attributes.label || \"main\";\n        if (language && !playlist.attributes.label) {\n            var roleLabel = role ? \" (\" + role + \")\" : \"\";\n            label = \"\" + playlist.attributes.lang + roleLabel;\n        }\n        if (!a[label]) {\n            a[label] = {\n                language: language,\n                autoselect: true,\n                default: role === \"main\",\n                playlists: [],\n                uri: \"\"\n            };\n        }\n        var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n        a[label].playlists.push(formatted);\n        if (typeof mainPlaylist === \"undefined\" && role === \"main\") {\n            mainPlaylist = playlist;\n            mainPlaylist.default = true;\n        }\n        return a;\n    }, {}); // if no playlists have role \"main\", mark the first as main\n    if (!mainPlaylist) {\n        var firstLabel = Object.keys(formattedPlaylists)[0];\n        formattedPlaylists[firstLabel].default = true;\n    }\n    return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n    if (sidxMapping === void 0) {\n        sidxMapping = {};\n    }\n    return playlists.reduce(function(a, playlist) {\n        var label = playlist.attributes.lang || \"text\";\n        if (!a[label]) {\n            a[label] = {\n                language: label,\n                default: false,\n                autoselect: false,\n                playlists: [],\n                uri: \"\"\n            };\n        }\n        a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n        return a;\n    }, {});\n};\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n    return captionServices.reduce(function(svcObj, svc) {\n        if (!svc) {\n            return svcObj;\n        }\n        svc.forEach(function(service) {\n            var channel = service.channel, language = service.language;\n            svcObj[language] = {\n                autoselect: false,\n                default: false,\n                instreamId: channel,\n                language: language\n            };\n            if (service.hasOwnProperty(\"aspectRatio\")) {\n                svcObj[language].aspectRatio = service.aspectRatio;\n            }\n            if (service.hasOwnProperty(\"easyReader\")) {\n                svcObj[language].easyReader = service.easyReader;\n            }\n            if (service.hasOwnProperty(\"3D\")) {\n                svcObj[language][\"3D\"] = service[\"3D\"];\n            }\n        });\n        return svcObj;\n    }, {});\n};\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n    var _attributes2;\n    var attributes = _ref3.attributes, segments = _ref3.segments, sidx = _ref3.sidx, discontinuityStarts = _ref3.discontinuityStarts;\n    var playlist = {\n        attributes: (_attributes2 = {\n            NAME: attributes.id,\n            AUDIO: \"audio\",\n            SUBTITLES: \"subs\",\n            RESOLUTION: {\n                width: attributes.width,\n                height: attributes.height\n            },\n            CODECS: attributes.codecs,\n            BANDWIDTH: attributes.bandwidth\n        }, _attributes2[\"PROGRAM-ID\"] = 1, _attributes2),\n        uri: \"\",\n        endList: attributes.type === \"static\",\n        timeline: attributes.periodStart,\n        resolvedUri: \"\",\n        targetDuration: attributes.duration,\n        discontinuityStarts: discontinuityStarts,\n        timelineStarts: attributes.timelineStarts,\n        segments: segments\n    };\n    if (attributes.frameRate) {\n        playlist.attributes[\"FRAME-RATE\"] = attributes.frameRate;\n    }\n    if (attributes.contentProtection) {\n        playlist.contentProtection = attributes.contentProtection;\n    }\n    if (sidx) {\n        playlist.sidx = sidx;\n    }\n    return playlist;\n};\nvar videoOnly = function videoOnly(_ref4) {\n    var attributes = _ref4.attributes;\n    return attributes.mimeType === \"video/mp4\" || attributes.mimeType === \"video/webm\" || attributes.contentType === \"video\";\n};\nvar audioOnly = function audioOnly(_ref5) {\n    var attributes = _ref5.attributes;\n    return attributes.mimeType === \"audio/mp4\" || attributes.mimeType === \"audio/webm\" || attributes.contentType === \"audio\";\n};\nvar vttOnly = function vttOnly(_ref6) {\n    var attributes = _ref6.attributes;\n    return attributes.mimeType === \"text/vtt\" || attributes.contentType === \"text\";\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */ /**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */ var addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n    // increment all segments sequentially\n    playlists.forEach(function(playlist) {\n        playlist.mediaSequence = 0;\n        playlist.discontinuitySequence = findIndex(timelineStarts, function(_ref7) {\n            var timeline = _ref7.timeline;\n            return timeline === playlist.timeline;\n        });\n        if (!playlist.segments) {\n            return;\n        }\n        playlist.segments.forEach(function(segment, index) {\n            segment.number = index;\n        });\n    });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */ var flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n    if (!mediaGroupObject) {\n        return [];\n    }\n    return Object.keys(mediaGroupObject).reduce(function(acc, label) {\n        var labelContents = mediaGroupObject[label];\n        return acc.concat(labelContents.playlists);\n    }, []);\n};\nvar toM3u8 = function toM3u8(_ref8) {\n    var _mediaGroups;\n    var dashPlaylists = _ref8.dashPlaylists, locations = _ref8.locations, _ref8$sidxMapping = _ref8.sidxMapping, sidxMapping = _ref8$sidxMapping === void 0 ? {} : _ref8$sidxMapping, previousManifest = _ref8.previousManifest;\n    if (!dashPlaylists.length) {\n        return {};\n    } // grab all main manifest attributes\n    var _dashPlaylists$0$attr = dashPlaylists[0].attributes, duration = _dashPlaylists$0$attr.sourceDuration, type = _dashPlaylists$0$attr.type, suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay, minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n    var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n    var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n    var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n    var captions = dashPlaylists.map(function(playlist) {\n        return playlist.attributes.captionServices;\n    }).filter(Boolean);\n    var manifest = {\n        allowCache: true,\n        discontinuityStarts: [],\n        segments: [],\n        endList: true,\n        mediaGroups: (_mediaGroups = {\n            AUDIO: {},\n            VIDEO: {}\n        }, _mediaGroups[\"CLOSED-CAPTIONS\"] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n        uri: \"\",\n        duration: duration,\n        playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n    };\n    if (minimumUpdatePeriod >= 0) {\n        manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n    }\n    if (locations) {\n        manifest.locations = locations;\n    }\n    if (type === \"dynamic\") {\n        manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n    }\n    var isAudioOnly = manifest.playlists.length === 0;\n    var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n    var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n    var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n    var playlistTimelineStarts = formattedPlaylists.map(function(_ref9) {\n        var timelineStarts = _ref9.timelineStarts;\n        return timelineStarts;\n    });\n    manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n    addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n    if (organizedAudioGroup) {\n        manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n    }\n    if (organizedVttGroup) {\n        manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n    }\n    if (captions.length) {\n        manifest.mediaGroups[\"CLOSED-CAPTIONS\"].cc = organizeCaptionServices(captions);\n    }\n    if (previousManifest) {\n        return positionManifestOnTimeline({\n            oldManifest: previousManifest,\n            newManifest: manifest\n        });\n    }\n    return manifest;\n};\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */ var getLiveRValue = function getLiveRValue(attributes, time, duration) {\n    var NOW = attributes.NOW, clientOffset = attributes.clientOffset, availabilityStartTime = attributes.availabilityStartTime, _attributes$timescale = attributes.timescale, timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale, _attributes$periodSta = attributes.periodStart, periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta, _attributes$minimumUp = attributes.minimumUpdatePeriod, minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n    var now = (NOW + clientOffset) / 1000;\n    var periodStartWC = availabilityStartTime + periodStart;\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */ var parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n    var type = attributes.type, _attributes$minimumUp2 = attributes.minimumUpdatePeriod, minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2, _attributes$media = attributes.media, media = _attributes$media === void 0 ? \"\" : _attributes$media, sourceDuration = attributes.sourceDuration, _attributes$timescale2 = attributes.timescale, timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2, _attributes$startNumb = attributes.startNumber, startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb, timeline = attributes.periodStart;\n    var segments = [];\n    var time = -1;\n    for(var sIndex = 0; sIndex < segmentTimeline.length; sIndex++){\n        var S = segmentTimeline[sIndex];\n        var duration = S.d;\n        var repeat = S.r || 0;\n        var segmentTime = S.t || 0;\n        if (time < 0) {\n            // first segment\n            time = segmentTime;\n        }\n        if (segmentTime && segmentTime > time) {\n            // discontinuity\n            // TODO: How to handle this type of discontinuity\n            // timeline++ here would treat it like HLS discontuity and content would\n            // get appended without gap\n            // E.G.\n            //  <S t=\"0\" d=\"1\" />\n            //  <S d=\"1\" />\n            //  <S d=\"1\" />\n            //  <S t=\"5\" d=\"1\" />\n            // would have $Time$ values of [0, 1, 2, 5]\n            // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n            // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n            // does the value of sourceDuration consider this when calculating arbitrary\n            // negative @r repeat value?\n            // E.G. Same elements as above with this added at the end\n            //  <S d=\"1\" r=\"-1\" />\n            //  with a sourceDuration of 10\n            // Would the 2 gaps be included in the time duration calculations resulting in\n            // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n            // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n            time = segmentTime;\n        }\n        var count = void 0;\n        if (repeat < 0) {\n            var nextS = sIndex + 1;\n            if (nextS === segmentTimeline.length) {\n                // last segment\n                if (type === \"dynamic\" && minimumUpdatePeriod > 0 && media.indexOf(\"$Number$\") > 0) {\n                    count = getLiveRValue(attributes, time, duration);\n                } else {\n                    // TODO: This may be incorrect depending on conclusion of TODO above\n                    count = (sourceDuration * timescale - time) / duration;\n                }\n            } else {\n                count = (segmentTimeline[nextS].t - time) / duration;\n            }\n        } else {\n            count = repeat + 1;\n        }\n        var end = startNumber + segments.length + count;\n        var number = startNumber + segments.length;\n        while(number < end){\n            segments.push({\n                number: number,\n                duration: duration / timescale,\n                time: time,\n                timeline: timeline\n            });\n            time += duration;\n            number++;\n        }\n    }\n    return segments;\n};\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */ /**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */ var identifierReplacement = function identifierReplacement(values) {\n    return function(match, identifier, format, width) {\n        if (match === \"$$\") {\n            // escape sequence\n            return \"$\";\n        }\n        if (typeof values[identifier] === \"undefined\") {\n            return match;\n        }\n        var value = \"\" + values[identifier];\n        if (identifier === \"RepresentationID\") {\n            // Format tag shall not be present with RepresentationID\n            return value;\n        }\n        if (!format) {\n            width = 1;\n        } else {\n            width = parseInt(width, 10);\n        }\n        if (value.length >= width) {\n            return value;\n        }\n        return \"\" + new Array(width - value.length + 1).join(\"0\") + value;\n    };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */ var constructTemplateUrl = function constructTemplateUrl(url, values) {\n    return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */ var parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n    if (!attributes.duration && !segmentTimeline) {\n        // if neither @duration or SegmentTimeline are present, then there shall be exactly\n        // one media segment\n        return [\n            {\n                number: attributes.startNumber || 1,\n                duration: attributes.sourceDuration,\n                time: 0,\n                timeline: attributes.periodStart\n            }\n        ];\n    }\n    if (attributes.duration) {\n        return parseByDuration(attributes);\n    }\n    return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */ var segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n    var templateValues = {\n        RepresentationID: attributes.id,\n        Bandwidth: attributes.bandwidth || 0\n    };\n    var _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {\n        sourceURL: \"\",\n        range: \"\"\n    } : _attributes$initializ;\n    var mapSegment = urlTypeToSegment({\n        baseUrl: attributes.baseUrl,\n        source: constructTemplateUrl(initialization.sourceURL, templateValues),\n        range: initialization.range\n    });\n    var segments = parseTemplateInfo(attributes, segmentTimeline);\n    return segments.map(function(segment) {\n        templateValues.Number = segment.number;\n        templateValues.Time = segment.time;\n        var uri = constructTemplateUrl(attributes.media || \"\", templateValues); // See DASH spec section 5.3.9.2.2\n        // - if timescale isn't present on any level, default to 1.\n        var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n        var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n        var presentationTime = // calculated in mpd-parser prior to this, so it's assumed to be available.\n        attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n        var map = {\n            uri: uri,\n            timeline: segment.timeline,\n            duration: segment.duration,\n            resolvedUri: (0,_videojs_vhs_utils_es_resolve_url__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(attributes.baseUrl || \"\", uri),\n            map: mapSegment,\n            number: segment.number,\n            presentationTime: presentationTime\n        };\n        return map;\n    });\n};\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */ var SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n    var baseUrl = attributes.baseUrl, _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n    var initSegment = urlTypeToSegment({\n        baseUrl: baseUrl,\n        source: initialization.sourceURL,\n        range: initialization.range\n    });\n    var segment = urlTypeToSegment({\n        baseUrl: baseUrl,\n        source: segmentUrl.media,\n        range: segmentUrl.mediaRange\n    });\n    segment.map = initSegment;\n    return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */ var segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n    var duration = attributes.duration, _attributes$segmentUr = attributes.segmentUrls, segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr, periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n    // if both SegmentTimeline and @duration are defined, it is outside of spec.\n    if (!duration && !segmentTimeline || duration && segmentTimeline) {\n        throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n    }\n    var segmentUrlMap = segmentUrls.map(function(segmentUrlObject) {\n        return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n    });\n    var segmentTimeInfo;\n    if (duration) {\n        segmentTimeInfo = parseByDuration(attributes);\n    }\n    if (segmentTimeline) {\n        segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n    }\n    var segments = segmentTimeInfo.map(function(segmentTime, index) {\n        if (segmentUrlMap[index]) {\n            var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n            // - if timescale isn't present on any level, default to 1.\n            var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n            var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n            segment.timeline = segmentTime.timeline;\n            segment.duration = segmentTime.duration;\n            segment.number = segmentTime.number;\n            segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n            return segment;\n        } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n    }).filter(function(segment) {\n        return segment;\n    });\n    return segments;\n};\nvar generateSegments = function generateSegments(_ref) {\n    var attributes = _ref.attributes, segmentInfo = _ref.segmentInfo;\n    var segmentAttributes;\n    var segmentsFn;\n    if (segmentInfo.template) {\n        segmentsFn = segmentsFromTemplate;\n        segmentAttributes = merge(attributes, segmentInfo.template);\n    } else if (segmentInfo.base) {\n        segmentsFn = segmentsFromBase;\n        segmentAttributes = merge(attributes, segmentInfo.base);\n    } else if (segmentInfo.list) {\n        segmentsFn = segmentsFromList;\n        segmentAttributes = merge(attributes, segmentInfo.list);\n    }\n    var segmentsInfo = {\n        attributes: attributes\n    };\n    if (!segmentsFn) {\n        return segmentsInfo;\n    }\n    var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n    // must be in seconds. Since we've generated the segment list, we no longer need\n    // @duration to be in @timescale units, so we can convert it here.\n    if (segmentAttributes.duration) {\n        var _segmentAttributes = segmentAttributes, duration = _segmentAttributes.duration, _segmentAttributes$ti = _segmentAttributes.timescale, timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n        segmentAttributes.duration = duration / timescale;\n    } else if (segments.length) {\n        // if there is no @duration attribute, use the largest segment duration as\n        // as target duration\n        segmentAttributes.duration = segments.reduce(function(max, segment) {\n            return Math.max(max, Math.ceil(segment.duration));\n        }, 0);\n    } else {\n        segmentAttributes.duration = 0;\n    }\n    segmentsInfo.attributes = segmentAttributes;\n    segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n    if (segmentInfo.base && segmentAttributes.indexRange) {\n        segmentsInfo.sidx = segments[0];\n        segmentsInfo.segments = [];\n    }\n    return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n    return representations.map(generateSegments);\n};\nvar findChildren = function findChildren(element, name) {\n    return from(element.childNodes).filter(function(_ref) {\n        var tagName = _ref.tagName;\n        return tagName === name;\n    });\n};\nvar getContent = function getContent(element) {\n    return element.textContent.trim();\n};\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */ var parseDivisionValue = function parseDivisionValue(value) {\n    return parseFloat(value.split(\"/\").reduce(function(prev, current) {\n        return prev / current;\n    }));\n};\nvar parseDuration = function parseDuration(str) {\n    var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n    var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n    var SECONDS_IN_DAY = 24 * 60 * 60;\n    var SECONDS_IN_HOUR = 60 * 60;\n    var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n    var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n    var match = durationRegex.exec(str);\n    if (!match) {\n        return 0;\n    }\n    var _match$slice = match.slice(1), year = _match$slice[0], month = _match$slice[1], day = _match$slice[2], hour = _match$slice[3], minute = _match$slice[4], second = _match$slice[5];\n    return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n    // Date format without timezone according to ISO 8601\n    // YYY-MM-DDThh:mm:ss.ssssss\n    var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n    // expressed by ending with 'Z'\n    if (dateRegex.test(str)) {\n        str += \"Z\";\n    }\n    return Date.parse(str);\n};\nvar parsers = {\n    /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */ mediaPresentationDuration: function mediaPresentationDuration(value) {\n        return parseDuration(value);\n    },\n    /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */ availabilityStartTime: function availabilityStartTime(value) {\n        return parseDate(value) / 1000;\n    },\n    /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */ minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n        return parseDuration(value);\n    },\n    /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */ suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n        return parseDuration(value);\n    },\n    /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */ type: function type(value) {\n        return value;\n    },\n    /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */ timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n        return parseDuration(value);\n    },\n    /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */ start: function start(value) {\n        return parseDuration(value);\n    },\n    /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */ width: function width(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */ height: function height(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */ bandwidth: function bandwidth(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */ frameRate: function frameRate(value) {\n        return parseDivisionValue(value);\n    },\n    /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */ startNumber: function startNumber(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */ timescale: function timescale(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */ presentationTimeOffset: function presentationTimeOffset(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */ duration: function duration(value) {\n        var parsedValue = parseInt(value, 10);\n        if (isNaN(parsedValue)) {\n            return parseDuration(value);\n        }\n        return parsedValue;\n    },\n    /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */ d: function d(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */ t: function t(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */ r: function r(value) {\n        return parseInt(value, 10);\n    },\n    /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */ DEFAULT: function DEFAULT(value) {\n        return value;\n    }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */ var parseAttributes = function parseAttributes(el) {\n    if (!(el && el.attributes)) {\n        return {};\n    }\n    return from(el.attributes).reduce(function(a, e) {\n        var parseFn = parsers[e.name] || parsers.DEFAULT;\n        a[e.name] = parseFn(e.value);\n        return a;\n    }, {});\n};\nvar keySystemsMap = {\n    \"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b\": \"org.w3.clearkey\",\n    \"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\": \"com.widevine.alpha\",\n    \"urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95\": \"com.microsoft.playready\",\n    \"urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb\": \"com.adobe.primetime\"\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */ var buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n    if (!baseUrlElements.length) {\n        return referenceUrls;\n    }\n    return flatten(referenceUrls.map(function(reference) {\n        return baseUrlElements.map(function(baseUrlElement) {\n            return (0,_videojs_vhs_utils_es_resolve_url__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(reference, getContent(baseUrlElement));\n        });\n    }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */ /**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */ var getSegmentInformation = function getSegmentInformation(adaptationSet) {\n    var segmentTemplate = findChildren(adaptationSet, \"SegmentTemplate\")[0];\n    var segmentList = findChildren(adaptationSet, \"SegmentList\")[0];\n    var segmentUrls = segmentList && findChildren(segmentList, \"SegmentURL\").map(function(s) {\n        return merge({\n            tag: \"SegmentURL\"\n        }, parseAttributes(s));\n    });\n    var segmentBase = findChildren(adaptationSet, \"SegmentBase\")[0];\n    var segmentTimelineParentNode = segmentList || segmentTemplate;\n    var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, \"SegmentTimeline\")[0];\n    var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n    var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, \"Initialization\")[0]; // SegmentTemplate is handled slightly differently, since it can have both\n    // @initialization and an <Initialization> node.  @initialization can be templated,\n    // while the node can have a url and range specified.  If the <SegmentTemplate> has\n    // both @initialization and an <Initialization> subelement we opt to override with\n    // the node, as this interaction is not defined in the spec.\n    var template = segmentTemplate && parseAttributes(segmentTemplate);\n    if (template && segmentInitialization) {\n        template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n    } else if (template && template.initialization) {\n        // If it is @initialization we convert it to an object since this is the format that\n        // later functions will rely on for the initialization segment.  This is only valid\n        // for <SegmentTemplate>\n        template.initialization = {\n            sourceURL: template.initialization\n        };\n    }\n    var segmentInfo = {\n        template: template,\n        segmentTimeline: segmentTimeline && findChildren(segmentTimeline, \"S\").map(function(s) {\n            return parseAttributes(s);\n        }),\n        list: segmentList && merge(parseAttributes(segmentList), {\n            segmentUrls: segmentUrls,\n            initialization: parseAttributes(segmentInitialization)\n        }),\n        base: segmentBase && merge(parseAttributes(segmentBase), {\n            initialization: parseAttributes(segmentInitialization)\n        })\n    };\n    Object.keys(segmentInfo).forEach(function(key) {\n        if (!segmentInfo[key]) {\n            delete segmentInfo[key];\n        }\n    });\n    return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */ /**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */ /**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */ var inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n    return function(representation) {\n        var repBaseUrlElements = findChildren(representation, \"BaseURL\");\n        var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n        var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n        var representationSegmentInfo = getSegmentInformation(representation);\n        return repBaseUrls.map(function(baseUrl) {\n            return {\n                segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n                attributes: merge(attributes, {\n                    baseUrl: baseUrl\n                })\n            };\n        });\n    };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */ var generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n    return contentProtectionNodes.reduce(function(acc, node) {\n        var attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n        // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n        // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n        // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n        if (attributes.schemeIdUri) {\n            attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n        }\n        var keySystem = keySystemsMap[attributes.schemeIdUri];\n        if (keySystem) {\n            acc[keySystem] = {\n                attributes: attributes\n            };\n            var psshNode = findChildren(node, \"cenc:pssh\")[0];\n            if (psshNode) {\n                var pssh = getContent(psshNode);\n                acc[keySystem].pssh = pssh && (0,_videojs_vhs_utils_es_decode_b64_to_uint8_array__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(pssh);\n            }\n        }\n        return acc;\n    }, {});\n}; // defined in ANSI_SCTE 214-1 2016\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n    // 608 captions\n    if (service.schemeIdUri === \"urn:scte:dash:cc:cea-608:2015\") {\n        var values = typeof service.value !== \"string\" ? [] : service.value.split(\";\");\n        return values.map(function(value) {\n            var channel;\n            var language; // default language to value\n            language = value;\n            if (/^CC\\d=/.test(value)) {\n                var _value$split = value.split(\"=\");\n                channel = _value$split[0];\n                language = _value$split[1];\n            } else if (/^CC\\d$/.test(value)) {\n                channel = value;\n            }\n            return {\n                channel: channel,\n                language: language\n            };\n        });\n    } else if (service.schemeIdUri === \"urn:scte:dash:cc:cea-708:2015\") {\n        var _values = typeof service.value !== \"string\" ? [] : service.value.split(\";\");\n        return _values.map(function(value) {\n            var flags = {\n                // service or channel number 1-63\n                \"channel\": undefined,\n                // language is a 3ALPHA per ISO 639.2/B\n                // field is required\n                \"language\": undefined,\n                // BIT 1/0 or ?\n                // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n                \"aspectRatio\": 1,\n                // BIT 1/0\n                // easy reader flag indicated the text is tailed to the needs of beginning readers\n                // default 0, or off\n                \"easyReader\": 0,\n                // BIT 1/0\n                // If 3d metadata is present (CEA-708.1) then 1\n                // default 0\n                \"3D\": 0\n            };\n            if (/=/.test(value)) {\n                var _value$split2 = value.split(\"=\"), channel = _value$split2[0], _value$split2$ = _value$split2[1], opts = _value$split2$ === void 0 ? \"\" : _value$split2$;\n                flags.channel = channel;\n                flags.language = value;\n                opts.split(\",\").forEach(function(opt) {\n                    var _opt$split = opt.split(\":\"), name = _opt$split[0], val = _opt$split[1];\n                    if (name === \"lang\") {\n                        flags.language = val; // er for easyReadery\n                    } else if (name === \"er\") {\n                        flags.easyReader = Number(val); // war for wide aspect ratio\n                    } else if (name === \"war\") {\n                        flags.aspectRatio = Number(val);\n                    } else if (name === \"3D\") {\n                        flags[\"3D\"] = Number(val);\n                    }\n                });\n            } else {\n                flags.language = value;\n            }\n            if (flags.channel) {\n                flags.channel = \"SERVICE\" + flags.channel;\n            }\n            return flags;\n        });\n    }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */ /**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */ var toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n    return function(adaptationSet) {\n        var adaptationSetAttributes = parseAttributes(adaptationSet);\n        var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, \"BaseURL\"));\n        var role = findChildren(adaptationSet, \"Role\")[0];\n        var roleAttributes = {\n            role: parseAttributes(role)\n        };\n        var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n        var accessibility = findChildren(adaptationSet, \"Accessibility\")[0];\n        var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n        if (captionServices) {\n            attrs = merge(attrs, {\n                captionServices: captionServices\n            });\n        }\n        var label = findChildren(adaptationSet, \"Label\")[0];\n        if (label && label.childNodes.length) {\n            var labelVal = label.childNodes[0].nodeValue.trim();\n            attrs = merge(attrs, {\n                label: labelVal\n            });\n        }\n        var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, \"ContentProtection\"));\n        if (Object.keys(contentProtection).length) {\n            attrs = merge(attrs, {\n                contentProtection: contentProtection\n            });\n        }\n        var segmentInfo = getSegmentInformation(adaptationSet);\n        var representations = findChildren(adaptationSet, \"Representation\");\n        var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n        return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n    };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */ /**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */ /**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */ var toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n    return function(period, index) {\n        var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, \"BaseURL\"));\n        var periodAttributes = merge(mpdAttributes, {\n            periodStart: period.attributes.start\n        });\n        if (typeof period.attributes.duration === \"number\") {\n            periodAttributes.periodDuration = period.attributes.duration;\n        }\n        var adaptationSets = findChildren(period.node, \"AdaptationSet\");\n        var periodSegmentInfo = getSegmentInformation(period.node);\n        return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n    };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */ var getPeriodStart = function getPeriodStart(_ref) {\n    var attributes = _ref.attributes, priorPeriodAttributes = _ref.priorPeriodAttributes, mpdType = _ref.mpdType;\n    // Summary of period start time calculation from DASH spec section 5.3.2.1\n    //\n    // A period's start is the first period's start + time elapsed after playing all\n    // prior periods to this one. Periods continue one after the other in time (without\n    // gaps) until the end of the presentation.\n    //\n    // The value of Period@start should be:\n    // 1. if Period@start is present: value of Period@start\n    // 2. if previous period exists and it has @duration: previous Period@start +\n    //    previous Period@duration\n    // 3. if this is first period and MPD@type is 'static': 0\n    // 4. in all other cases, consider the period an \"early available period\" (note: not\n    //    currently supported)\n    // (1)\n    if (typeof attributes.start === \"number\") {\n        return attributes.start;\n    } // (2)\n    if (priorPeriodAttributes && typeof priorPeriodAttributes.start === \"number\" && typeof priorPeriodAttributes.duration === \"number\") {\n        return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n    } // (3)\n    if (!priorPeriodAttributes && mpdType === \"static\") {\n        return 0;\n    } // (4)\n    // There is currently no logic for calculating the Period@start value if there is\n    // no Period@start or prior Period@start and Period@duration available. This is not made\n    // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n    // nothing about any other resolution strategies, it's implied. Thus, this case should\n    // be considered an early available period, or error, and null should suffice for both\n    // of those cases.\n    return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */ var inheritAttributes = function inheritAttributes(mpd, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _options = options, _options$manifestUri = _options.manifestUri, manifestUri = _options$manifestUri === void 0 ? \"\" : _options$manifestUri, _options$NOW = _options.NOW, NOW = _options$NOW === void 0 ? Date.now() : _options$NOW, _options$clientOffset = _options.clientOffset, clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n    var periodNodes = findChildren(mpd, \"Period\");\n    if (!periodNodes.length) {\n        throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n    }\n    var locations = findChildren(mpd, \"Location\");\n    var mpdAttributes = parseAttributes(mpd);\n    var mpdBaseUrls = buildBaseUrls([\n        manifestUri\n    ], findChildren(mpd, \"BaseURL\")); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n    mpdAttributes.type = mpdAttributes.type || \"static\";\n    mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n    mpdAttributes.NOW = NOW;\n    mpdAttributes.clientOffset = clientOffset;\n    if (locations.length) {\n        mpdAttributes.locations = locations.map(getContent);\n    }\n    var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n    // adding properties that require looking at prior periods is to parse attributes and add\n    // missing ones before toAdaptationSets is called. If more such properties are added, it\n    // may be better to refactor toAdaptationSets.\n    periodNodes.forEach(function(node, index) {\n        var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n        // for this period.\n        var priorPeriod = periods[index - 1];\n        attributes.start = getPeriodStart({\n            attributes: attributes,\n            priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n            mpdType: mpdAttributes.type\n        });\n        periods.push({\n            node: node,\n            attributes: attributes\n        });\n    });\n    return {\n        locations: mpdAttributes.locations,\n        representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n    };\n};\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n    if (manifestString === \"\") {\n        throw new Error(errors.DASH_EMPTY_MANIFEST);\n    }\n    var parser = new _xmldom_xmldom__WEBPACK_IMPORTED_MODULE_4__.DOMParser();\n    var xml;\n    var mpd;\n    try {\n        xml = parser.parseFromString(manifestString, \"application/xml\");\n        mpd = xml && xml.documentElement.tagName === \"MPD\" ? xml.documentElement : null;\n    } catch (e) {}\n    if (!mpd || mpd && mpd.getElementsByTagName(\"parsererror\").length > 0) {\n        throw new Error(errors.DASH_INVALID_XML);\n    }\n    return mpd;\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */ var parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n    var UTCTimingNode = findChildren(mpd, \"UTCTiming\")[0];\n    if (!UTCTimingNode) {\n        return null;\n    }\n    var attributes = parseAttributes(UTCTimingNode);\n    switch(attributes.schemeIdUri){\n        case \"urn:mpeg:dash:utc:http-head:2014\":\n        case \"urn:mpeg:dash:utc:http-head:2012\":\n            attributes.method = \"HEAD\";\n            break;\n        case \"urn:mpeg:dash:utc:http-xsdate:2014\":\n        case \"urn:mpeg:dash:utc:http-iso:2014\":\n        case \"urn:mpeg:dash:utc:http-xsdate:2012\":\n        case \"urn:mpeg:dash:utc:http-iso:2012\":\n            attributes.method = \"GET\";\n            break;\n        case \"urn:mpeg:dash:utc:direct:2014\":\n        case \"urn:mpeg:dash:utc:direct:2012\":\n            attributes.method = \"DIRECT\";\n            attributes.value = Date.parse(attributes.value);\n            break;\n        case \"urn:mpeg:dash:utc:http-ntp:2014\":\n        case \"urn:mpeg:dash:utc:ntp:2014\":\n        case \"urn:mpeg:dash:utc:sntp:2014\":\n        default:\n            throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n    }\n    return attributes;\n};\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */ var parse = function parse(manifestString, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n    var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n    return toM3u8({\n        dashPlaylists: playlists,\n        locations: parsedManifestInfo.locations,\n        sidxMapping: options.sidxMapping,\n        previousManifest: options.previousManifest\n    });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */ var parseUTCTiming = function parseUTCTiming(manifestString) {\n    return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/mpd-parser/dist/mpd-parser.es.js\n");

/***/ })

};
;