"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@videojs";
exports.ids = ["vendor-chunks/@videojs"];
exports.modules = {

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js":
/*!*************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/byte-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ENDIANNESS: () => (/* binding */ ENDIANNESS),\n/* harmony export */   IS_BIG_ENDIAN: () => (/* binding */ IS_BIG_ENDIAN),\n/* harmony export */   IS_LITTLE_ENDIAN: () => (/* binding */ IS_LITTLE_ENDIAN),\n/* harmony export */   bytesMatch: () => (/* binding */ bytesMatch),\n/* harmony export */   bytesToNumber: () => (/* binding */ bytesToNumber),\n/* harmony export */   bytesToString: () => (/* binding */ bytesToString),\n/* harmony export */   concatTypedArrays: () => (/* binding */ concatTypedArrays),\n/* harmony export */   countBits: () => (/* binding */ countBits),\n/* harmony export */   countBytes: () => (/* binding */ countBytes),\n/* harmony export */   isArrayBufferView: () => (/* binding */ isArrayBufferView),\n/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),\n/* harmony export */   numberToBytes: () => (/* binding */ numberToBytes),\n/* harmony export */   padStart: () => (/* binding */ padStart),\n/* harmony export */   reverseBytes: () => (/* binding */ reverseBytes),\n/* harmony export */   sliceBytes: () => (/* binding */ sliceBytes),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   toBinaryString: () => (/* binding */ toBinaryString),\n/* harmony export */   toHexString: () => (/* binding */ toHexString),\n/* harmony export */   toUint8: () => (/* binding */ toUint8)\n/* harmony export */ });\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_0__);\n // const log2 = Math.log2 ? Math.log2 : (x) => (Math.log(x) / Math.log(2));\nvar repeat = function repeat(str, len) {\n    var acc = \"\";\n    while(len--){\n        acc += str;\n    }\n    return acc;\n}; // count the number of bits it would take to represent a number\n// we used to do this with log2 but BigInt does not support builtin math\n// Math.ceil(log2(x));\nvar countBits = function countBits(x) {\n    return x.toString(2).length;\n}; // count the number of whole bytes it would take to represent a number\nvar countBytes = function countBytes(x) {\n    return Math.ceil(countBits(x) / 8);\n};\nvar padStart = function padStart(b, len, str) {\n    if (str === void 0) {\n        str = \" \";\n    }\n    return (repeat(str, len) + b.toString()).slice(-len);\n};\nvar isArrayBufferView = function isArrayBufferView(obj) {\n    if (ArrayBuffer.isView === \"function\") {\n        return ArrayBuffer.isView(obj);\n    }\n    return obj && obj.buffer instanceof ArrayBuffer;\n};\nvar isTypedArray = function isTypedArray(obj) {\n    return isArrayBufferView(obj);\n};\nvar toUint8 = function toUint8(bytes) {\n    if (bytes instanceof Uint8Array) {\n        return bytes;\n    }\n    if (!Array.isArray(bytes) && !isTypedArray(bytes) && !(bytes instanceof ArrayBuffer)) {\n        // any non-number or NaN leads to empty uint8array\n        // eslint-disable-next-line\n        if (typeof bytes !== \"number\" || typeof bytes === \"number\" && bytes !== bytes) {\n            bytes = 0;\n        } else {\n            bytes = [\n                bytes\n            ];\n        }\n    }\n    return new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);\n};\nvar toHexString = function toHexString(bytes) {\n    bytes = toUint8(bytes);\n    var str = \"\";\n    for(var i = 0; i < bytes.length; i++){\n        str += padStart(bytes[i].toString(16), 2, \"0\");\n    }\n    return str;\n};\nvar toBinaryString = function toBinaryString(bytes) {\n    bytes = toUint8(bytes);\n    var str = \"\";\n    for(var i = 0; i < bytes.length; i++){\n        str += padStart(bytes[i].toString(2), 8, \"0\");\n    }\n    return str;\n};\nvar BigInt = (global_window__WEBPACK_IMPORTED_MODULE_0___default().BigInt) || Number;\nvar BYTE_TABLE = [\n    BigInt(\"0x1\"),\n    BigInt(\"0x100\"),\n    BigInt(\"0x10000\"),\n    BigInt(\"0x1000000\"),\n    BigInt(\"0x100000000\"),\n    BigInt(\"0x10000000000\"),\n    BigInt(\"0x1000000000000\"),\n    BigInt(\"0x100000000000000\"),\n    BigInt(\"0x10000000000000000\")\n];\nvar ENDIANNESS = function() {\n    var a = new Uint16Array([\n        0xFFCC\n    ]);\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n    if (b[0] === 0xFF) {\n        return \"big\";\n    }\n    if (b[0] === 0xCC) {\n        return \"little\";\n    }\n    return \"unknown\";\n}();\nvar IS_BIG_ENDIAN = ENDIANNESS === \"big\";\nvar IS_LITTLE_ENDIAN = ENDIANNESS === \"little\";\nvar bytesToNumber = function bytesToNumber(bytes, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp, _ref$signed = _ref.signed, signed = _ref$signed === void 0 ? false : _ref$signed, _ref$le = _ref.le, le = _ref$le === void 0 ? false : _ref$le;\n    bytes = toUint8(bytes);\n    var fn = le ? \"reduce\" : \"reduceRight\";\n    var obj = bytes[fn] ? bytes[fn] : Array.prototype[fn];\n    var number = obj.call(bytes, function(total, byte, i) {\n        var exponent = le ? i : Math.abs(i + 1 - bytes.length);\n        return total + BigInt(byte) * BYTE_TABLE[exponent];\n    }, BigInt(0));\n    if (signed) {\n        var max = BYTE_TABLE[bytes.length] / BigInt(2) - BigInt(1);\n        number = BigInt(number);\n        if (number > max) {\n            number -= max;\n            number -= max;\n            number -= BigInt(2);\n        }\n    }\n    return Number(number);\n};\nvar numberToBytes = function numberToBytes(number, _temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$le = _ref2.le, le = _ref2$le === void 0 ? false : _ref2$le;\n    // eslint-disable-next-line\n    if (typeof number !== \"bigint\" && typeof number !== \"number\" || typeof number === \"number\" && number !== number) {\n        number = 0;\n    }\n    number = BigInt(number);\n    var byteCount = countBytes(number);\n    var bytes = new Uint8Array(new ArrayBuffer(byteCount));\n    for(var i = 0; i < byteCount; i++){\n        var byteIndex = le ? i : Math.abs(i + 1 - bytes.length);\n        bytes[byteIndex] = Number(number / BYTE_TABLE[i] & BigInt(0xFF));\n        if (number < 0) {\n            bytes[byteIndex] = Math.abs(~bytes[byteIndex]);\n            bytes[byteIndex] -= i === 0 ? 1 : 2;\n        }\n    }\n    return bytes;\n};\nvar bytesToString = function bytesToString(bytes) {\n    if (!bytes) {\n        return \"\";\n    } // TODO: should toUint8 handle cases where we only have 8 bytes\n    // but report more since this is a Uint16+ Array?\n    bytes = Array.prototype.slice.call(bytes);\n    var string = String.fromCharCode.apply(null, toUint8(bytes));\n    try {\n        return decodeURIComponent(escape(string));\n    } catch (e) {\n    // or full non string data. Just return the potentially garbled string.\n    }\n    return string;\n};\nvar stringToBytes = function stringToBytes(string, stringIsBytes) {\n    if (typeof string !== \"string\" && string && typeof string.toString === \"function\") {\n        string = string.toString();\n    }\n    if (typeof string !== \"string\") {\n        return new Uint8Array();\n    } // If the string already is bytes, we don't have to do this\n    // otherwise we do this so that we split multi length characters\n    // into individual bytes\n    if (!stringIsBytes) {\n        string = unescape(encodeURIComponent(string));\n    }\n    var view = new Uint8Array(string.length);\n    for(var i = 0; i < string.length; i++){\n        view[i] = string.charCodeAt(i);\n    }\n    return view;\n};\nvar concatTypedArrays = function concatTypedArrays() {\n    for(var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++){\n        buffers[_key] = arguments[_key];\n    }\n    buffers = buffers.filter(function(b) {\n        return b && (b.byteLength || b.length) && typeof b !== \"string\";\n    });\n    if (buffers.length <= 1) {\n        // for 0 length we will return empty uint8\n        // for 1 length we return the first uint8\n        return toUint8(buffers[0]);\n    }\n    var totalLen = buffers.reduce(function(total, buf, i) {\n        return total + (buf.byteLength || buf.length);\n    }, 0);\n    var tempBuffer = new Uint8Array(totalLen);\n    var offset = 0;\n    buffers.forEach(function(buf) {\n        buf = toUint8(buf);\n        tempBuffer.set(buf, offset);\n        offset += buf.byteLength;\n    });\n    return tempBuffer;\n};\n/**\n * Check if the bytes \"b\" are contained within bytes \"a\".\n *\n * @param {Uint8Array|Array} a\n *        Bytes to check in\n *\n * @param {Uint8Array|Array} b\n *        Bytes to check for\n *\n * @param {Object} options\n *        options\n *\n * @param {Array|Uint8Array} [offset=0]\n *        offset to use when looking at bytes in a\n *\n * @param {Array|Uint8Array} [mask=[]]\n *        mask to use on bytes before comparison.\n *\n * @return {boolean}\n *         If all bytes in b are inside of a, taking into account\n *         bit masks.\n */ var bytesMatch = function bytesMatch(a, b, _temp3) {\n    var _ref3 = _temp3 === void 0 ? {} : _temp3, _ref3$offset = _ref3.offset, offset = _ref3$offset === void 0 ? 0 : _ref3$offset, _ref3$mask = _ref3.mask, mask = _ref3$mask === void 0 ? [] : _ref3$mask;\n    a = toUint8(a);\n    b = toUint8(b); // ie 11 does not support uint8 every\n    var fn = b.every ? b.every : Array.prototype.every;\n    return b.length && a.length - offset >= b.length && // ie 11 doesn't support every on uin8\n    fn.call(b, function(bByte, i) {\n        var aByte = mask[i] ? mask[i] & a[offset + i] : a[offset + i];\n        return bByte === aByte;\n    });\n};\nvar sliceBytes = function sliceBytes(src, start, end) {\n    if (Uint8Array.prototype.slice) {\n        return Uint8Array.prototype.slice.call(src, start, end);\n    }\n    return new Uint8Array(Array.prototype.slice.call(src, start, end));\n};\nvar reverseBytes = function reverseBytes(src) {\n    if (src.reverse) {\n        return src.reverse();\n    }\n    return Array.prototype.reverse.call(src);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/codec-helpers.js":
/*!**************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/codec-helpers.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAv1Codec: () => (/* binding */ getAv1Codec),\n/* harmony export */   getAvcCodec: () => (/* binding */ getAvcCodec),\n/* harmony export */   getHvcCodec: () => (/* binding */ getHvcCodec)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n // https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax\n// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/codecs_parameter#AV1\nvar getAv1Codec = function getAv1Codec(bytes) {\n    var codec = \"\";\n    var profile = bytes[1] >>> 3;\n    var level = bytes[1] & 0x1F;\n    var tier = bytes[2] >>> 7;\n    var highBitDepth = (bytes[2] & 0x40) >> 6;\n    var twelveBit = (bytes[2] & 0x20) >> 5;\n    var monochrome = (bytes[2] & 0x10) >> 4;\n    var chromaSubsamplingX = (bytes[2] & 0x08) >> 3;\n    var chromaSubsamplingY = (bytes[2] & 0x04) >> 2;\n    var chromaSamplePosition = bytes[2] & 0x03;\n    codec += profile + \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(level, 2, \"0\");\n    if (tier === 0) {\n        codec += \"M\";\n    } else if (tier === 1) {\n        codec += \"H\";\n    }\n    var bitDepth;\n    if (profile === 2 && highBitDepth) {\n        bitDepth = twelveBit ? 12 : 10;\n    } else {\n        bitDepth = highBitDepth ? 10 : 8;\n    }\n    codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(bitDepth, 2, \"0\"); // TODO: can we parse color range??\n    codec += \".\" + monochrome;\n    codec += \".\" + chromaSubsamplingX + chromaSubsamplingY + chromaSamplePosition;\n    return codec;\n};\nvar getAvcCodec = function getAvcCodec(bytes) {\n    var profileId = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toHexString)(bytes[1]);\n    var constraintFlags = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toHexString)(bytes[2] & 0xFC);\n    var levelId = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toHexString)(bytes[3]);\n    return \"\" + profileId + constraintFlags + levelId;\n};\nvar getHvcCodec = function getHvcCodec(bytes) {\n    var codec = \"\";\n    var profileSpace = bytes[1] >> 6;\n    var profileId = bytes[1] & 0x1F;\n    var tierFlag = (bytes[1] & 0x20) >> 5;\n    var profileCompat = bytes.subarray(2, 6);\n    var constraintIds = bytes.subarray(6, 12);\n    var levelId = bytes[12];\n    if (profileSpace === 1) {\n        codec += \"A\";\n    } else if (profileSpace === 2) {\n        codec += \"B\";\n    } else if (profileSpace === 3) {\n        codec += \"C\";\n    }\n    codec += profileId + \".\"; // ffmpeg does this in big endian\n    var profileCompatVal = parseInt((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toBinaryString)(profileCompat).split(\"\").reverse().join(\"\"), 2); // apple does this in little endian...\n    if (profileCompatVal > 255) {\n        profileCompatVal = parseInt((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toBinaryString)(profileCompat), 2);\n    }\n    codec += profileCompatVal.toString(16) + \".\";\n    if (tierFlag === 0) {\n        codec += \"L\";\n    } else {\n        codec += \"H\";\n    }\n    codec += levelId;\n    var constraints = \"\";\n    for(var i = 0; i < constraintIds.length; i++){\n        var v = constraintIds[i];\n        if (v) {\n            if (constraints) {\n                constraints += \".\";\n            }\n            constraints += v.toString(16);\n        }\n    }\n    if (constraints) {\n        codec += \".\" + constraints;\n    }\n    return codec;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9jb2RlYy1oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEUsQ0FBQyw4RUFBOEU7QUFDekosa0ZBQWtGO0FBRTNFLElBQUlHLGNBQWMsU0FBU0EsWUFBWUMsS0FBSztJQUNqRCxJQUFJQyxRQUFRO0lBQ1osSUFBSUMsVUFBVUYsS0FBSyxDQUFDLEVBQUUsS0FBSztJQUMzQixJQUFJRyxRQUFRSCxLQUFLLENBQUMsRUFBRSxHQUFHO0lBQ3ZCLElBQUlJLE9BQU9KLEtBQUssQ0FBQyxFQUFFLEtBQUs7SUFDeEIsSUFBSUssZUFBZSxDQUFDTCxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUcsS0FBTTtJQUN4QyxJQUFJTSxZQUFZLENBQUNOLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBRyxLQUFNO0lBQ3JDLElBQUlPLGFBQWEsQ0FBQ1AsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFHLEtBQU07SUFDdEMsSUFBSVEscUJBQXFCLENBQUNSLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBRyxLQUFNO0lBQzlDLElBQUlTLHFCQUFxQixDQUFDVCxLQUFLLENBQUMsRUFBRSxHQUFHLElBQUcsS0FBTTtJQUM5QyxJQUFJVSx1QkFBdUJWLEtBQUssQ0FBQyxFQUFFLEdBQUc7SUFDdENDLFNBQVNDLFVBQVUsTUFBTU4sMERBQVFBLENBQUNPLE9BQU8sR0FBRztJQUU1QyxJQUFJQyxTQUFTLEdBQUc7UUFDZEgsU0FBUztJQUNYLE9BQU8sSUFBSUcsU0FBUyxHQUFHO1FBQ3JCSCxTQUFTO0lBQ1g7SUFFQSxJQUFJVTtJQUVKLElBQUlULFlBQVksS0FBS0csY0FBYztRQUNqQ00sV0FBV0wsWUFBWSxLQUFLO0lBQzlCLE9BQU87UUFDTEssV0FBV04sZUFBZSxLQUFLO0lBQ2pDO0lBRUFKLFNBQVMsTUFBTUwsMERBQVFBLENBQUNlLFVBQVUsR0FBRyxNQUFNLG1DQUFtQztJQUU5RVYsU0FBUyxNQUFNTTtJQUNmTixTQUFTLE1BQU1PLHFCQUFxQkMscUJBQXFCQztJQUN6RCxPQUFPVDtBQUNULEVBQUU7QUFDSyxJQUFJVyxjQUFjLFNBQVNBLFlBQVlaLEtBQUs7SUFDakQsSUFBSWEsWUFBWWhCLDZEQUFXQSxDQUFDRyxLQUFLLENBQUMsRUFBRTtJQUNwQyxJQUFJYyxrQkFBa0JqQiw2REFBV0EsQ0FBQ0csS0FBSyxDQUFDLEVBQUUsR0FBRztJQUM3QyxJQUFJZSxVQUFVbEIsNkRBQVdBLENBQUNHLEtBQUssQ0FBQyxFQUFFO0lBQ2xDLE9BQU8sS0FBS2EsWUFBWUMsa0JBQWtCQztBQUM1QyxFQUFFO0FBQ0ssSUFBSUMsY0FBYyxTQUFTQSxZQUFZaEIsS0FBSztJQUNqRCxJQUFJQyxRQUFRO0lBQ1osSUFBSWdCLGVBQWVqQixLQUFLLENBQUMsRUFBRSxJQUFJO0lBQy9CLElBQUlhLFlBQVliLEtBQUssQ0FBQyxFQUFFLEdBQUc7SUFDM0IsSUFBSWtCLFdBQVcsQ0FBQ2xCLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBRyxLQUFNO0lBQ3BDLElBQUltQixnQkFBZ0JuQixNQUFNb0IsUUFBUSxDQUFDLEdBQUc7SUFDdEMsSUFBSUMsZ0JBQWdCckIsTUFBTW9CLFFBQVEsQ0FBQyxHQUFHO0lBQ3RDLElBQUlMLFVBQVVmLEtBQUssQ0FBQyxHQUFHO0lBRXZCLElBQUlpQixpQkFBaUIsR0FBRztRQUN0QmhCLFNBQVM7SUFDWCxPQUFPLElBQUlnQixpQkFBaUIsR0FBRztRQUM3QmhCLFNBQVM7SUFDWCxPQUFPLElBQUlnQixpQkFBaUIsR0FBRztRQUM3QmhCLFNBQVM7SUFDWDtJQUVBQSxTQUFTWSxZQUFZLEtBQUssaUNBQWlDO0lBRTNELElBQUlTLG1CQUFtQkMsU0FBU3pCLGdFQUFjQSxDQUFDcUIsZUFBZUssS0FBSyxDQUFDLElBQUlDLE9BQU8sR0FBR0MsSUFBSSxDQUFDLEtBQUssSUFBSSxzQ0FBc0M7SUFFdEksSUFBSUosbUJBQW1CLEtBQUs7UUFDMUJBLG1CQUFtQkMsU0FBU3pCLGdFQUFjQSxDQUFDcUIsZ0JBQWdCO0lBQzdEO0lBRUFsQixTQUFTcUIsaUJBQWlCSyxRQUFRLENBQUMsTUFBTTtJQUV6QyxJQUFJVCxhQUFhLEdBQUc7UUFDbEJqQixTQUFTO0lBQ1gsT0FBTztRQUNMQSxTQUFTO0lBQ1g7SUFFQUEsU0FBU2M7SUFDVCxJQUFJYSxjQUFjO0lBRWxCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUixjQUFjUyxNQUFNLEVBQUVELElBQUs7UUFDN0MsSUFBSUUsSUFBSVYsYUFBYSxDQUFDUSxFQUFFO1FBRXhCLElBQUlFLEdBQUc7WUFDTCxJQUFJSCxhQUFhO2dCQUNmQSxlQUFlO1lBQ2pCO1lBRUFBLGVBQWVHLEVBQUVKLFFBQVEsQ0FBQztRQUM1QjtJQUNGO0lBRUEsSUFBSUMsYUFBYTtRQUNmM0IsU0FBUyxNQUFNMkI7SUFDakI7SUFFQSxPQUFPM0I7QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJlZXplLW5leHQvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9jb2RlYy1oZWxwZXJzLmpzP2YwNmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFkU3RhcnQsIHRvSGV4U3RyaW5nLCB0b0JpbmFyeVN0cmluZyB9IGZyb20gJy4vYnl0ZS1oZWxwZXJzLmpzJzsgLy8gaHR0cHM6Ly9hb21lZGlhY29kZWMuZ2l0aHViLmlvL2F2MS1pc29ibWZmLyNhdjFjb2RlY2NvbmZpZ3VyYXRpb25ib3gtc3ludGF4XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9NZWRpYS9Gb3JtYXRzL2NvZGVjc19wYXJhbWV0ZXIjQVYxXG5cbmV4cG9ydCB2YXIgZ2V0QXYxQ29kZWMgPSBmdW5jdGlvbiBnZXRBdjFDb2RlYyhieXRlcykge1xuICB2YXIgY29kZWMgPSAnJztcbiAgdmFyIHByb2ZpbGUgPSBieXRlc1sxXSA+Pj4gMztcbiAgdmFyIGxldmVsID0gYnl0ZXNbMV0gJiAweDFGO1xuICB2YXIgdGllciA9IGJ5dGVzWzJdID4+PiA3O1xuICB2YXIgaGlnaEJpdERlcHRoID0gKGJ5dGVzWzJdICYgMHg0MCkgPj4gNjtcbiAgdmFyIHR3ZWx2ZUJpdCA9IChieXRlc1syXSAmIDB4MjApID4+IDU7XG4gIHZhciBtb25vY2hyb21lID0gKGJ5dGVzWzJdICYgMHgxMCkgPj4gNDtcbiAgdmFyIGNocm9tYVN1YnNhbXBsaW5nWCA9IChieXRlc1syXSAmIDB4MDgpID4+IDM7XG4gIHZhciBjaHJvbWFTdWJzYW1wbGluZ1kgPSAoYnl0ZXNbMl0gJiAweDA0KSA+PiAyO1xuICB2YXIgY2hyb21hU2FtcGxlUG9zaXRpb24gPSBieXRlc1syXSAmIDB4MDM7XG4gIGNvZGVjICs9IHByb2ZpbGUgKyBcIi5cIiArIHBhZFN0YXJ0KGxldmVsLCAyLCAnMCcpO1xuXG4gIGlmICh0aWVyID09PSAwKSB7XG4gICAgY29kZWMgKz0gJ00nO1xuICB9IGVsc2UgaWYgKHRpZXIgPT09IDEpIHtcbiAgICBjb2RlYyArPSAnSCc7XG4gIH1cblxuICB2YXIgYml0RGVwdGg7XG5cbiAgaWYgKHByb2ZpbGUgPT09IDIgJiYgaGlnaEJpdERlcHRoKSB7XG4gICAgYml0RGVwdGggPSB0d2VsdmVCaXQgPyAxMiA6IDEwO1xuICB9IGVsc2Uge1xuICAgIGJpdERlcHRoID0gaGlnaEJpdERlcHRoID8gMTAgOiA4O1xuICB9XG5cbiAgY29kZWMgKz0gXCIuXCIgKyBwYWRTdGFydChiaXREZXB0aCwgMiwgJzAnKTsgLy8gVE9ETzogY2FuIHdlIHBhcnNlIGNvbG9yIHJhbmdlPz9cblxuICBjb2RlYyArPSBcIi5cIiArIG1vbm9jaHJvbWU7XG4gIGNvZGVjICs9IFwiLlwiICsgY2hyb21hU3Vic2FtcGxpbmdYICsgY2hyb21hU3Vic2FtcGxpbmdZICsgY2hyb21hU2FtcGxlUG9zaXRpb247XG4gIHJldHVybiBjb2RlYztcbn07XG5leHBvcnQgdmFyIGdldEF2Y0NvZGVjID0gZnVuY3Rpb24gZ2V0QXZjQ29kZWMoYnl0ZXMpIHtcbiAgdmFyIHByb2ZpbGVJZCA9IHRvSGV4U3RyaW5nKGJ5dGVzWzFdKTtcbiAgdmFyIGNvbnN0cmFpbnRGbGFncyA9IHRvSGV4U3RyaW5nKGJ5dGVzWzJdICYgMHhGQyk7XG4gIHZhciBsZXZlbElkID0gdG9IZXhTdHJpbmcoYnl0ZXNbM10pO1xuICByZXR1cm4gXCJcIiArIHByb2ZpbGVJZCArIGNvbnN0cmFpbnRGbGFncyArIGxldmVsSWQ7XG59O1xuZXhwb3J0IHZhciBnZXRIdmNDb2RlYyA9IGZ1bmN0aW9uIGdldEh2Y0NvZGVjKGJ5dGVzKSB7XG4gIHZhciBjb2RlYyA9ICcnO1xuICB2YXIgcHJvZmlsZVNwYWNlID0gYnl0ZXNbMV0gPj4gNjtcbiAgdmFyIHByb2ZpbGVJZCA9IGJ5dGVzWzFdICYgMHgxRjtcbiAgdmFyIHRpZXJGbGFnID0gKGJ5dGVzWzFdICYgMHgyMCkgPj4gNTtcbiAgdmFyIHByb2ZpbGVDb21wYXQgPSBieXRlcy5zdWJhcnJheSgyLCA2KTtcbiAgdmFyIGNvbnN0cmFpbnRJZHMgPSBieXRlcy5zdWJhcnJheSg2LCAxMik7XG4gIHZhciBsZXZlbElkID0gYnl0ZXNbMTJdO1xuXG4gIGlmIChwcm9maWxlU3BhY2UgPT09IDEpIHtcbiAgICBjb2RlYyArPSAnQSc7XG4gIH0gZWxzZSBpZiAocHJvZmlsZVNwYWNlID09PSAyKSB7XG4gICAgY29kZWMgKz0gJ0InO1xuICB9IGVsc2UgaWYgKHByb2ZpbGVTcGFjZSA9PT0gMykge1xuICAgIGNvZGVjICs9ICdDJztcbiAgfVxuXG4gIGNvZGVjICs9IHByb2ZpbGVJZCArIFwiLlwiOyAvLyBmZm1wZWcgZG9lcyB0aGlzIGluIGJpZyBlbmRpYW5cblxuICB2YXIgcHJvZmlsZUNvbXBhdFZhbCA9IHBhcnNlSW50KHRvQmluYXJ5U3RyaW5nKHByb2ZpbGVDb21wYXQpLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyksIDIpOyAvLyBhcHBsZSBkb2VzIHRoaXMgaW4gbGl0dGxlIGVuZGlhbi4uLlxuXG4gIGlmIChwcm9maWxlQ29tcGF0VmFsID4gMjU1KSB7XG4gICAgcHJvZmlsZUNvbXBhdFZhbCA9IHBhcnNlSW50KHRvQmluYXJ5U3RyaW5nKHByb2ZpbGVDb21wYXQpLCAyKTtcbiAgfVxuXG4gIGNvZGVjICs9IHByb2ZpbGVDb21wYXRWYWwudG9TdHJpbmcoMTYpICsgXCIuXCI7XG5cbiAgaWYgKHRpZXJGbGFnID09PSAwKSB7XG4gICAgY29kZWMgKz0gJ0wnO1xuICB9IGVsc2Uge1xuICAgIGNvZGVjICs9ICdIJztcbiAgfVxuXG4gIGNvZGVjICs9IGxldmVsSWQ7XG4gIHZhciBjb25zdHJhaW50cyA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc3RyYWludElkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2ID0gY29uc3RyYWludElkc1tpXTtcblxuICAgIGlmICh2KSB7XG4gICAgICBpZiAoY29uc3RyYWludHMpIHtcbiAgICAgICAgY29uc3RyYWludHMgKz0gJy4nO1xuICAgICAgfVxuXG4gICAgICBjb25zdHJhaW50cyArPSB2LnRvU3RyaW5nKDE2KTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29uc3RyYWludHMpIHtcbiAgICBjb2RlYyArPSBcIi5cIiArIGNvbnN0cmFpbnRzO1xuICB9XG5cbiAgcmV0dXJuIGNvZGVjO1xufTsiXSwibmFtZXMiOlsicGFkU3RhcnQiLCJ0b0hleFN0cmluZyIsInRvQmluYXJ5U3RyaW5nIiwiZ2V0QXYxQ29kZWMiLCJieXRlcyIsImNvZGVjIiwicHJvZmlsZSIsImxldmVsIiwidGllciIsImhpZ2hCaXREZXB0aCIsInR3ZWx2ZUJpdCIsIm1vbm9jaHJvbWUiLCJjaHJvbWFTdWJzYW1wbGluZ1giLCJjaHJvbWFTdWJzYW1wbGluZ1kiLCJjaHJvbWFTYW1wbGVQb3NpdGlvbiIsImJpdERlcHRoIiwiZ2V0QXZjQ29kZWMiLCJwcm9maWxlSWQiLCJjb25zdHJhaW50RmxhZ3MiLCJsZXZlbElkIiwiZ2V0SHZjQ29kZWMiLCJwcm9maWxlU3BhY2UiLCJ0aWVyRmxhZyIsInByb2ZpbGVDb21wYXQiLCJzdWJhcnJheSIsImNvbnN0cmFpbnRJZHMiLCJwcm9maWxlQ29tcGF0VmFsIiwicGFyc2VJbnQiLCJzcGxpdCIsInJldmVyc2UiLCJqb2luIiwidG9TdHJpbmciLCJjb25zdHJhaW50cyIsImkiLCJsZW5ndGgiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/codec-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/codecs.js":
/*!*******************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/codecs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_AUDIO_CODEC: () => (/* binding */ DEFAULT_AUDIO_CODEC),\n/* harmony export */   DEFAULT_VIDEO_CODEC: () => (/* binding */ DEFAULT_VIDEO_CODEC),\n/* harmony export */   browserSupportsCodec: () => (/* binding */ browserSupportsCodec),\n/* harmony export */   codecsFromDefault: () => (/* binding */ codecsFromDefault),\n/* harmony export */   getMimeForCodec: () => (/* binding */ getMimeForCodec),\n/* harmony export */   isAudioCodec: () => (/* binding */ isAudioCodec),\n/* harmony export */   isTextCodec: () => (/* binding */ isTextCodec),\n/* harmony export */   isVideoCodec: () => (/* binding */ isVideoCodec),\n/* harmony export */   mapLegacyAvcCodecs: () => (/* binding */ mapLegacyAvcCodecs),\n/* harmony export */   muxerSupportsCodec: () => (/* binding */ muxerSupportsCodec),\n/* harmony export */   parseCodecs: () => (/* binding */ parseCodecs),\n/* harmony export */   translateLegacyCodec: () => (/* binding */ translateLegacyCodec),\n/* harmony export */   translateLegacyCodecs: () => (/* binding */ translateLegacyCodecs)\n/* harmony export */ });\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_0__);\n\nvar regexs = {\n    // to determine mime types\n    mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,\n    webm: /^(vp0?[89]|av0?1|opus|vorbis)/,\n    ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,\n    // to determine if a codec is audio or video\n    video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,\n    audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,\n    text: /^(stpp.ttml.im1t)/,\n    // mux.js support regex\n    muxerVideo: /^(avc0?1)/,\n    muxerAudio: /^(mp4a)/,\n    // match nothing as muxer does not support text right now.\n    // there cannot never be a character before the start of a string\n    // so this matches nothing.\n    muxerText: /a^/\n};\nvar mediaTypes = [\n    \"video\",\n    \"audio\",\n    \"text\"\n];\nvar upperMediaTypes = [\n    \"Video\",\n    \"Audio\",\n    \"Text\"\n];\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string} codec\n *        Codec string to translate\n * @return {string}\n *         The translated codec string\n */ var translateLegacyCodec = function translateLegacyCodec(codec) {\n    if (!codec) {\n        return codec;\n    }\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function(orig, profile, avcLevel) {\n        var profileHex = (\"00\" + Number(profile).toString(16)).slice(-2);\n        var avcLevelHex = (\"00\" + Number(avcLevel).toString(16)).slice(-2);\n        return \"avc1.\" + profileHex + \"00\" + avcLevelHex;\n    });\n};\n/**\n * Replace the old apple-style `avc1.<dd>.<dd>` codec strings with the standard\n * `avc1.<hhhhhh>`\n *\n * @param {string[]} codecs\n *        An array of codec strings to translate\n * @return {string[]}\n *         The translated array of codec strings\n */ var translateLegacyCodecs = function translateLegacyCodecs(codecs) {\n    return codecs.map(translateLegacyCodec);\n};\n/**\n * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the\n * standard `avc1.<hhhhhh>`.\n *\n * @param {string} codecString\n *        The codec string\n * @return {string}\n *         The codec string with old apple-style codecs replaced\n *\n * @private\n */ var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {\n    return codecString.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function(match) {\n        return translateLegacyCodecs([\n            match\n        ])[0];\n    });\n};\n/**\n * @typedef {Object} ParsedCodecInfo\n * @property {number} codecCount\n *           Number of codecs parsed\n * @property {string} [videoCodec]\n *           Parsed video codec (if found)\n * @property {string} [videoObjectTypeIndicator]\n *           Video object type indicator (if found)\n * @property {string|null} audioProfile\n *           Audio profile\n */ /**\n * Parses a codec string to retrieve the number of codecs specified, the video codec and\n * object type indicator, and the audio profile.\n *\n * @param {string} [codecString]\n *        The codec string to parse\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */ var parseCodecs = function parseCodecs(codecString) {\n    if (codecString === void 0) {\n        codecString = \"\";\n    }\n    var codecs = codecString.split(\",\");\n    var result = [];\n    codecs.forEach(function(codec) {\n        codec = codec.trim();\n        var codecType;\n        mediaTypes.forEach(function(name) {\n            var match = regexs[name].exec(codec.toLowerCase());\n            if (!match || match.length <= 1) {\n                return;\n            }\n            codecType = name; // maintain codec case\n            var type = codec.substring(0, match[1].length);\n            var details = codec.replace(type, \"\");\n            result.push({\n                type: type,\n                details: details,\n                mediaType: name\n            });\n        });\n        if (!codecType) {\n            result.push({\n                type: codec,\n                details: \"\",\n                mediaType: \"unknown\"\n            });\n        }\n    });\n    return result;\n};\n/**\n * Returns a ParsedCodecInfo object for the default alternate audio playlist if there is\n * a default alternate audio playlist for the provided audio group.\n *\n * @param {Object} master\n *        The master playlist\n * @param {string} audioGroupId\n *        ID of the audio group for which to find the default codec info\n * @return {ParsedCodecInfo}\n *         Parsed codec info\n */ var codecsFromDefault = function codecsFromDefault(master, audioGroupId) {\n    if (!master.mediaGroups.AUDIO || !audioGroupId) {\n        return null;\n    }\n    var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\n    if (!audioGroup) {\n        return null;\n    }\n    for(var name in audioGroup){\n        var audioType = audioGroup[name];\n        if (audioType.default && audioType.playlists) {\n            // codec should be the same for all playlists within the audio type\n            return parseCodecs(audioType.playlists[0].attributes.CODECS);\n        }\n    }\n    return null;\n};\nvar isVideoCodec = function isVideoCodec(codec) {\n    if (codec === void 0) {\n        codec = \"\";\n    }\n    return regexs.video.test(codec.trim().toLowerCase());\n};\nvar isAudioCodec = function isAudioCodec(codec) {\n    if (codec === void 0) {\n        codec = \"\";\n    }\n    return regexs.audio.test(codec.trim().toLowerCase());\n};\nvar isTextCodec = function isTextCodec(codec) {\n    if (codec === void 0) {\n        codec = \"\";\n    }\n    return regexs.text.test(codec.trim().toLowerCase());\n};\nvar getMimeForCodec = function getMimeForCodec(codecString) {\n    if (!codecString || typeof codecString !== \"string\") {\n        return;\n    }\n    var codecs = codecString.toLowerCase().split(\",\").map(function(c) {\n        return translateLegacyCodec(c.trim());\n    }); // default to video type\n    var type = \"video\"; // only change to audio type if the only codec we have is\n    // audio\n    if (codecs.length === 1 && isAudioCodec(codecs[0])) {\n        type = \"audio\";\n    } else if (codecs.length === 1 && isTextCodec(codecs[0])) {\n        // text uses application/<container> for now\n        type = \"application\";\n    } // default the container to mp4\n    var container = \"mp4\"; // every codec must be able to go into the container\n    // for that container to be the correct one\n    if (codecs.every(function(c) {\n        return regexs.mp4.test(c);\n    })) {\n        container = \"mp4\";\n    } else if (codecs.every(function(c) {\n        return regexs.webm.test(c);\n    })) {\n        container = \"webm\";\n    } else if (codecs.every(function(c) {\n        return regexs.ogg.test(c);\n    })) {\n        container = \"ogg\";\n    }\n    return type + \"/\" + container + ';codecs=\"' + codecString + '\"';\n};\nvar browserSupportsCodec = function browserSupportsCodec(codecString) {\n    if (codecString === void 0) {\n        codecString = \"\";\n    }\n    return (global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource) && (global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource).isTypeSupported && global_window__WEBPACK_IMPORTED_MODULE_0___default().MediaSource.isTypeSupported(getMimeForCodec(codecString)) || false;\n};\nvar muxerSupportsCodec = function muxerSupportsCodec(codecString) {\n    if (codecString === void 0) {\n        codecString = \"\";\n    }\n    return codecString.toLowerCase().split(\",\").every(function(codec) {\n        codec = codec.trim(); // any match is supported.\n        for(var i = 0; i < upperMediaTypes.length; i++){\n            var type = upperMediaTypes[i];\n            if (regexs[\"muxer\" + type].test(codec)) {\n                return true;\n            }\n        }\n        return false;\n    });\n};\nvar DEFAULT_AUDIO_CODEC = \"mp4a.40.2\";\nvar DEFAULT_VIDEO_CODEC = \"avc1.4d400d\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/codecs.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/containers.js":
/*!***********************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/containers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectContainerForBytes: () => (/* binding */ detectContainerForBytes),\n/* harmony export */   isLikely: () => (/* binding */ isLikely),\n/* harmony export */   isLikelyFmp4MediaSegment: () => (/* binding */ isLikelyFmp4MediaSegment)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n/* harmony import */ var _mp4_helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mp4-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/mp4-helpers.js\");\n/* harmony import */ var _ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ebml-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/ebml-helpers.js\");\n/* harmony import */ var _id3_helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./id3-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/id3-helpers.js\");\n/* harmony import */ var _nal_helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nal-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/nal-helpers.js\");\n\n\n\n\n\nvar CONSTANTS = {\n    // \"webm\" string literal in hex\n    \"webm\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x77,\n        0x65,\n        0x62,\n        0x6d\n    ]),\n    // \"matroska\" string literal in hex\n    \"matroska\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x6d,\n        0x61,\n        0x74,\n        0x72,\n        0x6f,\n        0x73,\n        0x6b,\n        0x61\n    ]),\n    // \"fLaC\" string literal in hex\n    \"flac\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x66,\n        0x4c,\n        0x61,\n        0x43\n    ]),\n    // \"OggS\" string literal in hex\n    \"ogg\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x4f,\n        0x67,\n        0x67,\n        0x53\n    ]),\n    // ac-3 sync byte, also works for ec-3 as that is simply a codec\n    // of ac-3\n    \"ac3\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x0b,\n        0x77\n    ]),\n    // \"RIFF\" string literal in hex used for wav and avi\n    \"riff\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x52,\n        0x49,\n        0x46,\n        0x46\n    ]),\n    // \"AVI\" string literal in hex\n    \"avi\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x41,\n        0x56,\n        0x49\n    ]),\n    // \"WAVE\" string literal in hex\n    \"wav\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x57,\n        0x41,\n        0x56,\n        0x45\n    ]),\n    // \"ftyp3g\" string literal in hex\n    \"3gp\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x66,\n        0x74,\n        0x79,\n        0x70,\n        0x33,\n        0x67\n    ]),\n    // \"ftyp\" string literal in hex\n    \"mp4\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x66,\n        0x74,\n        0x79,\n        0x70\n    ]),\n    // \"styp\" string literal in hex\n    \"fmp4\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x73,\n        0x74,\n        0x79,\n        0x70\n    ]),\n    // \"ftypqt\" string literal in hex\n    \"mov\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x66,\n        0x74,\n        0x79,\n        0x70,\n        0x71,\n        0x74\n    ]),\n    // moov string literal in hex\n    \"moov\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x6D,\n        0x6F,\n        0x6F,\n        0x76\n    ]),\n    // moof string literal in hex\n    \"moof\": (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x6D,\n        0x6F,\n        0x6F,\n        0x66\n    ])\n};\nvar _isLikely = {\n    aac: function aac(bytes) {\n        var offset = (0,_id3_helpers_js__WEBPACK_IMPORTED_MODULE_3__.getId3Offset)(bytes);\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, [\n            0xFF,\n            0x10\n        ], {\n            offset: offset,\n            mask: [\n                0xFF,\n                0x16\n            ]\n        });\n    },\n    mp3: function mp3(bytes) {\n        var offset = (0,_id3_helpers_js__WEBPACK_IMPORTED_MODULE_3__.getId3Offset)(bytes);\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, [\n            0xFF,\n            0x02\n        ], {\n            offset: offset,\n            mask: [\n                0xFF,\n                0x06\n            ]\n        });\n    },\n    webm: function webm(bytes) {\n        var docType = (0,_ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.findEbml)(bytes, [\n            _ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.EBML_TAGS.EBML,\n            _ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.EBML_TAGS.DocType\n        ])[0]; // check if DocType EBML tag is webm\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(docType, CONSTANTS.webm);\n    },\n    mkv: function mkv(bytes) {\n        var docType = (0,_ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.findEbml)(bytes, [\n            _ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.EBML_TAGS.EBML,\n            _ebml_helpers_js__WEBPACK_IMPORTED_MODULE_2__.EBML_TAGS.DocType\n        ])[0]; // check if DocType EBML tag is matroska\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(docType, CONSTANTS.matroska);\n    },\n    mp4: function mp4(bytes) {\n        // if this file is another base media file format, it is not mp4\n        if (_isLikely[\"3gp\"](bytes) || _isLikely.mov(bytes)) {\n            return false;\n        } // if this file starts with a ftyp or styp box its mp4\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.mp4, {\n            offset: 4\n        }) || (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.fmp4, {\n            offset: 4\n        })) {\n            return true;\n        } // if this file starts with a moof/moov box its mp4\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.moof, {\n            offset: 4\n        }) || (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.moov, {\n            offset: 4\n        })) {\n            return true;\n        }\n    },\n    mov: function mov(bytes) {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.mov, {\n            offset: 4\n        });\n    },\n    \"3gp\": function gp(bytes) {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS[\"3gp\"], {\n            offset: 4\n        });\n    },\n    ac3: function ac3(bytes) {\n        var offset = (0,_id3_helpers_js__WEBPACK_IMPORTED_MODULE_3__.getId3Offset)(bytes);\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.ac3, {\n            offset: offset\n        });\n    },\n    ts: function ts(bytes) {\n        if (bytes.length < 189 && bytes.length >= 1) {\n            return bytes[0] === 0x47;\n        }\n        var i = 0; // check the first 376 bytes for two matching sync bytes\n        while(i + 188 < bytes.length && i < 188){\n            if (bytes[i] === 0x47 && bytes[i + 188] === 0x47) {\n                return true;\n            }\n            i += 1;\n        }\n        return false;\n    },\n    flac: function flac(bytes) {\n        var offset = (0,_id3_helpers_js__WEBPACK_IMPORTED_MODULE_3__.getId3Offset)(bytes);\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.flac, {\n            offset: offset\n        });\n    },\n    ogg: function ogg(bytes) {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.ogg);\n    },\n    avi: function avi(bytes) {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.riff) && (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.avi, {\n            offset: 8\n        });\n    },\n    wav: function wav(bytes) {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.riff) && (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, CONSTANTS.wav, {\n            offset: 8\n        });\n    },\n    \"h264\": function h264(bytes) {\n        // find seq_parameter_set_rbsp\n        return (0,_nal_helpers_js__WEBPACK_IMPORTED_MODULE_4__.findH264Nal)(bytes, 7, 3).length;\n    },\n    \"h265\": function h265(bytes) {\n        // find video_parameter_set_rbsp or seq_parameter_set_rbsp\n        return (0,_nal_helpers_js__WEBPACK_IMPORTED_MODULE_4__.findH265Nal)(bytes, [\n            32,\n            33\n        ], 3).length;\n    }\n}; // get all the isLikely functions\n// but make sure 'ts' is above h264 and h265\n// but below everything else as it is the least specific\nvar isLikelyTypes = Object.keys(_isLikely) // remove ts, h264, h265\n.filter(function(t) {\n    return t !== \"ts\" && t !== \"h264\" && t !== \"h265\";\n}) // add it back to the bottom\n.concat([\n    \"ts\",\n    \"h264\",\n    \"h265\"\n]); // make sure we are dealing with uint8 data.\nisLikelyTypes.forEach(function(type) {\n    var isLikelyFn = _isLikely[type];\n    _isLikely[type] = function(bytes) {\n        return isLikelyFn((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes));\n    };\n}); // export after wrapping\nvar isLikely = _isLikely; // A useful list of file signatures can be found here\n// https://en.wikipedia.org/wiki/List_of_file_signatures\nvar detectContainerForBytes = function detectContainerForBytes(bytes) {\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    for(var i = 0; i < isLikelyTypes.length; i++){\n        var type = isLikelyTypes[i];\n        if (isLikely[type](bytes)) {\n            return type;\n        }\n    }\n    return \"\";\n}; // fmp4 is not a container\nvar isLikelyFmp4MediaSegment = function isLikelyFmp4MediaSegment(bytes) {\n    return (0,_mp4_helpers_js__WEBPACK_IMPORTED_MODULE_1__.findBox)(bytes, [\n        \"moof\"\n    ]).length > 0;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9jb250YWluZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdEO0FBQ2I7QUFDYTtBQUNSO0FBQ1k7QUFDNUQsSUFBSVEsWUFBWTtJQUNkLCtCQUErQjtJQUMvQixRQUFRUix5REFBT0EsQ0FBQztRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDeEMsbUNBQW1DO0lBQ25DLFlBQVlBLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtLQUFLO0lBQ3BFLCtCQUErQjtJQUMvQixRQUFRQSx5REFBT0EsQ0FBQztRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDeEMsK0JBQStCO0lBQy9CLE9BQU9BLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO1FBQU07S0FBSztJQUN2QyxnRUFBZ0U7SUFDaEUsVUFBVTtJQUNWLE9BQU9BLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtLQUFLO0lBQzNCLG9EQUFvRDtJQUNwRCxRQUFRQSx5REFBT0EsQ0FBQztRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDeEMsOEJBQThCO0lBQzlCLE9BQU9BLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO0tBQUs7SUFDakMsK0JBQStCO0lBQy9CLE9BQU9BLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO1FBQU07S0FBSztJQUN2QyxpQ0FBaUM7SUFDakMsT0FBT0EseURBQU9BLENBQUM7UUFBQztRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07S0FBSztJQUNuRCwrQkFBK0I7SUFDL0IsT0FBT0EseURBQU9BLENBQUM7UUFBQztRQUFNO1FBQU07UUFBTTtLQUFLO0lBQ3ZDLCtCQUErQjtJQUMvQixRQUFRQSx5REFBT0EsQ0FBQztRQUFDO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDeEMsaUNBQWlDO0lBQ2pDLE9BQU9BLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDbkQsNkJBQTZCO0lBQzdCLFFBQVFBLHlEQUFPQSxDQUFDO1FBQUM7UUFBTTtRQUFNO1FBQU07S0FBSztJQUN4Qyw2QkFBNkI7SUFDN0IsUUFBUUEseURBQU9BLENBQUM7UUFBQztRQUFNO1FBQU07UUFBTTtLQUFLO0FBQzFDO0FBQ0EsSUFBSVMsWUFBWTtJQUNkQyxLQUFLLFNBQVNBLElBQUlDLEtBQUs7UUFDckIsSUFBSUMsU0FBU1AsNkRBQVlBLENBQUNNO1FBQzFCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPO1lBQUM7WUFBTTtTQUFLLEVBQUU7WUFDckNDLFFBQVFBO1lBQ1JDLE1BQU07Z0JBQUM7Z0JBQU07YUFBSztRQUNwQjtJQUNGO0lBQ0FDLEtBQUssU0FBU0EsSUFBSUgsS0FBSztRQUNyQixJQUFJQyxTQUFTUCw2REFBWUEsQ0FBQ007UUFDMUIsT0FBT1YsNERBQVVBLENBQUNVLE9BQU87WUFBQztZQUFNO1NBQUssRUFBRTtZQUNyQ0MsUUFBUUE7WUFDUkMsTUFBTTtnQkFBQztnQkFBTTthQUFLO1FBQ3BCO0lBQ0Y7SUFDQUUsTUFBTSxTQUFTQSxLQUFLSixLQUFLO1FBQ3ZCLElBQUlLLFVBQVViLDBEQUFRQSxDQUFDUSxPQUFPO1lBQUNQLHVEQUFTQSxDQUFDYSxJQUFJO1lBQUViLHVEQUFTQSxDQUFDYyxPQUFPO1NBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxvQ0FBb0M7UUFFM0csT0FBT2pCLDREQUFVQSxDQUFDZSxTQUFTUixVQUFVTyxJQUFJO0lBQzNDO0lBQ0FJLEtBQUssU0FBU0EsSUFBSVIsS0FBSztRQUNyQixJQUFJSyxVQUFVYiwwREFBUUEsQ0FBQ1EsT0FBTztZQUFDUCx1REFBU0EsQ0FBQ2EsSUFBSTtZQUFFYix1REFBU0EsQ0FBQ2MsT0FBTztTQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsd0NBQXdDO1FBRS9HLE9BQU9qQiw0REFBVUEsQ0FBQ2UsU0FBU1IsVUFBVVksUUFBUTtJQUMvQztJQUNBQyxLQUFLLFNBQVNBLElBQUlWLEtBQUs7UUFDckIsZ0VBQWdFO1FBQ2hFLElBQUlGLFNBQVMsQ0FBQyxNQUFNLENBQUNFLFVBQVVGLFVBQVVhLEdBQUcsQ0FBQ1gsUUFBUTtZQUNuRCxPQUFPO1FBQ1QsRUFBRSxzREFBc0Q7UUFHeEQsSUFBSVYsNERBQVVBLENBQUNVLE9BQU9ILFVBQVVhLEdBQUcsRUFBRTtZQUNuQ1QsUUFBUTtRQUNWLE1BQU1YLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVZSxJQUFJLEVBQUU7WUFDdENYLFFBQVE7UUFDVixJQUFJO1lBQ0YsT0FBTztRQUNULEVBQUUsbURBQW1EO1FBR3JELElBQUlYLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVZ0IsSUFBSSxFQUFFO1lBQ3BDWixRQUFRO1FBQ1YsTUFBTVgsNERBQVVBLENBQUNVLE9BQU9ILFVBQVVpQixJQUFJLEVBQUU7WUFDdENiLFFBQVE7UUFDVixJQUFJO1lBQ0YsT0FBTztRQUNUO0lBQ0Y7SUFDQVUsS0FBSyxTQUFTQSxJQUFJWCxLQUFLO1FBQ3JCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVYyxHQUFHLEVBQUU7WUFDdENWLFFBQVE7UUFDVjtJQUNGO0lBQ0EsT0FBTyxTQUFTYyxHQUFHZixLQUFLO1FBQ3RCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPSCxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3pDSSxRQUFRO1FBQ1Y7SUFDRjtJQUNBZSxLQUFLLFNBQVNBLElBQUloQixLQUFLO1FBQ3JCLElBQUlDLFNBQVNQLDZEQUFZQSxDQUFDTTtRQUMxQixPQUFPViw0REFBVUEsQ0FBQ1UsT0FBT0gsVUFBVW1CLEdBQUcsRUFBRTtZQUN0Q2YsUUFBUUE7UUFDVjtJQUNGO0lBQ0FnQixJQUFJLFNBQVNBLEdBQUdqQixLQUFLO1FBQ25CLElBQUlBLE1BQU1rQixNQUFNLEdBQUcsT0FBT2xCLE1BQU1rQixNQUFNLElBQUksR0FBRztZQUMzQyxPQUFPbEIsS0FBSyxDQUFDLEVBQUUsS0FBSztRQUN0QjtRQUVBLElBQUltQixJQUFJLEdBQUcsd0RBQXdEO1FBRW5FLE1BQU9BLElBQUksTUFBTW5CLE1BQU1rQixNQUFNLElBQUlDLElBQUksSUFBSztZQUN4QyxJQUFJbkIsS0FBSyxDQUFDbUIsRUFBRSxLQUFLLFFBQVFuQixLQUFLLENBQUNtQixJQUFJLElBQUksS0FBSyxNQUFNO2dCQUNoRCxPQUFPO1lBQ1Q7WUFFQUEsS0FBSztRQUNQO1FBRUEsT0FBTztJQUNUO0lBQ0FDLE1BQU0sU0FBU0EsS0FBS3BCLEtBQUs7UUFDdkIsSUFBSUMsU0FBU1AsNkRBQVlBLENBQUNNO1FBQzFCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVdUIsSUFBSSxFQUFFO1lBQ3ZDbkIsUUFBUUE7UUFDVjtJQUNGO0lBQ0FvQixLQUFLLFNBQVNBLElBQUlyQixLQUFLO1FBQ3JCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVd0IsR0FBRztJQUN4QztJQUNBQyxLQUFLLFNBQVNBLElBQUl0QixLQUFLO1FBQ3JCLE9BQU9WLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVMEIsSUFBSSxLQUFLakMsNERBQVVBLENBQUNVLE9BQU9ILFVBQVV5QixHQUFHLEVBQUU7WUFDM0VyQixRQUFRO1FBQ1Y7SUFDRjtJQUNBdUIsS0FBSyxTQUFTQSxJQUFJeEIsS0FBSztRQUNyQixPQUFPViw0REFBVUEsQ0FBQ1UsT0FBT0gsVUFBVTBCLElBQUksS0FBS2pDLDREQUFVQSxDQUFDVSxPQUFPSCxVQUFVMkIsR0FBRyxFQUFFO1lBQzNFdkIsUUFBUTtRQUNWO0lBQ0Y7SUFDQSxRQUFRLFNBQVN3QixLQUFLekIsS0FBSztRQUN6Qiw4QkFBOEI7UUFDOUIsT0FBT0wsNERBQVdBLENBQUNLLE9BQU8sR0FBRyxHQUFHa0IsTUFBTTtJQUN4QztJQUNBLFFBQVEsU0FBU1EsS0FBSzFCLEtBQUs7UUFDekIsMERBQTBEO1FBQzFELE9BQU9KLDREQUFXQSxDQUFDSSxPQUFPO1lBQUM7WUFBSTtTQUFHLEVBQUUsR0FBR2tCLE1BQU07SUFDL0M7QUFDRixHQUFHLGlDQUFpQztBQUNwQyw0Q0FBNEM7QUFDNUMsd0RBQXdEO0FBRXhELElBQUlTLGdCQUFnQkMsT0FBT0MsSUFBSSxDQUFDL0IsV0FBVyx3QkFBd0I7Q0FDbEVnQyxNQUFNLENBQUMsU0FBVUMsQ0FBQztJQUNqQixPQUFPQSxNQUFNLFFBQVFBLE1BQU0sVUFBVUEsTUFBTTtBQUM3QyxHQUFHLDRCQUE0QjtDQUM5QkMsTUFBTSxDQUFDO0lBQUM7SUFBTTtJQUFRO0NBQU8sR0FBRyw0Q0FBNEM7QUFFN0VMLGNBQWNNLE9BQU8sQ0FBQyxTQUFVQyxJQUFJO0lBQ2xDLElBQUlDLGFBQWFyQyxTQUFTLENBQUNvQyxLQUFLO0lBRWhDcEMsU0FBUyxDQUFDb0MsS0FBSyxHQUFHLFNBQVVsQyxLQUFLO1FBQy9CLE9BQU9tQyxXQUFXOUMseURBQU9BLENBQUNXO0lBQzVCO0FBQ0YsSUFBSSx3QkFBd0I7QUFFckIsSUFBSW9DLFdBQVd0QyxVQUFVLENBQUMscURBQXFEO0FBQ3RGLHdEQUF3RDtBQUVqRCxJQUFJdUMsMEJBQTBCLFNBQVNBLHdCQUF3QnJDLEtBQUs7SUFDekVBLFFBQVFYLHlEQUFPQSxDQUFDVztJQUVoQixJQUFLLElBQUltQixJQUFJLEdBQUdBLElBQUlRLGNBQWNULE1BQU0sRUFBRUMsSUFBSztRQUM3QyxJQUFJZSxPQUFPUCxhQUFhLENBQUNSLEVBQUU7UUFFM0IsSUFBSWlCLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDbEMsUUFBUTtZQUN6QixPQUFPa0M7UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNULEVBQUUsQ0FBQywwQkFBMEI7QUFFdEIsSUFBSUksMkJBQTJCLFNBQVNBLHlCQUF5QnRDLEtBQUs7SUFDM0UsT0FBT1Qsd0RBQU9BLENBQUNTLE9BQU87UUFBQztLQUFPLEVBQUVrQixNQUFNLEdBQUc7QUFDM0MsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9AdmlkZW9qcy92aHMtdXRpbHMvZXMvY29udGFpbmVycy5qcz9mYWY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvVWludDgsIGJ5dGVzTWF0Y2ggfSBmcm9tICcuL2J5dGUtaGVscGVycy5qcyc7XG5pbXBvcnQgeyBmaW5kQm94IH0gZnJvbSAnLi9tcDQtaGVscGVycy5qcyc7XG5pbXBvcnQgeyBmaW5kRWJtbCwgRUJNTF9UQUdTIH0gZnJvbSAnLi9lYm1sLWhlbHBlcnMuanMnO1xuaW1wb3J0IHsgZ2V0SWQzT2Zmc2V0IH0gZnJvbSAnLi9pZDMtaGVscGVycy5qcyc7XG5pbXBvcnQgeyBmaW5kSDI2NE5hbCwgZmluZEgyNjVOYWwgfSBmcm9tICcuL25hbC1oZWxwZXJzLmpzJztcbnZhciBDT05TVEFOVFMgPSB7XG4gIC8vIFwid2VibVwiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnd2VibSc6IHRvVWludDgoWzB4NzcsIDB4NjUsIDB4NjIsIDB4NmRdKSxcbiAgLy8gXCJtYXRyb3NrYVwiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnbWF0cm9za2EnOiB0b1VpbnQ4KFsweDZkLCAweDYxLCAweDc0LCAweDcyLCAweDZmLCAweDczLCAweDZiLCAweDYxXSksXG4gIC8vIFwiZkxhQ1wiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnZmxhYyc6IHRvVWludDgoWzB4NjYsIDB4NGMsIDB4NjEsIDB4NDNdKSxcbiAgLy8gXCJPZ2dTXCIgc3RyaW5nIGxpdGVyYWwgaW4gaGV4XG4gICdvZ2cnOiB0b1VpbnQ4KFsweDRmLCAweDY3LCAweDY3LCAweDUzXSksXG4gIC8vIGFjLTMgc3luYyBieXRlLCBhbHNvIHdvcmtzIGZvciBlYy0zIGFzIHRoYXQgaXMgc2ltcGx5IGEgY29kZWNcbiAgLy8gb2YgYWMtM1xuICAnYWMzJzogdG9VaW50OChbMHgwYiwgMHg3N10pLFxuICAvLyBcIlJJRkZcIiBzdHJpbmcgbGl0ZXJhbCBpbiBoZXggdXNlZCBmb3Igd2F2IGFuZCBhdmlcbiAgJ3JpZmYnOiB0b1VpbnQ4KFsweDUyLCAweDQ5LCAweDQ2LCAweDQ2XSksXG4gIC8vIFwiQVZJXCIgc3RyaW5nIGxpdGVyYWwgaW4gaGV4XG4gICdhdmknOiB0b1VpbnQ4KFsweDQxLCAweDU2LCAweDQ5XSksXG4gIC8vIFwiV0FWRVwiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnd2F2JzogdG9VaW50OChbMHg1NywgMHg0MSwgMHg1NiwgMHg0NV0pLFxuICAvLyBcImZ0eXAzZ1wiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnM2dwJzogdG9VaW50OChbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MCwgMHgzMywgMHg2N10pLFxuICAvLyBcImZ0eXBcIiBzdHJpbmcgbGl0ZXJhbCBpbiBoZXhcbiAgJ21wNCc6IHRvVWludDgoWzB4NjYsIDB4NzQsIDB4NzksIDB4NzBdKSxcbiAgLy8gXCJzdHlwXCIgc3RyaW5nIGxpdGVyYWwgaW4gaGV4XG4gICdmbXA0JzogdG9VaW50OChbMHg3MywgMHg3NCwgMHg3OSwgMHg3MF0pLFxuICAvLyBcImZ0eXBxdFwiIHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnbW92JzogdG9VaW50OChbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MCwgMHg3MSwgMHg3NF0pLFxuICAvLyBtb292IHN0cmluZyBsaXRlcmFsIGluIGhleFxuICAnbW9vdic6IHRvVWludDgoWzB4NkQsIDB4NkYsIDB4NkYsIDB4NzZdKSxcbiAgLy8gbW9vZiBzdHJpbmcgbGl0ZXJhbCBpbiBoZXhcbiAgJ21vb2YnOiB0b1VpbnQ4KFsweDZELCAweDZGLCAweDZGLCAweDY2XSlcbn07XG52YXIgX2lzTGlrZWx5ID0ge1xuICBhYWM6IGZ1bmN0aW9uIGFhYyhieXRlcykge1xuICAgIHZhciBvZmZzZXQgPSBnZXRJZDNPZmZzZXQoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlc01hdGNoKGJ5dGVzLCBbMHhGRiwgMHgxMF0sIHtcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgbWFzazogWzB4RkYsIDB4MTZdXG4gICAgfSk7XG4gIH0sXG4gIG1wMzogZnVuY3Rpb24gbXAzKGJ5dGVzKSB7XG4gICAgdmFyIG9mZnNldCA9IGdldElkM09mZnNldChieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzTWF0Y2goYnl0ZXMsIFsweEZGLCAweDAyXSwge1xuICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICBtYXNrOiBbMHhGRiwgMHgwNl1cbiAgICB9KTtcbiAgfSxcbiAgd2VibTogZnVuY3Rpb24gd2VibShieXRlcykge1xuICAgIHZhciBkb2NUeXBlID0gZmluZEVibWwoYnl0ZXMsIFtFQk1MX1RBR1MuRUJNTCwgRUJNTF9UQUdTLkRvY1R5cGVdKVswXTsgLy8gY2hlY2sgaWYgRG9jVHlwZSBFQk1MIHRhZyBpcyB3ZWJtXG5cbiAgICByZXR1cm4gYnl0ZXNNYXRjaChkb2NUeXBlLCBDT05TVEFOVFMud2VibSk7XG4gIH0sXG4gIG1rdjogZnVuY3Rpb24gbWt2KGJ5dGVzKSB7XG4gICAgdmFyIGRvY1R5cGUgPSBmaW5kRWJtbChieXRlcywgW0VCTUxfVEFHUy5FQk1MLCBFQk1MX1RBR1MuRG9jVHlwZV0pWzBdOyAvLyBjaGVjayBpZiBEb2NUeXBlIEVCTUwgdGFnIGlzIG1hdHJvc2thXG5cbiAgICByZXR1cm4gYnl0ZXNNYXRjaChkb2NUeXBlLCBDT05TVEFOVFMubWF0cm9za2EpO1xuICB9LFxuICBtcDQ6IGZ1bmN0aW9uIG1wNChieXRlcykge1xuICAgIC8vIGlmIHRoaXMgZmlsZSBpcyBhbm90aGVyIGJhc2UgbWVkaWEgZmlsZSBmb3JtYXQsIGl0IGlzIG5vdCBtcDRcbiAgICBpZiAoX2lzTGlrZWx5WyczZ3AnXShieXRlcykgfHwgX2lzTGlrZWx5Lm1vdihieXRlcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGlmIHRoaXMgZmlsZSBzdGFydHMgd2l0aCBhIGZ0eXAgb3Igc3R5cCBib3ggaXRzIG1wNFxuXG5cbiAgICBpZiAoYnl0ZXNNYXRjaChieXRlcywgQ09OU1RBTlRTLm1wNCwge1xuICAgICAgb2Zmc2V0OiA0XG4gICAgfSkgfHwgYnl0ZXNNYXRjaChieXRlcywgQ09OU1RBTlRTLmZtcDQsIHtcbiAgICAgIG9mZnNldDogNFxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIGlmIHRoaXMgZmlsZSBzdGFydHMgd2l0aCBhIG1vb2YvbW9vdiBib3ggaXRzIG1wNFxuXG5cbiAgICBpZiAoYnl0ZXNNYXRjaChieXRlcywgQ09OU1RBTlRTLm1vb2YsIHtcbiAgICAgIG9mZnNldDogNFxuICAgIH0pIHx8IGJ5dGVzTWF0Y2goYnl0ZXMsIENPTlNUQU5UUy5tb292LCB7XG4gICAgICBvZmZzZXQ6IDRcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LFxuICBtb3Y6IGZ1bmN0aW9uIG1vdihieXRlcykge1xuICAgIHJldHVybiBieXRlc01hdGNoKGJ5dGVzLCBDT05TVEFOVFMubW92LCB7XG4gICAgICBvZmZzZXQ6IDRcbiAgICB9KTtcbiAgfSxcbiAgJzNncCc6IGZ1bmN0aW9uIGdwKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGJ5dGVzTWF0Y2goYnl0ZXMsIENPTlNUQU5UU1snM2dwJ10sIHtcbiAgICAgIG9mZnNldDogNFxuICAgIH0pO1xuICB9LFxuICBhYzM6IGZ1bmN0aW9uIGFjMyhieXRlcykge1xuICAgIHZhciBvZmZzZXQgPSBnZXRJZDNPZmZzZXQoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlc01hdGNoKGJ5dGVzLCBDT05TVEFOVFMuYWMzLCB7XG4gICAgICBvZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICB9LFxuICB0czogZnVuY3Rpb24gdHMoYnl0ZXMpIHtcbiAgICBpZiAoYnl0ZXMubGVuZ3RoIDwgMTg5ICYmIGJ5dGVzLmxlbmd0aCA+PSAxKSB7XG4gICAgICByZXR1cm4gYnl0ZXNbMF0gPT09IDB4NDc7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwOyAvLyBjaGVjayB0aGUgZmlyc3QgMzc2IGJ5dGVzIGZvciB0d28gbWF0Y2hpbmcgc3luYyBieXRlc1xuXG4gICAgd2hpbGUgKGkgKyAxODggPCBieXRlcy5sZW5ndGggJiYgaSA8IDE4OCkge1xuICAgICAgaWYgKGJ5dGVzW2ldID09PSAweDQ3ICYmIGJ5dGVzW2kgKyAxODhdID09PSAweDQ3KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBmbGFjOiBmdW5jdGlvbiBmbGFjKGJ5dGVzKSB7XG4gICAgdmFyIG9mZnNldCA9IGdldElkM09mZnNldChieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzTWF0Y2goYnl0ZXMsIENPTlNUQU5UUy5mbGFjLCB7XG4gICAgICBvZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICB9LFxuICBvZ2c6IGZ1bmN0aW9uIG9nZyhieXRlcykge1xuICAgIHJldHVybiBieXRlc01hdGNoKGJ5dGVzLCBDT05TVEFOVFMub2dnKTtcbiAgfSxcbiAgYXZpOiBmdW5jdGlvbiBhdmkoYnl0ZXMpIHtcbiAgICByZXR1cm4gYnl0ZXNNYXRjaChieXRlcywgQ09OU1RBTlRTLnJpZmYpICYmIGJ5dGVzTWF0Y2goYnl0ZXMsIENPTlNUQU5UUy5hdmksIHtcbiAgICAgIG9mZnNldDogOFxuICAgIH0pO1xuICB9LFxuICB3YXY6IGZ1bmN0aW9uIHdhdihieXRlcykge1xuICAgIHJldHVybiBieXRlc01hdGNoKGJ5dGVzLCBDT05TVEFOVFMucmlmZikgJiYgYnl0ZXNNYXRjaChieXRlcywgQ09OU1RBTlRTLndhdiwge1xuICAgICAgb2Zmc2V0OiA4XG4gICAgfSk7XG4gIH0sXG4gICdoMjY0JzogZnVuY3Rpb24gaDI2NChieXRlcykge1xuICAgIC8vIGZpbmQgc2VxX3BhcmFtZXRlcl9zZXRfcmJzcFxuICAgIHJldHVybiBmaW5kSDI2NE5hbChieXRlcywgNywgMykubGVuZ3RoO1xuICB9LFxuICAnaDI2NSc6IGZ1bmN0aW9uIGgyNjUoYnl0ZXMpIHtcbiAgICAvLyBmaW5kIHZpZGVvX3BhcmFtZXRlcl9zZXRfcmJzcCBvciBzZXFfcGFyYW1ldGVyX3NldF9yYnNwXG4gICAgcmV0dXJuIGZpbmRIMjY1TmFsKGJ5dGVzLCBbMzIsIDMzXSwgMykubGVuZ3RoO1xuICB9XG59OyAvLyBnZXQgYWxsIHRoZSBpc0xpa2VseSBmdW5jdGlvbnNcbi8vIGJ1dCBtYWtlIHN1cmUgJ3RzJyBpcyBhYm92ZSBoMjY0IGFuZCBoMjY1XG4vLyBidXQgYmVsb3cgZXZlcnl0aGluZyBlbHNlIGFzIGl0IGlzIHRoZSBsZWFzdCBzcGVjaWZpY1xuXG52YXIgaXNMaWtlbHlUeXBlcyA9IE9iamVjdC5rZXlzKF9pc0xpa2VseSkgLy8gcmVtb3ZlIHRzLCBoMjY0LCBoMjY1XG4uZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gIHJldHVybiB0ICE9PSAndHMnICYmIHQgIT09ICdoMjY0JyAmJiB0ICE9PSAnaDI2NSc7XG59KSAvLyBhZGQgaXQgYmFjayB0byB0aGUgYm90dG9tXG4uY29uY2F0KFsndHMnLCAnaDI2NCcsICdoMjY1J10pOyAvLyBtYWtlIHN1cmUgd2UgYXJlIGRlYWxpbmcgd2l0aCB1aW50OCBkYXRhLlxuXG5pc0xpa2VseVR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgdmFyIGlzTGlrZWx5Rm4gPSBfaXNMaWtlbHlbdHlwZV07XG5cbiAgX2lzTGlrZWx5W3R5cGVdID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGlzTGlrZWx5Rm4odG9VaW50OChieXRlcykpO1xuICB9O1xufSk7IC8vIGV4cG9ydCBhZnRlciB3cmFwcGluZ1xuXG5leHBvcnQgdmFyIGlzTGlrZWx5ID0gX2lzTGlrZWx5OyAvLyBBIHVzZWZ1bCBsaXN0IG9mIGZpbGUgc2lnbmF0dXJlcyBjYW4gYmUgZm91bmQgaGVyZVxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9maWxlX3NpZ25hdHVyZXNcblxuZXhwb3J0IHZhciBkZXRlY3RDb250YWluZXJGb3JCeXRlcyA9IGZ1bmN0aW9uIGRldGVjdENvbnRhaW5lckZvckJ5dGVzKGJ5dGVzKSB7XG4gIGJ5dGVzID0gdG9VaW50OChieXRlcyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpc0xpa2VseVR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHR5cGUgPSBpc0xpa2VseVR5cGVzW2ldO1xuXG4gICAgaWYgKGlzTGlrZWx5W3R5cGVdKGJ5dGVzKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufTsgLy8gZm1wNCBpcyBub3QgYSBjb250YWluZXJcblxuZXhwb3J0IHZhciBpc0xpa2VseUZtcDRNZWRpYVNlZ21lbnQgPSBmdW5jdGlvbiBpc0xpa2VseUZtcDRNZWRpYVNlZ21lbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIGZpbmRCb3goYnl0ZXMsIFsnbW9vZiddKS5sZW5ndGggPiAwO1xufTsiXSwibmFtZXMiOlsidG9VaW50OCIsImJ5dGVzTWF0Y2giLCJmaW5kQm94IiwiZmluZEVibWwiLCJFQk1MX1RBR1MiLCJnZXRJZDNPZmZzZXQiLCJmaW5kSDI2NE5hbCIsImZpbmRIMjY1TmFsIiwiQ09OU1RBTlRTIiwiX2lzTGlrZWx5IiwiYWFjIiwiYnl0ZXMiLCJvZmZzZXQiLCJtYXNrIiwibXAzIiwid2VibSIsImRvY1R5cGUiLCJFQk1MIiwiRG9jVHlwZSIsIm1rdiIsIm1hdHJvc2thIiwibXA0IiwibW92IiwiZm1wNCIsIm1vb2YiLCJtb292IiwiZ3AiLCJhYzMiLCJ0cyIsImxlbmd0aCIsImkiLCJmbGFjIiwib2dnIiwiYXZpIiwicmlmZiIsIndhdiIsImgyNjQiLCJoMjY1IiwiaXNMaWtlbHlUeXBlcyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ0IiwiY29uY2F0IiwiZm9yRWFjaCIsInR5cGUiLCJpc0xpa2VseUZuIiwiaXNMaWtlbHkiLCJkZXRlY3RDb250YWluZXJGb3JCeXRlcyIsImlzTGlrZWx5Rm1wNE1lZGlhU2VnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/containers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js":
/*!**************************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ decodeB64ToUint8Array)\n/* harmony export */ });\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_0__);\n\nvar atob = function atob(s) {\n    return (global_window__WEBPACK_IMPORTED_MODULE_0___default().atob) ? global_window__WEBPACK_IMPORTED_MODULE_0___default().atob(s) : Buffer.from(s, \"base64\").toString(\"binary\");\n};\nfunction decodeB64ToUint8Array(b64Text) {\n    var decodedString = atob(b64Text);\n    var array = new Uint8Array(decodedString.length);\n    for(var i = 0; i < decodedString.length; i++){\n        array[i] = decodedString.charCodeAt(i);\n    }\n    return array;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9kZWNvZGUtYjY0LXRvLXVpbnQ4LWFycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtQztBQUVuQyxJQUFJQyxPQUFPLFNBQVNBLEtBQUtDLENBQUM7SUFDeEIsT0FBT0YsMkRBQVcsR0FBR0EseURBQVcsQ0FBQ0UsS0FBS0MsT0FBT0MsSUFBSSxDQUFDRixHQUFHLFVBQVVHLFFBQVEsQ0FBQztBQUMxRTtBQUVlLFNBQVNDLHNCQUFzQkMsT0FBTztJQUNuRCxJQUFJQyxnQkFBZ0JQLEtBQUtNO0lBQ3pCLElBQUlFLFFBQVEsSUFBSUMsV0FBV0YsY0FBY0csTUFBTTtJQUUvQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUosY0FBY0csTUFBTSxFQUFFQyxJQUFLO1FBQzdDSCxLQUFLLENBQUNHLEVBQUUsR0FBR0osY0FBY0ssVUFBVSxDQUFDRDtJQUN0QztJQUVBLE9BQU9IO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvQHZpZGVvanMvdmhzLXV0aWxzL2VzL2RlY29kZS1iNjQtdG8tdWludDgtYXJyYXkuanM/Mjg0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2luZG93IGZyb20gJ2dsb2JhbC93aW5kb3cnO1xuXG52YXIgYXRvYiA9IGZ1bmN0aW9uIGF0b2Iocykge1xuICByZXR1cm4gd2luZG93LmF0b2IgPyB3aW5kb3cuYXRvYihzKSA6IEJ1ZmZlci5mcm9tKHMsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5Jyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWNvZGVCNjRUb1VpbnQ4QXJyYXkoYjY0VGV4dCkge1xuICB2YXIgZGVjb2RlZFN0cmluZyA9IGF0b2IoYjY0VGV4dCk7XG4gIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KGRlY29kZWRTdHJpbmcubGVuZ3RoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlY29kZWRTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IGRlY29kZWRTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn0iXSwibmFtZXMiOlsid2luZG93IiwiYXRvYiIsInMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJkZWNvZGVCNjRUb1VpbnQ4QXJyYXkiLCJiNjRUZXh0IiwiZGVjb2RlZFN0cmluZyIsImFycmF5IiwiVWludDhBcnJheSIsImxlbmd0aCIsImkiLCJjaGFyQ29kZUF0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/ebml-helpers.js":
/*!*************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/ebml-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EBML_TAGS: () => (/* binding */ EBML_TAGS),\n/* harmony export */   decodeBlock: () => (/* binding */ decodeBlock),\n/* harmony export */   findEbml: () => (/* binding */ findEbml),\n/* harmony export */   parseData: () => (/* binding */ parseData),\n/* harmony export */   parseTracks: () => (/* binding */ parseTracks)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n/* harmony import */ var _codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codec-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/codec-helpers.js\");\n\n // relevant specs for this parser:\n// https://matroska-org.github.io/libebml/specs.html\n// https://www.matroska.org/technical/elements.html\n// https://www.webmproject.org/docs/container/\nvar EBML_TAGS = {\n    EBML: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x1A,\n        0x45,\n        0xDF,\n        0xA3\n    ]),\n    DocType: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x42,\n        0x82\n    ]),\n    Segment: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x18,\n        0x53,\n        0x80,\n        0x67\n    ]),\n    SegmentInfo: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x15,\n        0x49,\n        0xA9,\n        0x66\n    ]),\n    Tracks: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x16,\n        0x54,\n        0xAE,\n        0x6B\n    ]),\n    Track: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xAE\n    ]),\n    TrackNumber: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xd7\n    ]),\n    DefaultDuration: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x23,\n        0xe3,\n        0x83\n    ]),\n    TrackEntry: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xAE\n    ]),\n    TrackType: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x83\n    ]),\n    FlagDefault: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x88\n    ]),\n    CodecID: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x86\n    ]),\n    CodecPrivate: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x63,\n        0xA2\n    ]),\n    VideoTrack: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xe0\n    ]),\n    AudioTrack: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xe1\n    ]),\n    // Not used yet, but will be used for live webm/mkv\n    // see https://www.matroska.org/technical/basics.html#block-structure\n    // see https://www.matroska.org/technical/basics.html#simpleblock-structure\n    Cluster: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x1F,\n        0x43,\n        0xB6,\n        0x75\n    ]),\n    Timestamp: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xE7\n    ]),\n    TimestampScale: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x2A,\n        0xD7,\n        0xB1\n    ]),\n    BlockGroup: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xA0\n    ]),\n    BlockDuration: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0x9B\n    ]),\n    Block: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xA1\n    ]),\n    SimpleBlock: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n        0xA3\n    ])\n};\n/**\n * This is a simple table to determine the length\n * of things in ebml. The length is one based (starts at 1,\n * rather than zero) and for every zero bit before a one bit\n * we add one to length. We also need this table because in some\n * case we have to xor all the length bits from another value.\n */ var LENGTH_TABLE = [\n    128,\n    64,\n    32,\n    16,\n    8,\n    4,\n    2,\n    1\n];\nvar getLength = function getLength(byte) {\n    var len = 1;\n    for(var i = 0; i < LENGTH_TABLE.length; i++){\n        if (byte & LENGTH_TABLE[i]) {\n            break;\n        }\n        len++;\n    }\n    return len;\n}; // length in ebml is stored in the first 4 to 8 bits\n// of the first byte. 4 for the id length and 8 for the\n// data size length. Length is measured by converting the number to binary\n// then 1 + the number of zeros before a 1 is encountered starting\n// from the left.\nvar getvint = function getvint(bytes, offset, removeLength, signed) {\n    if (removeLength === void 0) {\n        removeLength = true;\n    }\n    if (signed === void 0) {\n        signed = false;\n    }\n    var length = getLength(bytes[offset]);\n    var valueBytes = bytes.subarray(offset, offset + length); // NOTE that we do **not** subarray here because we need to copy these bytes\n    // as they will be modified below to remove the dataSizeLen bits and we do not\n    // want to modify the original data. normally we could just call slice on\n    // uint8array but ie 11 does not support that...\n    if (removeLength) {\n        valueBytes = Array.prototype.slice.call(bytes, offset, offset + length);\n        valueBytes[0] ^= LENGTH_TABLE[length - 1];\n    }\n    return {\n        length: length,\n        value: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(valueBytes, {\n            signed: signed\n        }),\n        bytes: valueBytes\n    };\n};\nvar normalizePath = function normalizePath(path) {\n    if (typeof path === \"string\") {\n        return path.match(/.{1,2}/g).map(function(p) {\n            return normalizePath(p);\n        });\n    }\n    if (typeof path === \"number\") {\n        return (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.numberToBytes)(path);\n    }\n    return path;\n};\nvar normalizePaths = function normalizePaths(paths) {\n    if (!Array.isArray(paths)) {\n        return [\n            normalizePath(paths)\n        ];\n    }\n    return paths.map(function(p) {\n        return normalizePath(p);\n    });\n};\nvar getInfinityDataSize = function getInfinityDataSize(id, bytes, offset) {\n    if (offset >= bytes.length) {\n        return bytes.length;\n    }\n    var innerid = getvint(bytes, offset, false);\n    if ((0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(id.bytes, innerid.bytes)) {\n        return offset;\n    }\n    var dataHeader = getvint(bytes, offset + innerid.length);\n    return getInfinityDataSize(id, bytes, offset + dataHeader.length + dataHeader.value + innerid.length);\n};\n/**\n * Notes on the EBLM format.\n *\n * EBLM uses \"vints\" tags. Every vint tag contains\n * two parts\n *\n * 1. The length from the first byte. You get this by\n *    converting the byte to binary and counting the zeros\n *    before a 1. Then you add 1 to that. Examples\n *    00011111 = length 4 because there are 3 zeros before a 1.\n *    00100000 = length 3 because there are 2 zeros before a 1.\n *    00000011 = length 7 because there are 6 zeros before a 1.\n *\n * 2. The bits used for length are removed from the first byte\n *    Then all the bytes are merged into a value. NOTE: this\n *    is not the case for id ebml tags as there id includes\n *    length bits.\n *\n */ var findEbml = function findEbml(bytes, paths) {\n    paths = normalizePaths(paths);\n    bytes = (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var results = [];\n    if (!paths.length) {\n        return results;\n    }\n    var i = 0;\n    while(i < bytes.length){\n        var id = getvint(bytes, i, false);\n        var dataHeader = getvint(bytes, i + id.length);\n        var dataStart = i + id.length + dataHeader.length; // dataSize is unknown or this is a live stream\n        if (dataHeader.value === 0x7f) {\n            dataHeader.value = getInfinityDataSize(id, bytes, dataStart);\n            if (dataHeader.value !== bytes.length) {\n                dataHeader.value -= dataStart;\n            }\n        }\n        var dataEnd = dataStart + dataHeader.value > bytes.length ? bytes.length : dataStart + dataHeader.value;\n        var data = bytes.subarray(dataStart, dataEnd);\n        if ((0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(paths[0], id.bytes)) {\n            if (paths.length === 1) {\n                // this is the end of the paths and we've found the tag we were\n                // looking for\n                results.push(data);\n            } else {\n                // recursively search for the next tag inside of the data\n                // of this one\n                results = results.concat(findEbml(data, paths.slice(1)));\n            }\n        }\n        var totalLength = id.length + dataHeader.length + data.length; // move past this tag entirely, we are not looking for it\n        i += totalLength;\n    }\n    return results;\n}; // see https://www.matroska.org/technical/basics.html#block-structure\nvar decodeBlock = function decodeBlock(block, type, timestampScale, clusterTimestamp) {\n    var duration;\n    if (type === \"group\") {\n        duration = findEbml(block, [\n            EBML_TAGS.BlockDuration\n        ])[0];\n        if (duration) {\n            duration = (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(duration);\n            duration = 1 / timestampScale * duration * timestampScale / 1000;\n        }\n        block = findEbml(block, [\n            EBML_TAGS.Block\n        ])[0];\n        type = \"block\"; // treat data as a block after this point\n    }\n    var dv = new DataView(block.buffer, block.byteOffset, block.byteLength);\n    var trackNumber = getvint(block, 0);\n    var timestamp = dv.getInt16(trackNumber.length, false);\n    var flags = block[trackNumber.length + 2];\n    var data = block.subarray(trackNumber.length + 3); // pts/dts in seconds\n    var ptsdts = 1 / timestampScale * (clusterTimestamp + timestamp) * timestampScale / 1000; // return the frame\n    var parsed = {\n        duration: duration,\n        trackNumber: trackNumber.value,\n        keyframe: type === \"simple\" && flags >> 7 === 1,\n        invisible: (flags & 0x08) >> 3 === 1,\n        lacing: (flags & 0x06) >> 1,\n        discardable: type === \"simple\" && (flags & 0x01) === 1,\n        frames: [],\n        pts: ptsdts,\n        dts: ptsdts,\n        timestamp: timestamp\n    };\n    if (!parsed.lacing) {\n        parsed.frames.push(data);\n        return parsed;\n    }\n    var numberOfFrames = data[0] + 1;\n    var frameSizes = [];\n    var offset = 1; // Fixed\n    if (parsed.lacing === 2) {\n        var sizeOfFrame = (data.length - offset) / numberOfFrames;\n        for(var i = 0; i < numberOfFrames; i++){\n            frameSizes.push(sizeOfFrame);\n        }\n    } // xiph\n    if (parsed.lacing === 1) {\n        for(var _i = 0; _i < numberOfFrames - 1; _i++){\n            var size = 0;\n            do {\n                size += data[offset];\n                offset++;\n            }while (data[offset - 1] === 0xFF);\n            frameSizes.push(size);\n        }\n    } // ebml\n    if (parsed.lacing === 3) {\n        // first vint is unsinged\n        // after that vints are singed and\n        // based on a compounding size\n        var _size = 0;\n        for(var _i2 = 0; _i2 < numberOfFrames - 1; _i2++){\n            var vint = _i2 === 0 ? getvint(data, offset) : getvint(data, offset, true, true);\n            _size += vint.value;\n            frameSizes.push(_size);\n            offset += vint.length;\n        }\n    }\n    frameSizes.forEach(function(size) {\n        parsed.frames.push(data.subarray(offset, offset + size));\n        offset += size;\n    });\n    return parsed;\n}; // VP9 Codec Feature Metadata (CodecPrivate)\n// https://www.webmproject.org/docs/container/\nvar parseVp9Private = function parseVp9Private(bytes) {\n    var i = 0;\n    var params = {};\n    while(i < bytes.length){\n        var id = bytes[i] & 0x7f;\n        var len = bytes[i + 1];\n        var val = void 0;\n        if (len === 1) {\n            val = bytes[i + 2];\n        } else {\n            val = bytes.subarray(i + 2, i + 2 + len);\n        }\n        if (id === 1) {\n            params.profile = val;\n        } else if (id === 2) {\n            params.level = val;\n        } else if (id === 3) {\n            params.bitDepth = val;\n        } else if (id === 4) {\n            params.chromaSubsampling = val;\n        } else {\n            params[id] = val;\n        }\n        i += 2 + len;\n    }\n    return params;\n};\nvar parseTracks = function parseTracks(bytes) {\n    bytes = (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var decodedTracks = [];\n    var tracks = findEbml(bytes, [\n        EBML_TAGS.Segment,\n        EBML_TAGS.Tracks,\n        EBML_TAGS.Track\n    ]);\n    if (!tracks.length) {\n        tracks = findEbml(bytes, [\n            EBML_TAGS.Tracks,\n            EBML_TAGS.Track\n        ]);\n    }\n    if (!tracks.length) {\n        tracks = findEbml(bytes, [\n            EBML_TAGS.Track\n        ]);\n    }\n    if (!tracks.length) {\n        return decodedTracks;\n    }\n    tracks.forEach(function(track) {\n        var trackType = findEbml(track, EBML_TAGS.TrackType)[0];\n        if (!trackType || !trackType.length) {\n            return;\n        } // 1 is video, 2 is audio, 17 is subtitle\n        // other values are unimportant in this context\n        if (trackType[0] === 1) {\n            trackType = \"video\";\n        } else if (trackType[0] === 2) {\n            trackType = \"audio\";\n        } else if (trackType[0] === 17) {\n            trackType = \"subtitle\";\n        } else {\n            return;\n        } // todo parse language\n        var decodedTrack = {\n            rawCodec: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(findEbml(track, [\n                EBML_TAGS.CodecID\n            ])[0]),\n            type: trackType,\n            codecPrivate: findEbml(track, [\n                EBML_TAGS.CodecPrivate\n            ])[0],\n            number: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(findEbml(track, [\n                EBML_TAGS.TrackNumber\n            ])[0]),\n            defaultDuration: (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(findEbml(track, [\n                EBML_TAGS.DefaultDuration\n            ])[0]),\n            default: findEbml(track, [\n                EBML_TAGS.FlagDefault\n            ])[0],\n            rawData: track\n        };\n        var codec = \"\";\n        if (/V_MPEG4\\/ISO\\/AVC/.test(decodedTrack.rawCodec)) {\n            codec = \"avc1.\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getAvcCodec)(decodedTrack.codecPrivate);\n        } else if (/V_MPEGH\\/ISO\\/HEVC/.test(decodedTrack.rawCodec)) {\n            codec = \"hev1.\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getHvcCodec)(decodedTrack.codecPrivate);\n        } else if (/V_MPEG4\\/ISO\\/ASP/.test(decodedTrack.rawCodec)) {\n            if (decodedTrack.codecPrivate) {\n                codec = \"mp4v.20.\" + decodedTrack.codecPrivate[4].toString();\n            } else {\n                codec = \"mp4v.20.9\";\n            }\n        } else if (/^V_THEORA/.test(decodedTrack.rawCodec)) {\n            codec = \"theora\";\n        } else if (/^V_VP8/.test(decodedTrack.rawCodec)) {\n            codec = \"vp8\";\n        } else if (/^V_VP9/.test(decodedTrack.rawCodec)) {\n            if (decodedTrack.codecPrivate) {\n                var _parseVp9Private = parseVp9Private(decodedTrack.codecPrivate), profile = _parseVp9Private.profile, level = _parseVp9Private.level, bitDepth = _parseVp9Private.bitDepth, chromaSubsampling = _parseVp9Private.chromaSubsampling;\n                codec = \"vp09.\";\n                codec += (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(profile, 2, \"0\") + \".\";\n                codec += (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(level, 2, \"0\") + \".\";\n                codec += (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(bitDepth, 2, \"0\") + \".\";\n                codec += \"\" + (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(chromaSubsampling, 2, \"0\"); // Video -> Colour -> Ebml name\n                var matrixCoefficients = findEbml(track, [\n                    0xE0,\n                    [\n                        0x55,\n                        0xB0\n                    ],\n                    [\n                        0x55,\n                        0xB1\n                    ]\n                ])[0] || [];\n                var videoFullRangeFlag = findEbml(track, [\n                    0xE0,\n                    [\n                        0x55,\n                        0xB0\n                    ],\n                    [\n                        0x55,\n                        0xB9\n                    ]\n                ])[0] || [];\n                var transferCharacteristics = findEbml(track, [\n                    0xE0,\n                    [\n                        0x55,\n                        0xB0\n                    ],\n                    [\n                        0x55,\n                        0xBA\n                    ]\n                ])[0] || [];\n                var colourPrimaries = findEbml(track, [\n                    0xE0,\n                    [\n                        0x55,\n                        0xB0\n                    ],\n                    [\n                        0x55,\n                        0xBB\n                    ]\n                ])[0] || []; // if we find any optional codec parameter specify them all.\n                if (matrixCoefficients.length || videoFullRangeFlag.length || transferCharacteristics.length || colourPrimaries.length) {\n                    codec += \".\" + (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(colourPrimaries[0], 2, \"0\");\n                    codec += \".\" + (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(transferCharacteristics[0], 2, \"0\");\n                    codec += \".\" + (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(matrixCoefficients[0], 2, \"0\");\n                    codec += \".\" + (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.padStart)(videoFullRangeFlag[0], 2, \"0\");\n                }\n            } else {\n                codec = \"vp9\";\n            }\n        } else if (/^V_AV1/.test(decodedTrack.rawCodec)) {\n            codec = \"av01.\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getAv1Codec)(decodedTrack.codecPrivate);\n        } else if (/A_ALAC/.test(decodedTrack.rawCodec)) {\n            codec = \"alac\";\n        } else if (/A_MPEG\\/L2/.test(decodedTrack.rawCodec)) {\n            codec = \"mp2\";\n        } else if (/A_MPEG\\/L3/.test(decodedTrack.rawCodec)) {\n            codec = \"mp3\";\n        } else if (/^A_AAC/.test(decodedTrack.rawCodec)) {\n            if (decodedTrack.codecPrivate) {\n                codec = \"mp4a.40.\" + (decodedTrack.codecPrivate[0] >>> 3).toString();\n            } else {\n                codec = \"mp4a.40.2\";\n            }\n        } else if (/^A_AC3/.test(decodedTrack.rawCodec)) {\n            codec = \"ac-3\";\n        } else if (/^A_PCM/.test(decodedTrack.rawCodec)) {\n            codec = \"pcm\";\n        } else if (/^A_MS\\/ACM/.test(decodedTrack.rawCodec)) {\n            codec = \"speex\";\n        } else if (/^A_EAC3/.test(decodedTrack.rawCodec)) {\n            codec = \"ec-3\";\n        } else if (/^A_VORBIS/.test(decodedTrack.rawCodec)) {\n            codec = \"vorbis\";\n        } else if (/^A_FLAC/.test(decodedTrack.rawCodec)) {\n            codec = \"flac\";\n        } else if (/^A_OPUS/.test(decodedTrack.rawCodec)) {\n            codec = \"opus\";\n        }\n        decodedTrack.codec = codec;\n        decodedTracks.push(decodedTrack);\n    });\n    return decodedTracks.sort(function(a, b) {\n        return a.number - b.number;\n    });\n};\nvar parseData = function parseData(data, tracks) {\n    var allBlocks = [];\n    var segment = findEbml(data, [\n        EBML_TAGS.Segment\n    ])[0];\n    var timestampScale = findEbml(segment, [\n        EBML_TAGS.SegmentInfo,\n        EBML_TAGS.TimestampScale\n    ])[0]; // in nanoseconds, defaults to 1ms\n    if (timestampScale && timestampScale.length) {\n        timestampScale = (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(timestampScale);\n    } else {\n        timestampScale = 1000000;\n    }\n    var clusters = findEbml(segment, [\n        EBML_TAGS.Cluster\n    ]);\n    if (!tracks) {\n        tracks = parseTracks(segment);\n    }\n    clusters.forEach(function(cluster, ci) {\n        var simpleBlocks = findEbml(cluster, [\n            EBML_TAGS.SimpleBlock\n        ]).map(function(b) {\n            return {\n                type: \"simple\",\n                data: b\n            };\n        });\n        var blockGroups = findEbml(cluster, [\n            EBML_TAGS.BlockGroup\n        ]).map(function(b) {\n            return {\n                type: \"group\",\n                data: b\n            };\n        });\n        var timestamp = findEbml(cluster, [\n            EBML_TAGS.Timestamp\n        ])[0] || 0;\n        if (timestamp && timestamp.length) {\n            timestamp = (0,_byte_helpers__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(timestamp);\n        } // get all blocks then sort them into the correct order\n        var blocks = simpleBlocks.concat(blockGroups).sort(function(a, b) {\n            return a.data.byteOffset - b.data.byteOffset;\n        });\n        blocks.forEach(function(block, bi) {\n            var decoded = decodeBlock(block.data, block.type, timestampScale, timestamp);\n            allBlocks.push(decoded);\n        });\n    });\n    return {\n        tracks: tracks,\n        blocks: allBlocks\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/ebml-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/id3-helpers.js":
/*!************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/id3-helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getId3Offset: () => (/* binding */ getId3Offset),\n/* harmony export */   getId3Size: () => (/* binding */ getId3Size)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n\nvar ID3 = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n    0x49,\n    0x44,\n    0x33\n]);\nvar getId3Size = function getId3Size(bytes, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var flags = bytes[offset + 5];\n    var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];\n    var footerPresent = (flags & 16) >> 4;\n    if (footerPresent) {\n        return returnSize + 20;\n    }\n    return returnSize + 10;\n};\nvar getId3Offset = function getId3Offset(bytes, offset) {\n    if (offset === void 0) {\n        offset = 0;\n    }\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    if (bytes.length - offset < 10 || !(0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes, ID3, {\n        offset: offset\n    })) {\n        return offset;\n    }\n    offset += getId3Size(bytes, offset); // recursive check for id3 tags as some files\n    // have multiple ID3 tag sections even though\n    // they should not.\n    return getId3Offset(bytes, offset);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9pZDMtaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0Q7QUFDeEQsSUFBSUUsTUFBTUYseURBQU9BLENBQUM7SUFBQztJQUFNO0lBQU07Q0FBSztBQUM3QixJQUFJRyxhQUFhLFNBQVNBLFdBQVdDLEtBQUssRUFBRUMsTUFBTTtJQUN2RCxJQUFJQSxXQUFXLEtBQUssR0FBRztRQUNyQkEsU0FBUztJQUNYO0lBRUFELFFBQVFKLHlEQUFPQSxDQUFDSTtJQUNoQixJQUFJRSxRQUFRRixLQUFLLENBQUNDLFNBQVMsRUFBRTtJQUM3QixJQUFJRSxhQUFhSCxLQUFLLENBQUNDLFNBQVMsRUFBRSxJQUFJLEtBQUtELEtBQUssQ0FBQ0MsU0FBUyxFQUFFLElBQUksS0FBS0QsS0FBSyxDQUFDQyxTQUFTLEVBQUUsSUFBSSxJQUFJRCxLQUFLLENBQUNDLFNBQVMsRUFBRTtJQUMvRyxJQUFJRyxnQkFBZ0IsQ0FBQ0YsUUFBUSxFQUFDLEtBQU07SUFFcEMsSUFBSUUsZUFBZTtRQUNqQixPQUFPRCxhQUFhO0lBQ3RCO0lBRUEsT0FBT0EsYUFBYTtBQUN0QixFQUFFO0FBQ0ssSUFBSUUsZUFBZSxTQUFTQSxhQUFhTCxLQUFLLEVBQUVDLE1BQU07SUFDM0QsSUFBSUEsV0FBVyxLQUFLLEdBQUc7UUFDckJBLFNBQVM7SUFDWDtJQUVBRCxRQUFRSix5REFBT0EsQ0FBQ0k7SUFFaEIsSUFBSUEsTUFBTU0sTUFBTSxHQUFHTCxTQUFTLE1BQU0sQ0FBQ0osNERBQVVBLENBQUNHLE9BQU9GLEtBQUs7UUFDeERHLFFBQVFBO0lBQ1YsSUFBSTtRQUNGLE9BQU9BO0lBQ1Q7SUFFQUEsVUFBVUYsV0FBV0MsT0FBT0MsU0FBUyw2Q0FBNkM7SUFDbEYsNkNBQTZDO0lBQzdDLG1CQUFtQjtJQUVuQixPQUFPSSxhQUFhTCxPQUFPQztBQUM3QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJlZXplLW5leHQvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9pZDMtaGVscGVycy5qcz8wNzY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvVWludDgsIGJ5dGVzTWF0Y2ggfSBmcm9tICcuL2J5dGUtaGVscGVycy5qcyc7XG52YXIgSUQzID0gdG9VaW50OChbMHg0OSwgMHg0NCwgMHgzM10pO1xuZXhwb3J0IHZhciBnZXRJZDNTaXplID0gZnVuY3Rpb24gZ2V0SWQzU2l6ZShieXRlcywgb2Zmc2V0KSB7XG4gIGlmIChvZmZzZXQgPT09IHZvaWQgMCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH1cblxuICBieXRlcyA9IHRvVWludDgoYnl0ZXMpO1xuICB2YXIgZmxhZ3MgPSBieXRlc1tvZmZzZXQgKyA1XTtcbiAgdmFyIHJldHVyblNpemUgPSBieXRlc1tvZmZzZXQgKyA2XSA8PCAyMSB8IGJ5dGVzW29mZnNldCArIDddIDw8IDE0IHwgYnl0ZXNbb2Zmc2V0ICsgOF0gPDwgNyB8IGJ5dGVzW29mZnNldCArIDldO1xuICB2YXIgZm9vdGVyUHJlc2VudCA9IChmbGFncyAmIDE2KSA+PiA0O1xuXG4gIGlmIChmb290ZXJQcmVzZW50KSB7XG4gICAgcmV0dXJuIHJldHVyblNpemUgKyAyMDtcbiAgfVxuXG4gIHJldHVybiByZXR1cm5TaXplICsgMTA7XG59O1xuZXhwb3J0IHZhciBnZXRJZDNPZmZzZXQgPSBmdW5jdGlvbiBnZXRJZDNPZmZzZXQoYnl0ZXMsIG9mZnNldCkge1xuICBpZiAob2Zmc2V0ID09PSB2b2lkIDApIHtcbiAgICBvZmZzZXQgPSAwO1xuICB9XG5cbiAgYnl0ZXMgPSB0b1VpbnQ4KGJ5dGVzKTtcblxuICBpZiAoYnl0ZXMubGVuZ3RoIC0gb2Zmc2V0IDwgMTAgfHwgIWJ5dGVzTWF0Y2goYnl0ZXMsIElEMywge1xuICAgIG9mZnNldDogb2Zmc2V0XG4gIH0pKSB7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuXG4gIG9mZnNldCArPSBnZXRJZDNTaXplKGJ5dGVzLCBvZmZzZXQpOyAvLyByZWN1cnNpdmUgY2hlY2sgZm9yIGlkMyB0YWdzIGFzIHNvbWUgZmlsZXNcbiAgLy8gaGF2ZSBtdWx0aXBsZSBJRDMgdGFnIHNlY3Rpb25zIGV2ZW4gdGhvdWdoXG4gIC8vIHRoZXkgc2hvdWxkIG5vdC5cblxuICByZXR1cm4gZ2V0SWQzT2Zmc2V0KGJ5dGVzLCBvZmZzZXQpO1xufTsiXSwibmFtZXMiOlsidG9VaW50OCIsImJ5dGVzTWF0Y2giLCJJRDMiLCJnZXRJZDNTaXplIiwiYnl0ZXMiLCJvZmZzZXQiLCJmbGFncyIsInJldHVyblNpemUiLCJmb290ZXJQcmVzZW50IiwiZ2V0SWQzT2Zmc2V0IiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/id3-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/media-groups.js":
/*!*************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/media-groups.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   forEachMediaGroup: () => (/* binding */ forEachMediaGroup)\n/* harmony export */ });\n/**\n * Loops through all supported media groups in master and calls the provided\n * callback for each group\n *\n * @param {Object} master\n *        The parsed master manifest object\n * @param {string[]} groups\n *        The media groups to call the callback for\n * @param {Function} callback\n *        Callback to call for each media group\n */ var forEachMediaGroup = function forEachMediaGroup(master, groups, callback) {\n    groups.forEach(function(mediaType) {\n        for(var groupKey in master.mediaGroups[mediaType]){\n            for(var labelKey in master.mediaGroups[mediaType][groupKey]){\n                var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\n                callback(mediaProperties, mediaType, groupKey, labelKey);\n            }\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9tZWRpYS1ncm91cHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7O0NBVUMsR0FDTSxJQUFJQSxvQkFBb0IsU0FBU0Esa0JBQWtCQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUTtJQUNoRkQsT0FBT0UsT0FBTyxDQUFDLFNBQVVDLFNBQVM7UUFDaEMsSUFBSyxJQUFJQyxZQUFZTCxPQUFPTSxXQUFXLENBQUNGLFVBQVUsQ0FBRTtZQUNsRCxJQUFLLElBQUlHLFlBQVlQLE9BQU9NLFdBQVcsQ0FBQ0YsVUFBVSxDQUFDQyxTQUFTLENBQUU7Z0JBQzVELElBQUlHLGtCQUFrQlIsT0FBT00sV0FBVyxDQUFDRixVQUFVLENBQUNDLFNBQVMsQ0FBQ0UsU0FBUztnQkFDdkVMLFNBQVNNLGlCQUFpQkosV0FBV0MsVUFBVUU7WUFDakQ7UUFDRjtJQUNGO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9AdmlkZW9qcy92aHMtdXRpbHMvZXMvbWVkaWEtZ3JvdXBzLmpzP2E3ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBMb29wcyB0aHJvdWdoIGFsbCBzdXBwb3J0ZWQgbWVkaWEgZ3JvdXBzIGluIG1hc3RlciBhbmQgY2FsbHMgdGhlIHByb3ZpZGVkXG4gKiBjYWxsYmFjayBmb3IgZWFjaCBncm91cFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXN0ZXJcbiAqICAgICAgICBUaGUgcGFyc2VkIG1hc3RlciBtYW5pZmVzdCBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nW119IGdyb3Vwc1xuICogICAgICAgIFRoZSBtZWRpYSBncm91cHMgdG8gY2FsbCB0aGUgY2FsbGJhY2sgZm9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogICAgICAgIENhbGxiYWNrIHRvIGNhbGwgZm9yIGVhY2ggbWVkaWEgZ3JvdXBcbiAqL1xuZXhwb3J0IHZhciBmb3JFYWNoTWVkaWFHcm91cCA9IGZ1bmN0aW9uIGZvckVhY2hNZWRpYUdyb3VwKG1hc3RlciwgZ3JvdXBzLCBjYWxsYmFjaykge1xuICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAobWVkaWFUeXBlKSB7XG4gICAgZm9yICh2YXIgZ3JvdXBLZXkgaW4gbWFzdGVyLm1lZGlhR3JvdXBzW21lZGlhVHlwZV0pIHtcbiAgICAgIGZvciAodmFyIGxhYmVsS2V5IGluIG1hc3Rlci5tZWRpYUdyb3Vwc1ttZWRpYVR5cGVdW2dyb3VwS2V5XSkge1xuICAgICAgICB2YXIgbWVkaWFQcm9wZXJ0aWVzID0gbWFzdGVyLm1lZGlhR3JvdXBzW21lZGlhVHlwZV1bZ3JvdXBLZXldW2xhYmVsS2V5XTtcbiAgICAgICAgY2FsbGJhY2sobWVkaWFQcm9wZXJ0aWVzLCBtZWRpYVR5cGUsIGdyb3VwS2V5LCBsYWJlbEtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07Il0sIm5hbWVzIjpbImZvckVhY2hNZWRpYUdyb3VwIiwibWFzdGVyIiwiZ3JvdXBzIiwiY2FsbGJhY2siLCJmb3JFYWNoIiwibWVkaWFUeXBlIiwiZ3JvdXBLZXkiLCJtZWRpYUdyb3VwcyIsImxhYmVsS2V5IiwibWVkaWFQcm9wZXJ0aWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/media-groups.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/media-types.js":
/*!************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/media-types.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   simpleTypeFromSourceType: () => (/* binding */ simpleTypeFromSourceType)\n/* harmony export */ });\nvar MPEGURL_REGEX = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\nvar DASH_REGEX = /^application\\/dash\\+xml/i;\n/**\n * Returns a string that describes the type of source based on a video source object's\n * media type.\n *\n * @see {@link https://dev.w3.org/html5/pf-summary/video.html#dom-source-type|Source Type}\n *\n * @param {string} type\n *        Video source object media type\n * @return {('hls'|'dash'|'vhs-json'|null)}\n *         VHS source type string\n */ var simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\n    if (MPEGURL_REGEX.test(type)) {\n        return \"hls\";\n    }\n    if (DASH_REGEX.test(type)) {\n        return \"dash\";\n    } // Denotes the special case of a manifest object passed to http-streaming instead of a\n    // source URL.\n    //\n    // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.\n    //\n    // In this case, vnd stands for vendor, video.js for the organization, VHS for this\n    // project, and the +json suffix identifies the structure of the media type.\n    if (type === \"application/vnd.videojs.vhs+json\") {\n        return \"vhs-json\";\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9tZWRpYS10eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsZ0JBQWdCO0FBQ3BCLElBQUlDLGFBQWE7QUFDakI7Ozs7Ozs7Ozs7Q0FVQyxHQUVNLElBQUlDLDJCQUEyQixTQUFTQSx5QkFBeUJDLElBQUk7SUFDMUUsSUFBSUgsY0FBY0ksSUFBSSxDQUFDRCxPQUFPO1FBQzVCLE9BQU87SUFDVDtJQUVBLElBQUlGLFdBQVdHLElBQUksQ0FBQ0QsT0FBTztRQUN6QixPQUFPO0lBQ1QsRUFBRSxzRkFBc0Y7SUFDeEYsY0FBYztJQUNkLEVBQUU7SUFDRixzRkFBc0Y7SUFDdEYsRUFBRTtJQUNGLG1GQUFtRjtJQUNuRiw0RUFBNEU7SUFHNUUsSUFBSUEsU0FBUyxvQ0FBb0M7UUFDL0MsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNULEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvQHZpZGVvanMvdmhzLXV0aWxzL2VzL21lZGlhLXR5cGVzLmpzP2ViOTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1QRUdVUkxfUkVHRVggPSAvXihhdWRpb3x2aWRlb3xhcHBsaWNhdGlvbilcXC8oeC18dm5kXFwuYXBwbGVcXC4pP21wZWd1cmwvaTtcbnZhciBEQVNIX1JFR0VYID0gL15hcHBsaWNhdGlvblxcL2Rhc2hcXCt4bWwvaTtcbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGUgdHlwZSBvZiBzb3VyY2UgYmFzZWQgb24gYSB2aWRlbyBzb3VyY2Ugb2JqZWN0J3NcbiAqIG1lZGlhIHR5cGUuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXYudzMub3JnL2h0bWw1L3BmLXN1bW1hcnkvdmlkZW8uaHRtbCNkb20tc291cmNlLXR5cGV8U291cmNlIFR5cGV9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqICAgICAgICBWaWRlbyBzb3VyY2Ugb2JqZWN0IG1lZGlhIHR5cGVcbiAqIEByZXR1cm4geygnaGxzJ3wnZGFzaCd8J3Zocy1qc29uJ3xudWxsKX1cbiAqICAgICAgICAgVkhTIHNvdXJjZSB0eXBlIHN0cmluZ1xuICovXG5cbmV4cG9ydCB2YXIgc2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlID0gZnVuY3Rpb24gc2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlKHR5cGUpIHtcbiAgaWYgKE1QRUdVUkxfUkVHRVgudGVzdCh0eXBlKSkge1xuICAgIHJldHVybiAnaGxzJztcbiAgfVxuXG4gIGlmIChEQVNIX1JFR0VYLnRlc3QodHlwZSkpIHtcbiAgICByZXR1cm4gJ2Rhc2gnO1xuICB9IC8vIERlbm90ZXMgdGhlIHNwZWNpYWwgY2FzZSBvZiBhIG1hbmlmZXN0IG9iamVjdCBwYXNzZWQgdG8gaHR0cC1zdHJlYW1pbmcgaW5zdGVhZCBvZiBhXG4gIC8vIHNvdXJjZSBVUkwuXG4gIC8vXG4gIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NZWRpYV90eXBlIGZvciBkZXRhaWxzIG9uIHNwZWNpZnlpbmcgbWVkaWEgdHlwZXMuXG4gIC8vXG4gIC8vIEluIHRoaXMgY2FzZSwgdm5kIHN0YW5kcyBmb3IgdmVuZG9yLCB2aWRlby5qcyBmb3IgdGhlIG9yZ2FuaXphdGlvbiwgVkhTIGZvciB0aGlzXG4gIC8vIHByb2plY3QsIGFuZCB0aGUgK2pzb24gc3VmZml4IGlkZW50aWZpZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgbWVkaWEgdHlwZS5cblxuXG4gIGlmICh0eXBlID09PSAnYXBwbGljYXRpb24vdm5kLnZpZGVvanMudmhzK2pzb24nKSB7XG4gICAgcmV0dXJuICd2aHMtanNvbic7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07Il0sIm5hbWVzIjpbIk1QRUdVUkxfUkVHRVgiLCJEQVNIX1JFR0VYIiwic2ltcGxlVHlwZUZyb21Tb3VyY2VUeXBlIiwidHlwZSIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/media-types.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/mp4-helpers.js":
/*!************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/mp4-helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSampleDescription: () => (/* binding */ addSampleDescription),\n/* harmony export */   buildFrameTable: () => (/* binding */ buildFrameTable),\n/* harmony export */   findBox: () => (/* binding */ findBox),\n/* harmony export */   findNamedBox: () => (/* binding */ findNamedBox),\n/* harmony export */   parseDescriptors: () => (/* binding */ parseDescriptors),\n/* harmony export */   parseMediaInfo: () => (/* binding */ parseMediaInfo),\n/* harmony export */   parseTracks: () => (/* binding */ parseTracks)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n/* harmony import */ var _codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codec-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/codec-helpers.js\");\n/* harmony import */ var _opus_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opus-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/opus-helpers.js\");\n\n\n\nvar normalizePath = function normalizePath(path) {\n    if (typeof path === \"string\") {\n        return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(path);\n    }\n    if (typeof path === \"number\") {\n        return path;\n    }\n    return path;\n};\nvar normalizePaths = function normalizePaths(paths) {\n    if (!Array.isArray(paths)) {\n        return [\n            normalizePath(paths)\n        ];\n    }\n    return paths.map(function(p) {\n        return normalizePath(p);\n    });\n};\nvar DESCRIPTORS;\nvar parseDescriptors = function parseDescriptors(bytes) {\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var results = [];\n    var i = 0;\n    while(bytes.length > i){\n        var tag = bytes[i];\n        var size = 0;\n        var headerSize = 0; // tag\n        headerSize++;\n        var byte = bytes[headerSize]; // first byte\n        headerSize++;\n        while(byte & 0x80){\n            size = (byte & 0x7F) << 7;\n            byte = bytes[headerSize];\n            headerSize++;\n        }\n        size += byte & 0x7F;\n        for(var z = 0; z < DESCRIPTORS.length; z++){\n            var _DESCRIPTORS$z = DESCRIPTORS[z], id = _DESCRIPTORS$z.id, parser = _DESCRIPTORS$z.parser;\n            if (tag === id) {\n                results.push(parser(bytes.subarray(headerSize, headerSize + size)));\n                break;\n            }\n        }\n        i += size + headerSize;\n    }\n    return results;\n};\nDESCRIPTORS = [\n    {\n        id: 0x03,\n        parser: function parser(bytes) {\n            var desc = {\n                tag: 0x03,\n                id: bytes[0] << 8 | bytes[1],\n                flags: bytes[2],\n                size: 3,\n                dependsOnEsId: 0,\n                ocrEsId: 0,\n                descriptors: [],\n                url: \"\"\n            }; // depends on es id\n            if (desc.flags & 0x80) {\n                desc.dependsOnEsId = bytes[desc.size] << 8 | bytes[desc.size + 1];\n                desc.size += 2;\n            } // url\n            if (desc.flags & 0x40) {\n                var len = bytes[desc.size];\n                desc.url = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(bytes.subarray(desc.size + 1, desc.size + 1 + len));\n                desc.size += len;\n            } // ocr es id\n            if (desc.flags & 0x20) {\n                desc.ocrEsId = bytes[desc.size] << 8 | bytes[desc.size + 1];\n                desc.size += 2;\n            }\n            desc.descriptors = parseDescriptors(bytes.subarray(desc.size)) || [];\n            return desc;\n        }\n    },\n    {\n        id: 0x04,\n        parser: function parser(bytes) {\n            // DecoderConfigDescriptor\n            var desc = {\n                tag: 0x04,\n                oti: bytes[0],\n                streamType: bytes[1],\n                bufferSize: bytes[2] << 16 | bytes[3] << 8 | bytes[4],\n                maxBitrate: bytes[5] << 24 | bytes[6] << 16 | bytes[7] << 8 | bytes[8],\n                avgBitrate: bytes[9] << 24 | bytes[10] << 16 | bytes[11] << 8 | bytes[12],\n                descriptors: parseDescriptors(bytes.subarray(13))\n            };\n            return desc;\n        }\n    },\n    {\n        id: 0x05,\n        parser: function parser(bytes) {\n            // DecoderSpecificInfo\n            return {\n                tag: 0x05,\n                bytes: bytes\n            };\n        }\n    },\n    {\n        id: 0x06,\n        parser: function parser(bytes) {\n            // SLConfigDescriptor\n            return {\n                tag: 0x06,\n                bytes: bytes\n            };\n        }\n    }\n];\n/**\n * find any number of boxes by name given a path to it in an iso bmff\n * such as mp4.\n *\n * @param {TypedArray} bytes\n *        bytes for the iso bmff to search for boxes in\n *\n * @param {Uint8Array[]|string[]|string|Uint8Array} name\n *        An array of paths or a single path representing the name\n *        of boxes to search through in bytes. Paths may be\n *        uint8 (character codes) or strings.\n *\n * @param {boolean} [complete=false]\n *        Should we search only for complete boxes on the final path.\n *        This is very useful when you do not want to get back partial boxes\n *        in the case of streaming files.\n *\n * @return {Uint8Array[]}\n *         An array of the end paths that we found.\n */ var findBox = function findBox(bytes, paths, complete) {\n    if (complete === void 0) {\n        complete = false;\n    }\n    paths = normalizePaths(paths);\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var results = [];\n    if (!paths.length) {\n        // short-circuit the search for empty paths\n        return results;\n    }\n    var i = 0;\n    while(i < bytes.length){\n        var size = (bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]) >>> 0;\n        var type = bytes.subarray(i + 4, i + 8); // invalid box format.\n        if (size === 0) {\n            break;\n        }\n        var end = i + size;\n        if (end > bytes.length) {\n            // this box is bigger than the number of bytes we have\n            // and complete is set, we cannot find any more boxes.\n            if (complete) {\n                break;\n            }\n            end = bytes.length;\n        }\n        var data = bytes.subarray(i + 8, end);\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(type, paths[0])) {\n            if (paths.length === 1) {\n                // this is the end of the path and we've found the box we were\n                // looking for\n                results.push(data);\n            } else {\n                // recursively search for the next box along the path\n                results.push.apply(results, findBox(data, paths.slice(1), complete));\n            }\n        }\n        i = end;\n    } // we've finished searching all of bytes\n    return results;\n};\n/**\n * Search for a single matching box by name in an iso bmff format like\n * mp4. This function is useful for finding codec boxes which\n * can be placed arbitrarily in sample descriptions depending\n * on the version of the file or file type.\n *\n * @param {TypedArray} bytes\n *        bytes for the iso bmff to search for boxes in\n *\n * @param {string|Uint8Array} name\n *        The name of the box to find.\n *\n * @return {Uint8Array[]}\n *         a subarray of bytes representing the name boxed we found.\n */ var findNamedBox = function findNamedBox(bytes, name) {\n    name = normalizePath(name);\n    if (!name.length) {\n        // short-circuit the search for empty paths\n        return bytes.subarray(bytes.length);\n    }\n    var i = 0;\n    while(i < bytes.length){\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes.subarray(i, i + name.length), name)) {\n            var size = (bytes[i - 4] << 24 | bytes[i - 3] << 16 | bytes[i - 2] << 8 | bytes[i - 1]) >>> 0;\n            var end = size > 1 ? i + size : bytes.byteLength;\n            return bytes.subarray(i + 4, end);\n        }\n        i++;\n    } // we've finished searching all of bytes\n    return bytes.subarray(bytes.length);\n};\nvar parseSamples = function parseSamples(data, entrySize, parseEntry) {\n    if (entrySize === void 0) {\n        entrySize = 4;\n    }\n    if (parseEntry === void 0) {\n        parseEntry = function parseEntry(d) {\n            return (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(d);\n        };\n    }\n    var entries = [];\n    if (!data || !data.length) {\n        return entries;\n    }\n    var entryCount = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(data.subarray(4, 8));\n    for(var i = 8; entryCount; i += entrySize, entryCount--){\n        entries.push(parseEntry(data.subarray(i, i + entrySize)));\n    }\n    return entries;\n};\nvar buildFrameTable = function buildFrameTable(stbl, timescale) {\n    var keySamples = parseSamples(findBox(stbl, [\n        \"stss\"\n    ])[0]);\n    var chunkOffsets = parseSamples(findBox(stbl, [\n        \"stco\"\n    ])[0]);\n    var timeToSamples = parseSamples(findBox(stbl, [\n        \"stts\"\n    ])[0], 8, function(entry) {\n        return {\n            sampleCount: (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(entry.subarray(0, 4)),\n            sampleDelta: (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(entry.subarray(4, 8))\n        };\n    });\n    var samplesToChunks = parseSamples(findBox(stbl, [\n        \"stsc\"\n    ])[0], 12, function(entry) {\n        return {\n            firstChunk: (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(entry.subarray(0, 4)),\n            samplesPerChunk: (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(entry.subarray(4, 8)),\n            sampleDescriptionIndex: (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(entry.subarray(8, 12))\n        };\n    });\n    var stsz = findBox(stbl, [\n        \"stsz\"\n    ])[0]; // stsz starts with a 4 byte sampleSize which we don't need\n    var sampleSizes = parseSamples(stsz && stsz.length && stsz.subarray(4) || null);\n    var frames = [];\n    for(var chunkIndex = 0; chunkIndex < chunkOffsets.length; chunkIndex++){\n        var samplesInChunk = void 0;\n        for(var i = 0; i < samplesToChunks.length; i++){\n            var sampleToChunk = samplesToChunks[i];\n            var isThisOne = chunkIndex + 1 >= sampleToChunk.firstChunk && (i + 1 >= samplesToChunks.length || chunkIndex + 1 < samplesToChunks[i + 1].firstChunk);\n            if (isThisOne) {\n                samplesInChunk = sampleToChunk.samplesPerChunk;\n                break;\n            }\n        }\n        var chunkOffset = chunkOffsets[chunkIndex];\n        for(var _i = 0; _i < samplesInChunk; _i++){\n            var frameEnd = sampleSizes[frames.length]; // if we don't have key samples every frame is a keyframe\n            var keyframe = !keySamples.length;\n            if (keySamples.length && keySamples.indexOf(frames.length + 1) !== -1) {\n                keyframe = true;\n            }\n            var frame = {\n                keyframe: keyframe,\n                start: chunkOffset,\n                end: chunkOffset + frameEnd\n            };\n            for(var k = 0; k < timeToSamples.length; k++){\n                var _timeToSamples$k = timeToSamples[k], sampleCount = _timeToSamples$k.sampleCount, sampleDelta = _timeToSamples$k.sampleDelta;\n                if (frames.length <= sampleCount) {\n                    // ms to ns\n                    var lastTimestamp = frames.length ? frames[frames.length - 1].timestamp : 0;\n                    frame.timestamp = lastTimestamp + sampleDelta / timescale * 1000;\n                    frame.duration = sampleDelta;\n                    break;\n                }\n            }\n            frames.push(frame);\n            chunkOffset += frameEnd;\n        }\n    }\n    return frames;\n};\nvar addSampleDescription = function addSampleDescription(track, bytes) {\n    var codec = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(bytes.subarray(0, 4));\n    if (track.type === \"video\") {\n        track.info = track.info || {};\n        track.info.width = bytes[28] << 8 | bytes[29];\n        track.info.height = bytes[30] << 8 | bytes[31];\n    } else if (track.type === \"audio\") {\n        track.info = track.info || {};\n        track.info.channels = bytes[20] << 8 | bytes[21];\n        track.info.bitDepth = bytes[22] << 8 | bytes[23];\n        track.info.sampleRate = bytes[28] << 8 | bytes[29];\n    }\n    if (codec === \"avc1\") {\n        var avcC = findNamedBox(bytes, \"avcC\"); // AVCDecoderConfigurationRecord\n        codec += \".\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getAvcCodec)(avcC);\n        track.info.avcC = avcC; // TODO: do we need to parse all this?\n    /* {\n      configurationVersion: avcC[0],\n      profile: avcC[1],\n      profileCompatibility: avcC[2],\n      level: avcC[3],\n      lengthSizeMinusOne: avcC[4] & 0x3\n    };\n     let spsNalUnitCount = avcC[5] & 0x1F;\n    const spsNalUnits = track.info.avc.spsNalUnits = [];\n     // past spsNalUnitCount\n    let offset = 6;\n     while (spsNalUnitCount--) {\n      const nalLen = avcC[offset] << 8 | avcC[offset + 1];\n       spsNalUnits.push(avcC.subarray(offset + 2, offset + 2 + nalLen));\n       offset += nalLen + 2;\n    }\n    let ppsNalUnitCount = avcC[offset];\n    const ppsNalUnits = track.info.avc.ppsNalUnits = [];\n     // past ppsNalUnitCount\n    offset += 1;\n     while (ppsNalUnitCount--) {\n      const nalLen = avcC[offset] << 8 | avcC[offset + 1];\n       ppsNalUnits.push(avcC.subarray(offset + 2, offset + 2 + nalLen));\n       offset += nalLen + 2;\n    }*/ // HEVCDecoderConfigurationRecord\n    } else if (codec === \"hvc1\" || codec === \"hev1\") {\n        codec += \".\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getHvcCodec)(findNamedBox(bytes, \"hvcC\"));\n    } else if (codec === \"mp4a\" || codec === \"mp4v\") {\n        var esds = findNamedBox(bytes, \"esds\");\n        var esDescriptor = parseDescriptors(esds.subarray(4))[0];\n        var decoderConfig = esDescriptor && esDescriptor.descriptors.filter(function(_ref) {\n            var tag = _ref.tag;\n            return tag === 0x04;\n        })[0];\n        if (decoderConfig) {\n            // most codecs do not have a further '.'\n            // such as 0xa5 for ac-3 and 0xa6 for e-ac-3\n            codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toHexString)(decoderConfig.oti);\n            if (decoderConfig.oti === 0x40) {\n                codec += \".\" + (decoderConfig.descriptors[0].bytes[0] >> 3).toString();\n            } else if (decoderConfig.oti === 0x20) {\n                codec += \".\" + decoderConfig.descriptors[0].bytes[4].toString();\n            } else if (decoderConfig.oti === 0xdd) {\n                codec = \"vorbis\";\n            }\n        } else if (track.type === \"audio\") {\n            codec += \".40.2\";\n        } else {\n            codec += \".20.9\";\n        }\n    } else if (codec === \"av01\") {\n        // AV1DecoderConfigurationRecord\n        codec += \".\" + (0,_codec_helpers_js__WEBPACK_IMPORTED_MODULE_1__.getAv1Codec)(findNamedBox(bytes, \"av1C\"));\n    } else if (codec === \"vp09\") {\n        // VPCodecConfigurationRecord\n        var vpcC = findNamedBox(bytes, \"vpcC\"); // https://www.webmproject.org/vp9/mp4/\n        var profile = vpcC[0];\n        var level = vpcC[1];\n        var bitDepth = vpcC[2] >> 4;\n        var chromaSubsampling = (vpcC[2] & 0x0F) >> 1;\n        var videoFullRangeFlag = (vpcC[2] & 0x0F) >> 3;\n        var colourPrimaries = vpcC[3];\n        var transferCharacteristics = vpcC[4];\n        var matrixCoefficients = vpcC[5];\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(profile, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(level, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(bitDepth, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(chromaSubsampling, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(colourPrimaries, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(transferCharacteristics, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(matrixCoefficients, 2, \"0\");\n        codec += \".\" + (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.padStart)(videoFullRangeFlag, 2, \"0\");\n    } else if (codec === \"theo\") {\n        codec = \"theora\";\n    } else if (codec === \"spex\") {\n        codec = \"speex\";\n    } else if (codec === \".mp3\") {\n        codec = \"mp4a.40.34\";\n    } else if (codec === \"msVo\") {\n        codec = \"vorbis\";\n    } else if (codec === \"Opus\") {\n        codec = \"opus\";\n        var dOps = findNamedBox(bytes, \"dOps\");\n        track.info.opus = (0,_opus_helpers_js__WEBPACK_IMPORTED_MODULE_2__.parseOpusHead)(dOps); // TODO: should this go into the webm code??\n        // Firefox requires a codecDelay for opus playback\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1276238\n        track.info.codecDelay = 6500000;\n    } else {\n        codec = codec.toLowerCase();\n    }\n    /* eslint-enable */ // flac, ac-3, ec-3, opus\n    track.codec = codec;\n};\nvar parseTracks = function parseTracks(bytes, frameTable) {\n    if (frameTable === void 0) {\n        frameTable = true;\n    }\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    var traks = findBox(bytes, [\n        \"moov\",\n        \"trak\"\n    ], true);\n    var tracks = [];\n    traks.forEach(function(trak) {\n        var track = {\n            bytes: trak\n        };\n        var mdia = findBox(trak, [\n            \"mdia\"\n        ])[0];\n        var hdlr = findBox(mdia, [\n            \"hdlr\"\n        ])[0];\n        var trakType = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(hdlr.subarray(8, 12));\n        if (trakType === \"soun\") {\n            track.type = \"audio\";\n        } else if (trakType === \"vide\") {\n            track.type = \"video\";\n        } else {\n            track.type = trakType;\n        }\n        var tkhd = findBox(trak, [\n            \"tkhd\"\n        ])[0];\n        if (tkhd) {\n            var view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n            var tkhdVersion = view.getUint8(0);\n            track.number = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\n        }\n        var mdhd = findBox(mdia, [\n            \"mdhd\"\n        ])[0];\n        if (mdhd) {\n            // mdhd is a FullBox, meaning it will have its own version as the first byte\n            var version = mdhd[0];\n            var index = version === 0 ? 12 : 20;\n            track.timescale = (mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]) >>> 0;\n        }\n        var stbl = findBox(mdia, [\n            \"minf\",\n            \"stbl\"\n        ])[0];\n        var stsd = findBox(stbl, [\n            \"stsd\"\n        ])[0];\n        var descriptionCount = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(stsd.subarray(4, 8));\n        var offset = 8; // add codec and codec info\n        while(descriptionCount--){\n            var len = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(stsd.subarray(offset, offset + 4));\n            var sampleDescriptor = stsd.subarray(offset + 4, offset + 4 + len);\n            addSampleDescription(track, sampleDescriptor);\n            offset += 4 + len;\n        }\n        if (frameTable) {\n            track.frameTable = buildFrameTable(stbl, track.timescale);\n        } // codec has no sub parameters\n        tracks.push(track);\n    });\n    return tracks;\n};\nvar parseMediaInfo = function parseMediaInfo(bytes) {\n    var mvhd = findBox(bytes, [\n        \"moov\",\n        \"mvhd\"\n    ], true)[0];\n    if (!mvhd || !mvhd.length) {\n        return;\n    }\n    var info = {}; // ms to ns\n    // mvhd v1 has 8 byte duration and other fields too\n    if (mvhd[0] === 1) {\n        info.timestampScale = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(mvhd.subarray(20, 24));\n        info.duration = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(mvhd.subarray(24, 32));\n    } else {\n        info.timestampScale = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(mvhd.subarray(12, 16));\n        info.duration = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumber)(mvhd.subarray(16, 20));\n    }\n    info.bytes = mvhd;\n    return info;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/mp4-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/nal-helpers.js":
/*!************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/nal-helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMULATION_PREVENTION: () => (/* binding */ EMULATION_PREVENTION),\n/* harmony export */   NAL_TYPE_ONE: () => (/* binding */ NAL_TYPE_ONE),\n/* harmony export */   NAL_TYPE_TWO: () => (/* binding */ NAL_TYPE_TWO),\n/* harmony export */   discardEmulationPreventionBytes: () => (/* binding */ discardEmulationPreventionBytes),\n/* harmony export */   findH264Nal: () => (/* binding */ findH264Nal),\n/* harmony export */   findH265Nal: () => (/* binding */ findH265Nal),\n/* harmony export */   findNal: () => (/* binding */ findNal)\n/* harmony export */ });\n/* harmony import */ var _byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte-helpers.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/byte-helpers.js\");\n\nvar NAL_TYPE_ONE = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n    0x00,\n    0x00,\n    0x00,\n    0x01\n]);\nvar NAL_TYPE_TWO = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n    0x00,\n    0x00,\n    0x01\n]);\nvar EMULATION_PREVENTION = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)([\n    0x00,\n    0x00,\n    0x03\n]);\n/**\n * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n * Sequence Payload\"\n *\n * @param data {Uint8Array} the bytes of a RBSP from a NAL\n * unit\n * @return {Uint8Array} the RBSP without any Emulation\n * Prevention Bytes\n */ var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(bytes) {\n    var positions = [];\n    var i = 1; // Find all `Emulation Prevention Bytes`\n    while(i < bytes.length - 2){\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes.subarray(i, i + 3), EMULATION_PREVENTION)) {\n            positions.push(i + 2);\n            i++;\n        }\n        i++;\n    } // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (positions.length === 0) {\n        return bytes;\n    } // Create a new array to hold the NAL unit data\n    var newLength = bytes.length - positions.length;\n    var newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n    for(i = 0; i < newLength; sourceIndex++, i++){\n        if (sourceIndex === positions[0]) {\n            // Skip this byte\n            sourceIndex++; // Remove this position index\n            positions.shift();\n        }\n        newData[i] = bytes[sourceIndex];\n    }\n    return newData;\n};\nvar findNal = function findNal(bytes, dataType, types, nalLimit) {\n    if (nalLimit === void 0) {\n        nalLimit = Infinity;\n    }\n    bytes = (0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.toUint8)(bytes);\n    types = [].concat(types);\n    var i = 0;\n    var nalStart;\n    var nalsFound = 0; // keep searching until:\n    // we reach the end of bytes\n    // we reach the maximum number of nals they want to seach\n    // NOTE: that we disregard nalLimit when we have found the start\n    // of the nal we want so that we can find the end of the nal we want.\n    while(i < bytes.length && (nalsFound < nalLimit || nalStart)){\n        var nalOffset = void 0;\n        if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes.subarray(i), NAL_TYPE_ONE)) {\n            nalOffset = 4;\n        } else if ((0,_byte_helpers_js__WEBPACK_IMPORTED_MODULE_0__.bytesMatch)(bytes.subarray(i), NAL_TYPE_TWO)) {\n            nalOffset = 3;\n        } // we are unsynced,\n        // find the next nal unit\n        if (!nalOffset) {\n            i++;\n            continue;\n        }\n        nalsFound++;\n        if (nalStart) {\n            return discardEmulationPreventionBytes(bytes.subarray(nalStart, i));\n        }\n        var nalType = void 0;\n        if (dataType === \"h264\") {\n            nalType = bytes[i + nalOffset] & 0x1f;\n        } else if (dataType === \"h265\") {\n            nalType = bytes[i + nalOffset] >> 1 & 0x3f;\n        }\n        if (types.indexOf(nalType) !== -1) {\n            nalStart = i + nalOffset;\n        } // nal header is 1 length for h264, and 2 for h265\n        i += nalOffset + (dataType === \"h264\" ? 1 : 2);\n    }\n    return bytes.subarray(0, 0);\n};\nvar findH264Nal = function findH264Nal(bytes, type, nalLimit) {\n    return findNal(bytes, \"h264\", type, nalLimit);\n};\nvar findH265Nal = function findH265Nal(bytes, type, nalLimit) {\n    return findNal(bytes, \"h265\", type, nalLimit);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9uYWwtaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF3RDtBQUNqRCxJQUFJRSxlQUFlRCx5REFBT0EsQ0FBQztJQUFDO0lBQU07SUFBTTtJQUFNO0NBQUssRUFBRTtBQUNyRCxJQUFJRSxlQUFlRix5REFBT0EsQ0FBQztJQUFDO0lBQU07SUFBTTtDQUFLLEVBQUU7QUFDL0MsSUFBSUcsdUJBQXVCSCx5REFBT0EsQ0FBQztJQUFDO0lBQU07SUFBTTtDQUFLLEVBQUU7QUFDOUQ7Ozs7Ozs7O0NBUUMsR0FFTSxJQUFJSSxrQ0FBa0MsU0FBU0EsZ0NBQWdDQyxLQUFLO0lBQ3pGLElBQUlDLFlBQVksRUFBRTtJQUNsQixJQUFJQyxJQUFJLEdBQUcsd0NBQXdDO0lBRW5ELE1BQU9BLElBQUlGLE1BQU1HLE1BQU0sR0FBRyxFQUFHO1FBQzNCLElBQUlULDREQUFVQSxDQUFDTSxNQUFNSSxRQUFRLENBQUNGLEdBQUdBLElBQUksSUFBSUosdUJBQXVCO1lBQzlERyxVQUFVSSxJQUFJLENBQUNILElBQUk7WUFDbkJBO1FBQ0Y7UUFFQUE7SUFDRixFQUFFLHVFQUF1RTtJQUN6RSxRQUFRO0lBR1IsSUFBSUQsVUFBVUUsTUFBTSxLQUFLLEdBQUc7UUFDMUIsT0FBT0g7SUFDVCxFQUFFLCtDQUErQztJQUdqRCxJQUFJTSxZQUFZTixNQUFNRyxNQUFNLEdBQUdGLFVBQVVFLE1BQU07SUFDL0MsSUFBSUksVUFBVSxJQUFJQyxXQUFXRjtJQUM3QixJQUFJRyxjQUFjO0lBRWxCLElBQUtQLElBQUksR0FBR0EsSUFBSUksV0FBV0csZUFBZVAsSUFBSztRQUM3QyxJQUFJTyxnQkFBZ0JSLFNBQVMsQ0FBQyxFQUFFLEVBQUU7WUFDaEMsaUJBQWlCO1lBQ2pCUSxlQUFlLDZCQUE2QjtZQUU1Q1IsVUFBVVMsS0FBSztRQUNqQjtRQUVBSCxPQUFPLENBQUNMLEVBQUUsR0FBR0YsS0FBSyxDQUFDUyxZQUFZO0lBQ2pDO0lBRUEsT0FBT0Y7QUFDVCxFQUFFO0FBQ0ssSUFBSUksVUFBVSxTQUFTQSxRQUFRWCxLQUFLLEVBQUVZLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxRQUFRO0lBQ3BFLElBQUlBLGFBQWEsS0FBSyxHQUFHO1FBQ3ZCQSxXQUFXQztJQUNiO0lBRUFmLFFBQVFMLHlEQUFPQSxDQUFDSztJQUNoQmEsUUFBUSxFQUFFLENBQUNHLE1BQU0sQ0FBQ0g7SUFDbEIsSUFBSVgsSUFBSTtJQUNSLElBQUllO0lBQ0osSUFBSUMsWUFBWSxHQUFHLHdCQUF3QjtJQUMzQyw0QkFBNEI7SUFDNUIseURBQXlEO0lBQ3pELGdFQUFnRTtJQUNoRSxxRUFBcUU7SUFFckUsTUFBT2hCLElBQUlGLE1BQU1HLE1BQU0sSUFBS2UsQ0FBQUEsWUFBWUosWUFBWUcsUUFBTyxFQUFJO1FBQzdELElBQUlFLFlBQVksS0FBSztRQUVyQixJQUFJekIsNERBQVVBLENBQUNNLE1BQU1JLFFBQVEsQ0FBQ0YsSUFBSU4sZUFBZTtZQUMvQ3VCLFlBQVk7UUFDZCxPQUFPLElBQUl6Qiw0REFBVUEsQ0FBQ00sTUFBTUksUUFBUSxDQUFDRixJQUFJTCxlQUFlO1lBQ3REc0IsWUFBWTtRQUNkLEVBQUUsbUJBQW1CO1FBQ3JCLHlCQUF5QjtRQUd6QixJQUFJLENBQUNBLFdBQVc7WUFDZGpCO1lBQ0E7UUFDRjtRQUVBZ0I7UUFFQSxJQUFJRCxVQUFVO1lBQ1osT0FBT2xCLGdDQUFnQ0MsTUFBTUksUUFBUSxDQUFDYSxVQUFVZjtRQUNsRTtRQUVBLElBQUlrQixVQUFVLEtBQUs7UUFFbkIsSUFBSVIsYUFBYSxRQUFRO1lBQ3ZCUSxVQUFVcEIsS0FBSyxDQUFDRSxJQUFJaUIsVUFBVSxHQUFHO1FBQ25DLE9BQU8sSUFBSVAsYUFBYSxRQUFRO1lBQzlCUSxVQUFVcEIsS0FBSyxDQUFDRSxJQUFJaUIsVUFBVSxJQUFJLElBQUk7UUFDeEM7UUFFQSxJQUFJTixNQUFNUSxPQUFPLENBQUNELGFBQWEsQ0FBQyxHQUFHO1lBQ2pDSCxXQUFXZixJQUFJaUI7UUFDakIsRUFBRSxrREFBa0Q7UUFHcERqQixLQUFLaUIsWUFBYVAsQ0FBQUEsYUFBYSxTQUFTLElBQUk7SUFDOUM7SUFFQSxPQUFPWixNQUFNSSxRQUFRLENBQUMsR0FBRztBQUMzQixFQUFFO0FBQ0ssSUFBSWtCLGNBQWMsU0FBU0EsWUFBWXRCLEtBQUssRUFBRXVCLElBQUksRUFBRVQsUUFBUTtJQUNqRSxPQUFPSCxRQUFRWCxPQUFPLFFBQVF1QixNQUFNVDtBQUN0QyxFQUFFO0FBQ0ssSUFBSVUsY0FBYyxTQUFTQSxZQUFZeEIsS0FBSyxFQUFFdUIsSUFBSSxFQUFFVCxRQUFRO0lBQ2pFLE9BQU9ILFFBQVFYLE9BQU8sUUFBUXVCLE1BQU1UO0FBQ3RDLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvQHZpZGVvanMvdmhzLXV0aWxzL2VzL25hbC1oZWxwZXJzLmpzPzcwZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNNYXRjaCwgdG9VaW50OCB9IGZyb20gJy4vYnl0ZS1oZWxwZXJzLmpzJztcbmV4cG9ydCB2YXIgTkFMX1RZUEVfT05FID0gdG9VaW50OChbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMV0pO1xuZXhwb3J0IHZhciBOQUxfVFlQRV9UV08gPSB0b1VpbnQ4KFsweDAwLCAweDAwLCAweDAxXSk7XG5leHBvcnQgdmFyIEVNVUxBVElPTl9QUkVWRU5USU9OID0gdG9VaW50OChbMHgwMCwgMHgwMCwgMHgwM10pO1xuLyoqXG4gKiBFeHB1bmdlIGFueSBcIkVtdWxhdGlvbiBQcmV2ZW50aW9uXCIgYnl0ZXMgZnJvbSBhIFwiUmF3IEJ5dGVcbiAqIFNlcXVlbmNlIFBheWxvYWRcIlxuICpcbiAqIEBwYXJhbSBkYXRhIHtVaW50OEFycmF5fSB0aGUgYnl0ZXMgb2YgYSBSQlNQIGZyb20gYSBOQUxcbiAqIHVuaXRcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IHRoZSBSQlNQIHdpdGhvdXQgYW55IEVtdWxhdGlvblxuICogUHJldmVudGlvbiBCeXRlc1xuICovXG5cbmV4cG9ydCB2YXIgZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyA9IGZ1bmN0aW9uIGRpc2NhcmRFbXVsYXRpb25QcmV2ZW50aW9uQnl0ZXMoYnl0ZXMpIHtcbiAgdmFyIHBvc2l0aW9ucyA9IFtdO1xuICB2YXIgaSA9IDE7IC8vIEZpbmQgYWxsIGBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlc2BcblxuICB3aGlsZSAoaSA8IGJ5dGVzLmxlbmd0aCAtIDIpIHtcbiAgICBpZiAoYnl0ZXNNYXRjaChieXRlcy5zdWJhcnJheShpLCBpICsgMyksIEVNVUxBVElPTl9QUkVWRU5USU9OKSkge1xuICAgICAgcG9zaXRpb25zLnB1c2goaSArIDIpO1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIGkrKztcbiAgfSAvLyBJZiBubyBFbXVsYXRpb24gUHJldmVudGlvbiBCeXRlcyB3ZXJlIGZvdW5kIGp1c3QgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAvLyBhcnJheVxuXG5cbiAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH0gLy8gQ3JlYXRlIGEgbmV3IGFycmF5IHRvIGhvbGQgdGhlIE5BTCB1bml0IGRhdGFcblxuXG4gIHZhciBuZXdMZW5ndGggPSBieXRlcy5sZW5ndGggLSBwb3NpdGlvbnMubGVuZ3RoO1xuICB2YXIgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5ld0xlbmd0aDsgc291cmNlSW5kZXgrKywgaSsrKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4ID09PSBwb3NpdGlvbnNbMF0pIHtcbiAgICAgIC8vIFNraXAgdGhpcyBieXRlXG4gICAgICBzb3VyY2VJbmRleCsrOyAvLyBSZW1vdmUgdGhpcyBwb3NpdGlvbiBpbmRleFxuXG4gICAgICBwb3NpdGlvbnMuc2hpZnQoKTtcbiAgICB9XG5cbiAgICBuZXdEYXRhW2ldID0gYnl0ZXNbc291cmNlSW5kZXhdO1xuICB9XG5cbiAgcmV0dXJuIG5ld0RhdGE7XG59O1xuZXhwb3J0IHZhciBmaW5kTmFsID0gZnVuY3Rpb24gZmluZE5hbChieXRlcywgZGF0YVR5cGUsIHR5cGVzLCBuYWxMaW1pdCkge1xuICBpZiAobmFsTGltaXQgPT09IHZvaWQgMCkge1xuICAgIG5hbExpbWl0ID0gSW5maW5pdHk7XG4gIH1cblxuICBieXRlcyA9IHRvVWludDgoYnl0ZXMpO1xuICB0eXBlcyA9IFtdLmNvbmNhdCh0eXBlcyk7XG4gIHZhciBpID0gMDtcbiAgdmFyIG5hbFN0YXJ0O1xuICB2YXIgbmFsc0ZvdW5kID0gMDsgLy8ga2VlcCBzZWFyY2hpbmcgdW50aWw6XG4gIC8vIHdlIHJlYWNoIHRoZSBlbmQgb2YgYnl0ZXNcbiAgLy8gd2UgcmVhY2ggdGhlIG1heGltdW0gbnVtYmVyIG9mIG5hbHMgdGhleSB3YW50IHRvIHNlYWNoXG4gIC8vIE5PVEU6IHRoYXQgd2UgZGlzcmVnYXJkIG5hbExpbWl0IHdoZW4gd2UgaGF2ZSBmb3VuZCB0aGUgc3RhcnRcbiAgLy8gb2YgdGhlIG5hbCB3ZSB3YW50IHNvIHRoYXQgd2UgY2FuIGZpbmQgdGhlIGVuZCBvZiB0aGUgbmFsIHdlIHdhbnQuXG5cbiAgd2hpbGUgKGkgPCBieXRlcy5sZW5ndGggJiYgKG5hbHNGb3VuZCA8IG5hbExpbWl0IHx8IG5hbFN0YXJ0KSkge1xuICAgIHZhciBuYWxPZmZzZXQgPSB2b2lkIDA7XG5cbiAgICBpZiAoYnl0ZXNNYXRjaChieXRlcy5zdWJhcnJheShpKSwgTkFMX1RZUEVfT05FKSkge1xuICAgICAgbmFsT2Zmc2V0ID0gNDtcbiAgICB9IGVsc2UgaWYgKGJ5dGVzTWF0Y2goYnl0ZXMuc3ViYXJyYXkoaSksIE5BTF9UWVBFX1RXTykpIHtcbiAgICAgIG5hbE9mZnNldCA9IDM7XG4gICAgfSAvLyB3ZSBhcmUgdW5zeW5jZWQsXG4gICAgLy8gZmluZCB0aGUgbmV4dCBuYWwgdW5pdFxuXG5cbiAgICBpZiAoIW5hbE9mZnNldCkge1xuICAgICAgaSsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbmFsc0ZvdW5kKys7XG5cbiAgICBpZiAobmFsU3RhcnQpIHtcbiAgICAgIHJldHVybiBkaXNjYXJkRW11bGF0aW9uUHJldmVudGlvbkJ5dGVzKGJ5dGVzLnN1YmFycmF5KG5hbFN0YXJ0LCBpKSk7XG4gICAgfVxuXG4gICAgdmFyIG5hbFR5cGUgPSB2b2lkIDA7XG5cbiAgICBpZiAoZGF0YVR5cGUgPT09ICdoMjY0Jykge1xuICAgICAgbmFsVHlwZSA9IGJ5dGVzW2kgKyBuYWxPZmZzZXRdICYgMHgxZjtcbiAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnaDI2NScpIHtcbiAgICAgIG5hbFR5cGUgPSBieXRlc1tpICsgbmFsT2Zmc2V0XSA+PiAxICYgMHgzZjtcbiAgICB9XG5cbiAgICBpZiAodHlwZXMuaW5kZXhPZihuYWxUeXBlKSAhPT0gLTEpIHtcbiAgICAgIG5hbFN0YXJ0ID0gaSArIG5hbE9mZnNldDtcbiAgICB9IC8vIG5hbCBoZWFkZXIgaXMgMSBsZW5ndGggZm9yIGgyNjQsIGFuZCAyIGZvciBoMjY1XG5cblxuICAgIGkgKz0gbmFsT2Zmc2V0ICsgKGRhdGFUeXBlID09PSAnaDI2NCcgPyAxIDogMik7XG4gIH1cblxuICByZXR1cm4gYnl0ZXMuc3ViYXJyYXkoMCwgMCk7XG59O1xuZXhwb3J0IHZhciBmaW5kSDI2NE5hbCA9IGZ1bmN0aW9uIGZpbmRIMjY0TmFsKGJ5dGVzLCB0eXBlLCBuYWxMaW1pdCkge1xuICByZXR1cm4gZmluZE5hbChieXRlcywgJ2gyNjQnLCB0eXBlLCBuYWxMaW1pdCk7XG59O1xuZXhwb3J0IHZhciBmaW5kSDI2NU5hbCA9IGZ1bmN0aW9uIGZpbmRIMjY1TmFsKGJ5dGVzLCB0eXBlLCBuYWxMaW1pdCkge1xuICByZXR1cm4gZmluZE5hbChieXRlcywgJ2gyNjUnLCB0eXBlLCBuYWxMaW1pdCk7XG59OyJdLCJuYW1lcyI6WyJieXRlc01hdGNoIiwidG9VaW50OCIsIk5BTF9UWVBFX09ORSIsIk5BTF9UWVBFX1RXTyIsIkVNVUxBVElPTl9QUkVWRU5USU9OIiwiZGlzY2FyZEVtdWxhdGlvblByZXZlbnRpb25CeXRlcyIsImJ5dGVzIiwicG9zaXRpb25zIiwiaSIsImxlbmd0aCIsInN1YmFycmF5IiwicHVzaCIsIm5ld0xlbmd0aCIsIm5ld0RhdGEiLCJVaW50OEFycmF5Iiwic291cmNlSW5kZXgiLCJzaGlmdCIsImZpbmROYWwiLCJkYXRhVHlwZSIsInR5cGVzIiwibmFsTGltaXQiLCJJbmZpbml0eSIsImNvbmNhdCIsIm5hbFN0YXJ0IiwibmFsc0ZvdW5kIiwibmFsT2Zmc2V0IiwibmFsVHlwZSIsImluZGV4T2YiLCJmaW5kSDI2NE5hbCIsInR5cGUiLCJmaW5kSDI2NU5hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/nal-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/opus-helpers.js":
/*!*************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/opus-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPUS_HEAD: () => (/* binding */ OPUS_HEAD),\n/* harmony export */   parseOpusHead: () => (/* binding */ parseOpusHead),\n/* harmony export */   setOpusHead: () => (/* binding */ setOpusHead)\n/* harmony export */ });\nvar OPUS_HEAD = new Uint8Array([\n    0x4f,\n    0x70,\n    0x75,\n    0x73,\n    0x48,\n    0x65,\n    0x61,\n    0x64\n]); // https://wiki.xiph.org/OggOpus\n// https://vfrmaniac.fushizen.eu/contents/opus_in_isobmff.html\n// https://opus-codec.org/docs/opusfile_api-0.7/structOpusHead.html\nvar parseOpusHead = function parseOpusHead(bytes) {\n    var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var version = view.getUint8(0); // version 0, from mp4, does not use littleEndian.\n    var littleEndian = version !== 0;\n    var config = {\n        version: version,\n        channels: view.getUint8(1),\n        preSkip: view.getUint16(2, littleEndian),\n        sampleRate: view.getUint32(4, littleEndian),\n        outputGain: view.getUint16(8, littleEndian),\n        channelMappingFamily: view.getUint8(10)\n    };\n    if (config.channelMappingFamily > 0 && bytes.length > 10) {\n        config.streamCount = view.getUint8(11);\n        config.twoChannelStreamCount = view.getUint8(12);\n        config.channelMapping = [];\n        for(var c = 0; c < config.channels; c++){\n            config.channelMapping.push(view.getUint8(13 + c));\n        }\n    }\n    return config;\n};\nvar setOpusHead = function setOpusHead(config) {\n    var size = config.channelMappingFamily <= 0 ? 11 : 12 + config.channels;\n    var view = new DataView(new ArrayBuffer(size));\n    var littleEndian = config.version !== 0;\n    view.setUint8(0, config.version);\n    view.setUint8(1, config.channels);\n    view.setUint16(2, config.preSkip, littleEndian);\n    view.setUint32(4, config.sampleRate, littleEndian);\n    view.setUint16(8, config.outputGain, littleEndian);\n    view.setUint8(10, config.channelMappingFamily);\n    if (config.channelMappingFamily > 0) {\n        view.setUint8(11, config.streamCount);\n        config.channelMapping.foreach(function(cm, i) {\n            view.setUint8(12 + i, cm);\n        });\n    }\n    return new Uint8Array(view.buffer);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9vcHVzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBSUEsWUFBWSxJQUFJQyxXQUFXO0lBQ3RDO0lBQU07SUFBTTtJQUFNO0lBQ2xCO0lBQU07SUFBTTtJQUFNO0NBQUssRUFBRSxDQUFDLGdDQUFnQztBQUMxRCw4REFBOEQ7QUFDOUQsbUVBQW1FO0FBRTVELElBQUlDLGdCQUFnQixTQUFTQSxjQUFjQyxLQUFLO0lBQ3JELElBQUlDLE9BQU8sSUFBSUMsU0FBU0YsTUFBTUcsTUFBTSxFQUFFSCxNQUFNSSxVQUFVLEVBQUVKLE1BQU1LLFVBQVU7SUFDeEUsSUFBSUMsVUFBVUwsS0FBS00sUUFBUSxDQUFDLElBQUksa0RBQWtEO0lBRWxGLElBQUlDLGVBQWVGLFlBQVk7SUFDL0IsSUFBSUcsU0FBUztRQUNYSCxTQUFTQTtRQUNUSSxVQUFVVCxLQUFLTSxRQUFRLENBQUM7UUFDeEJJLFNBQVNWLEtBQUtXLFNBQVMsQ0FBQyxHQUFHSjtRQUMzQkssWUFBWVosS0FBS2EsU0FBUyxDQUFDLEdBQUdOO1FBQzlCTyxZQUFZZCxLQUFLVyxTQUFTLENBQUMsR0FBR0o7UUFDOUJRLHNCQUFzQmYsS0FBS00sUUFBUSxDQUFDO0lBQ3RDO0lBRUEsSUFBSUUsT0FBT08sb0JBQW9CLEdBQUcsS0FBS2hCLE1BQU1pQixNQUFNLEdBQUcsSUFBSTtRQUN4RFIsT0FBT1MsV0FBVyxHQUFHakIsS0FBS00sUUFBUSxDQUFDO1FBQ25DRSxPQUFPVSxxQkFBcUIsR0FBR2xCLEtBQUtNLFFBQVEsQ0FBQztRQUM3Q0UsT0FBT1csY0FBYyxHQUFHLEVBQUU7UUFFMUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlaLE9BQU9DLFFBQVEsRUFBRVcsSUFBSztZQUN4Q1osT0FBT1csY0FBYyxDQUFDRSxJQUFJLENBQUNyQixLQUFLTSxRQUFRLENBQUMsS0FBS2M7UUFDaEQ7SUFDRjtJQUVBLE9BQU9aO0FBQ1QsRUFBRTtBQUNLLElBQUljLGNBQWMsU0FBU0EsWUFBWWQsTUFBTTtJQUNsRCxJQUFJZSxPQUFPZixPQUFPTyxvQkFBb0IsSUFBSSxJQUFJLEtBQUssS0FBS1AsT0FBT0MsUUFBUTtJQUN2RSxJQUFJVCxPQUFPLElBQUlDLFNBQVMsSUFBSXVCLFlBQVlEO0lBQ3hDLElBQUloQixlQUFlQyxPQUFPSCxPQUFPLEtBQUs7SUFDdENMLEtBQUt5QixRQUFRLENBQUMsR0FBR2pCLE9BQU9ILE9BQU87SUFDL0JMLEtBQUt5QixRQUFRLENBQUMsR0FBR2pCLE9BQU9DLFFBQVE7SUFDaENULEtBQUswQixTQUFTLENBQUMsR0FBR2xCLE9BQU9FLE9BQU8sRUFBRUg7SUFDbENQLEtBQUsyQixTQUFTLENBQUMsR0FBR25CLE9BQU9JLFVBQVUsRUFBRUw7SUFDckNQLEtBQUswQixTQUFTLENBQUMsR0FBR2xCLE9BQU9NLFVBQVUsRUFBRVA7SUFDckNQLEtBQUt5QixRQUFRLENBQUMsSUFBSWpCLE9BQU9PLG9CQUFvQjtJQUU3QyxJQUFJUCxPQUFPTyxvQkFBb0IsR0FBRyxHQUFHO1FBQ25DZixLQUFLeUIsUUFBUSxDQUFDLElBQUlqQixPQUFPUyxXQUFXO1FBQ3BDVCxPQUFPVyxjQUFjLENBQUNTLE9BQU8sQ0FBQyxTQUFVQyxFQUFFLEVBQUVDLENBQUM7WUFDM0M5QixLQUFLeUIsUUFBUSxDQUFDLEtBQUtLLEdBQUdEO1FBQ3hCO0lBQ0Y7SUFFQSxPQUFPLElBQUloQyxXQUFXRyxLQUFLRSxNQUFNO0FBQ25DLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvQHZpZGVvanMvdmhzLXV0aWxzL2VzL29wdXMtaGVscGVycy5qcz8wMTA4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgT1BVU19IRUFEID0gbmV3IFVpbnQ4QXJyYXkoWy8vIE8sIHAsIHUsIHNcbjB4NGYsIDB4NzAsIDB4NzUsIDB4NzMsIC8vIEgsIGUsIGEsIGRcbjB4NDgsIDB4NjUsIDB4NjEsIDB4NjRdKTsgLy8gaHR0cHM6Ly93aWtpLnhpcGgub3JnL09nZ09wdXNcbi8vIGh0dHBzOi8vdmZybWFuaWFjLmZ1c2hpemVuLmV1L2NvbnRlbnRzL29wdXNfaW5faXNvYm1mZi5odG1sXG4vLyBodHRwczovL29wdXMtY29kZWMub3JnL2RvY3Mvb3B1c2ZpbGVfYXBpLTAuNy9zdHJ1Y3RPcHVzSGVhZC5odG1sXG5cbmV4cG9ydCB2YXIgcGFyc2VPcHVzSGVhZCA9IGZ1bmN0aW9uIHBhcnNlT3B1c0hlYWQoYnl0ZXMpIHtcbiAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyLCBieXRlcy5ieXRlT2Zmc2V0LCBieXRlcy5ieXRlTGVuZ3RoKTtcbiAgdmFyIHZlcnNpb24gPSB2aWV3LmdldFVpbnQ4KDApOyAvLyB2ZXJzaW9uIDAsIGZyb20gbXA0LCBkb2VzIG5vdCB1c2UgbGl0dGxlRW5kaWFuLlxuXG4gIHZhciBsaXR0bGVFbmRpYW4gPSB2ZXJzaW9uICE9PSAwO1xuICB2YXIgY29uZmlnID0ge1xuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgY2hhbm5lbHM6IHZpZXcuZ2V0VWludDgoMSksXG4gICAgcHJlU2tpcDogdmlldy5nZXRVaW50MTYoMiwgbGl0dGxlRW5kaWFuKSxcbiAgICBzYW1wbGVSYXRlOiB2aWV3LmdldFVpbnQzMig0LCBsaXR0bGVFbmRpYW4pLFxuICAgIG91dHB1dEdhaW46IHZpZXcuZ2V0VWludDE2KDgsIGxpdHRsZUVuZGlhbiksXG4gICAgY2hhbm5lbE1hcHBpbmdGYW1pbHk6IHZpZXcuZ2V0VWludDgoMTApXG4gIH07XG5cbiAgaWYgKGNvbmZpZy5jaGFubmVsTWFwcGluZ0ZhbWlseSA+IDAgJiYgYnl0ZXMubGVuZ3RoID4gMTApIHtcbiAgICBjb25maWcuc3RyZWFtQ291bnQgPSB2aWV3LmdldFVpbnQ4KDExKTtcbiAgICBjb25maWcudHdvQ2hhbm5lbFN0cmVhbUNvdW50ID0gdmlldy5nZXRVaW50OCgxMik7XG4gICAgY29uZmlnLmNoYW5uZWxNYXBwaW5nID0gW107XG5cbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbmZpZy5jaGFubmVsczsgYysrKSB7XG4gICAgICBjb25maWcuY2hhbm5lbE1hcHBpbmcucHVzaCh2aWV3LmdldFVpbnQ4KDEzICsgYykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25maWc7XG59O1xuZXhwb3J0IHZhciBzZXRPcHVzSGVhZCA9IGZ1bmN0aW9uIHNldE9wdXNIZWFkKGNvbmZpZykge1xuICB2YXIgc2l6ZSA9IGNvbmZpZy5jaGFubmVsTWFwcGluZ0ZhbWlseSA8PSAwID8gMTEgOiAxMiArIGNvbmZpZy5jaGFubmVscztcbiAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKHNpemUpKTtcbiAgdmFyIGxpdHRsZUVuZGlhbiA9IGNvbmZpZy52ZXJzaW9uICE9PSAwO1xuICB2aWV3LnNldFVpbnQ4KDAsIGNvbmZpZy52ZXJzaW9uKTtcbiAgdmlldy5zZXRVaW50OCgxLCBjb25maWcuY2hhbm5lbHMpO1xuICB2aWV3LnNldFVpbnQxNigyLCBjb25maWcucHJlU2tpcCwgbGl0dGxlRW5kaWFuKTtcbiAgdmlldy5zZXRVaW50MzIoNCwgY29uZmlnLnNhbXBsZVJhdGUsIGxpdHRsZUVuZGlhbik7XG4gIHZpZXcuc2V0VWludDE2KDgsIGNvbmZpZy5vdXRwdXRHYWluLCBsaXR0bGVFbmRpYW4pO1xuICB2aWV3LnNldFVpbnQ4KDEwLCBjb25maWcuY2hhbm5lbE1hcHBpbmdGYW1pbHkpO1xuXG4gIGlmIChjb25maWcuY2hhbm5lbE1hcHBpbmdGYW1pbHkgPiAwKSB7XG4gICAgdmlldy5zZXRVaW50OCgxMSwgY29uZmlnLnN0cmVhbUNvdW50KTtcbiAgICBjb25maWcuY2hhbm5lbE1hcHBpbmcuZm9yZWFjaChmdW5jdGlvbiAoY20sIGkpIHtcbiAgICAgIHZpZXcuc2V0VWludDgoMTIgKyBpLCBjbSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodmlldy5idWZmZXIpO1xufTsiXSwibmFtZXMiOlsiT1BVU19IRUFEIiwiVWludDhBcnJheSIsInBhcnNlT3B1c0hlYWQiLCJieXRlcyIsInZpZXciLCJEYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwidmVyc2lvbiIsImdldFVpbnQ4IiwibGl0dGxlRW5kaWFuIiwiY29uZmlnIiwiY2hhbm5lbHMiLCJwcmVTa2lwIiwiZ2V0VWludDE2Iiwic2FtcGxlUmF0ZSIsImdldFVpbnQzMiIsIm91dHB1dEdhaW4iLCJjaGFubmVsTWFwcGluZ0ZhbWlseSIsImxlbmd0aCIsInN0cmVhbUNvdW50IiwidHdvQ2hhbm5lbFN0cmVhbUNvdW50IiwiY2hhbm5lbE1hcHBpbmciLCJjIiwicHVzaCIsInNldE9wdXNIZWFkIiwic2l6ZSIsIkFycmF5QnVmZmVyIiwic2V0VWludDgiLCJzZXRVaW50MTYiLCJzZXRVaW50MzIiLCJmb3JlYWNoIiwiY20iLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/opus-helpers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/resolve-url.js":
/*!************************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/resolve-url.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! url-toolkit */ \"(ssr)/../node_modules/url-toolkit/src/url-toolkit.js\");\n/* harmony import */ var url_toolkit__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(url_toolkit__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\n/* harmony import */ var global_window__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(global_window__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar DEFAULT_LOCATION = \"http://example.com\";\nvar resolveUrl = function resolveUrl(baseUrl, relativeUrl) {\n    // return early if we don't need to resolve\n    if (/^[a-z]+:/i.test(relativeUrl)) {\n        return relativeUrl;\n    } // if baseUrl is a data URI, ignore it and resolve everything relative to window.location\n    if (/^data:/.test(baseUrl)) {\n        baseUrl = (global_window__WEBPACK_IMPORTED_MODULE_1___default().location) && (global_window__WEBPACK_IMPORTED_MODULE_1___default().location).href || \"\";\n    } // IE11 supports URL but not the URL constructor\n    // feature detect the behavior we want\n    var nativeURL = typeof (global_window__WEBPACK_IMPORTED_MODULE_1___default().URL) === \"function\";\n    var protocolLess = /^\\/\\//.test(baseUrl); // remove location if window.location isn't available (i.e. we're in node)\n    // and if baseUrl isn't an absolute url\n    var removeLocation = !(global_window__WEBPACK_IMPORTED_MODULE_1___default().location) && !/\\/\\//i.test(baseUrl); // if the base URL is relative then combine with the current location\n    if (nativeURL) {\n        baseUrl = new (global_window__WEBPACK_IMPORTED_MODULE_1___default().URL)(baseUrl, (global_window__WEBPACK_IMPORTED_MODULE_1___default().location) || DEFAULT_LOCATION);\n    } else if (!/\\/\\//i.test(baseUrl)) {\n        baseUrl = url_toolkit__WEBPACK_IMPORTED_MODULE_0___default().buildAbsoluteURL((global_window__WEBPACK_IMPORTED_MODULE_1___default().location) && (global_window__WEBPACK_IMPORTED_MODULE_1___default().location).href || \"\", baseUrl);\n    }\n    if (nativeURL) {\n        var newUrl = new URL(relativeUrl, baseUrl); // if we're a protocol-less url, remove the protocol\n        // and if we're location-less, remove the location\n        // otherwise, return the url unmodified\n        if (removeLocation) {\n            return newUrl.href.slice(DEFAULT_LOCATION.length);\n        } else if (protocolLess) {\n            return newUrl.href.slice(newUrl.protocol.length);\n        }\n        return newUrl.href;\n    }\n    return url_toolkit__WEBPACK_IMPORTED_MODULE_0___default().buildAbsoluteURL(baseUrl, relativeUrl);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolveUrl);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9yZXNvbHZlLXVybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUNGO0FBQ25DLElBQUlFLG1CQUFtQjtBQUV2QixJQUFJQyxhQUFhLFNBQVNBLFdBQVdDLE9BQU8sRUFBRUMsV0FBVztJQUN2RCwyQ0FBMkM7SUFDM0MsSUFBSSxZQUFZQyxJQUFJLENBQUNELGNBQWM7UUFDakMsT0FBT0E7SUFDVCxFQUFFLHlGQUF5RjtJQUczRixJQUFJLFNBQVNDLElBQUksQ0FBQ0YsVUFBVTtRQUMxQkEsVUFBVUgsK0RBQWUsSUFBSUEsK0RBQWUsQ0FBQ08sSUFBSSxJQUFJO0lBQ3ZELEVBQUUsZ0RBQWdEO0lBQ2xELHNDQUFzQztJQUd0QyxJQUFJQyxZQUFZLE9BQU9SLDBEQUFVLEtBQUs7SUFDdEMsSUFBSVUsZUFBZSxRQUFRTCxJQUFJLENBQUNGLFVBQVUsMEVBQTBFO0lBQ3BILHVDQUF1QztJQUV2QyxJQUFJUSxpQkFBaUIsQ0FBQ1gsK0RBQWUsSUFBSSxDQUFDLFFBQVFLLElBQUksQ0FBQ0YsVUFBVSxxRUFBcUU7SUFFdEksSUFBSUssV0FBVztRQUNiTCxVQUFVLElBQUlILDBEQUFVLENBQUNHLFNBQVNILCtEQUFlLElBQUlDO0lBQ3ZELE9BQU8sSUFBSSxDQUFDLFFBQVFJLElBQUksQ0FBQ0YsVUFBVTtRQUNqQ0EsVUFBVUosbUVBQTJCLENBQUNDLCtEQUFlLElBQUlBLCtEQUFlLENBQUNPLElBQUksSUFBSSxJQUFJSjtJQUN2RjtJQUVBLElBQUlLLFdBQVc7UUFDYixJQUFJSyxTQUFTLElBQUlKLElBQUlMLGFBQWFELFVBQVUsb0RBQW9EO1FBQ2hHLGtEQUFrRDtRQUNsRCx1Q0FBdUM7UUFFdkMsSUFBSVEsZ0JBQWdCO1lBQ2xCLE9BQU9FLE9BQU9OLElBQUksQ0FBQ08sS0FBSyxDQUFDYixpQkFBaUJjLE1BQU07UUFDbEQsT0FBTyxJQUFJTCxjQUFjO1lBQ3ZCLE9BQU9HLE9BQU9OLElBQUksQ0FBQ08sS0FBSyxDQUFDRCxPQUFPRyxRQUFRLENBQUNELE1BQU07UUFDakQ7UUFFQSxPQUFPRixPQUFPTixJQUFJO0lBQ3BCO0lBRUEsT0FBT1IsbUVBQTJCLENBQUNJLFNBQVNDO0FBQzlDO0FBRUEsaUVBQWVGLFVBQVVBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvQHZpZGVvanMvdmhzLXV0aWxzL2VzL3Jlc29sdmUtdXJsLmpzPzk4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVSTFRvb2xraXQgZnJvbSAndXJsLXRvb2xraXQnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICdnbG9iYWwvd2luZG93JztcbnZhciBERUZBVUxUX0xPQ0FUSU9OID0gJ2h0dHA6Ly9leGFtcGxlLmNvbSc7XG5cbnZhciByZXNvbHZlVXJsID0gZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlVXJsLCByZWxhdGl2ZVVybCkge1xuICAvLyByZXR1cm4gZWFybHkgaWYgd2UgZG9uJ3QgbmVlZCB0byByZXNvbHZlXG4gIGlmICgvXlthLXpdKzovaS50ZXN0KHJlbGF0aXZlVXJsKSkge1xuICAgIHJldHVybiByZWxhdGl2ZVVybDtcbiAgfSAvLyBpZiBiYXNlVXJsIGlzIGEgZGF0YSBVUkksIGlnbm9yZSBpdCBhbmQgcmVzb2x2ZSBldmVyeXRoaW5nIHJlbGF0aXZlIHRvIHdpbmRvdy5sb2NhdGlvblxuXG5cbiAgaWYgKC9eZGF0YTovLnRlc3QoYmFzZVVybCkpIHtcbiAgICBiYXNlVXJsID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5ocmVmIHx8ICcnO1xuICB9IC8vIElFMTEgc3VwcG9ydHMgVVJMIGJ1dCBub3QgdGhlIFVSTCBjb25zdHJ1Y3RvclxuICAvLyBmZWF0dXJlIGRldGVjdCB0aGUgYmVoYXZpb3Igd2Ugd2FudFxuXG5cbiAgdmFyIG5hdGl2ZVVSTCA9IHR5cGVvZiB3aW5kb3cuVVJMID09PSAnZnVuY3Rpb24nO1xuICB2YXIgcHJvdG9jb2xMZXNzID0gL15cXC9cXC8vLnRlc3QoYmFzZVVybCk7IC8vIHJlbW92ZSBsb2NhdGlvbiBpZiB3aW5kb3cubG9jYXRpb24gaXNuJ3QgYXZhaWxhYmxlIChpLmUuIHdlJ3JlIGluIG5vZGUpXG4gIC8vIGFuZCBpZiBiYXNlVXJsIGlzbid0IGFuIGFic29sdXRlIHVybFxuXG4gIHZhciByZW1vdmVMb2NhdGlvbiA9ICF3aW5kb3cubG9jYXRpb24gJiYgIS9cXC9cXC8vaS50ZXN0KGJhc2VVcmwpOyAvLyBpZiB0aGUgYmFzZSBVUkwgaXMgcmVsYXRpdmUgdGhlbiBjb21iaW5lIHdpdGggdGhlIGN1cnJlbnQgbG9jYXRpb25cblxuICBpZiAobmF0aXZlVVJMKSB7XG4gICAgYmFzZVVybCA9IG5ldyB3aW5kb3cuVVJMKGJhc2VVcmwsIHdpbmRvdy5sb2NhdGlvbiB8fCBERUZBVUxUX0xPQ0FUSU9OKTtcbiAgfSBlbHNlIGlmICghL1xcL1xcLy9pLnRlc3QoYmFzZVVybCkpIHtcbiAgICBiYXNlVXJsID0gVVJMVG9vbGtpdC5idWlsZEFic29sdXRlVVJMKHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnJywgYmFzZVVybCk7XG4gIH1cblxuICBpZiAobmF0aXZlVVJMKSB7XG4gICAgdmFyIG5ld1VybCA9IG5ldyBVUkwocmVsYXRpdmVVcmwsIGJhc2VVcmwpOyAvLyBpZiB3ZSdyZSBhIHByb3RvY29sLWxlc3MgdXJsLCByZW1vdmUgdGhlIHByb3RvY29sXG4gICAgLy8gYW5kIGlmIHdlJ3JlIGxvY2F0aW9uLWxlc3MsIHJlbW92ZSB0aGUgbG9jYXRpb25cbiAgICAvLyBvdGhlcndpc2UsIHJldHVybiB0aGUgdXJsIHVubW9kaWZpZWRcblxuICAgIGlmIChyZW1vdmVMb2NhdGlvbikge1xuICAgICAgcmV0dXJuIG5ld1VybC5ocmVmLnNsaWNlKERFRkFVTFRfTE9DQVRJT04ubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKHByb3RvY29sTGVzcykge1xuICAgICAgcmV0dXJuIG5ld1VybC5ocmVmLnNsaWNlKG5ld1VybC5wcm90b2NvbC5sZW5ndGgpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdVcmwuaHJlZjtcbiAgfVxuXG4gIHJldHVybiBVUkxUb29sa2l0LmJ1aWxkQWJzb2x1dGVVUkwoYmFzZVVybCwgcmVsYXRpdmVVcmwpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVVybDsiXSwibmFtZXMiOlsiVVJMVG9vbGtpdCIsIndpbmRvdyIsIkRFRkFVTFRfTE9DQVRJT04iLCJyZXNvbHZlVXJsIiwiYmFzZVVybCIsInJlbGF0aXZlVXJsIiwidGVzdCIsImxvY2F0aW9uIiwiaHJlZiIsIm5hdGl2ZVVSTCIsIlVSTCIsInByb3RvY29sTGVzcyIsInJlbW92ZUxvY2F0aW9uIiwiYnVpbGRBYnNvbHV0ZVVSTCIsIm5ld1VybCIsInNsaWNlIiwibGVuZ3RoIiwicHJvdG9jb2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/resolve-url.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/vhs-utils/es/stream.js":
/*!*******************************************************!*\
  !*** ../node_modules/@videojs/vhs-utils/es/stream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Stream)\n/* harmony export */ });\n/**\n * @file stream.js\n */ /**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */ var Stream = /*#__PURE__*/ function() {\n    function Stream() {\n        this.listeners = {};\n    }\n    /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */ var _proto = Stream.prototype;\n    _proto.on = function on(type, listener) {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    } /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */ ;\n    _proto.off = function off(type, listener) {\n        if (!this.listeners[type]) {\n            return false;\n        }\n        var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n        // In Video.js we slice listener functions\n        // on trigger so that it does not mess up the order\n        // while we loop through.\n        //\n        // Here we slice on off so that the loop in trigger\n        // can continue using it's old reference to loop without\n        // messing up the order.\n        this.listeners[type] = this.listeners[type].slice(0);\n        this.listeners[type].splice(index, 1);\n        return index > -1;\n    } /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */ ;\n    _proto.trigger = function trigger(type) {\n        var callbacks = this.listeners[type];\n        if (!callbacks) {\n            return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n        if (arguments.length === 2) {\n            var length = callbacks.length;\n            for(var i = 0; i < length; ++i){\n                callbacks[i].call(this, arguments[1]);\n            }\n        } else {\n            var args = Array.prototype.slice.call(arguments, 1);\n            var _length = callbacks.length;\n            for(var _i = 0; _i < _length; ++_i){\n                callbacks[_i].apply(this, args);\n            }\n        }\n    } /**\n   * Destroys the stream and cleans up.\n   */ ;\n    _proto.dispose = function dispose() {\n        this.listeners = {};\n    } /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */ ;\n    _proto.pipe = function pipe(destination) {\n        this.on(\"data\", function(data) {\n            destination.push(data);\n        });\n    };\n    return Stream;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9zdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBRUQ7Ozs7Q0FJQyxHQUNELElBQUlBLFNBQVMsV0FBVyxHQUFFO0lBQ3hCLFNBQVNBO1FBQ1AsSUFBSSxDQUFDQyxTQUFTLEdBQUcsQ0FBQztJQUNwQjtJQUNBOzs7Ozs7R0FNQyxHQUdELElBQUlDLFNBQVNGLE9BQU9HLFNBQVM7SUFFN0JELE9BQU9FLEVBQUUsR0FBRyxTQUFTQSxHQUFHQyxJQUFJLEVBQUVDLFFBQVE7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQ0wsU0FBUyxDQUFDSSxLQUFLLEVBQUU7WUFDekIsSUFBSSxDQUFDSixTQUFTLENBQUNJLEtBQUssR0FBRyxFQUFFO1FBQzNCO1FBRUEsSUFBSSxDQUFDSixTQUFTLENBQUNJLEtBQUssQ0FBQ0UsSUFBSSxDQUFDRDtJQUM1QixFQUNBOzs7Ozs7O0dBT0M7SUFHREosT0FBT00sR0FBRyxHQUFHLFNBQVNBLElBQUlILElBQUksRUFBRUMsUUFBUTtRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDTCxTQUFTLENBQUNJLEtBQUssRUFBRTtZQUN6QixPQUFPO1FBQ1Q7UUFFQSxJQUFJSSxRQUFRLElBQUksQ0FBQ1IsU0FBUyxDQUFDSSxLQUFLLENBQUNLLE9BQU8sQ0FBQ0osV0FBVyx5QkFBeUI7UUFDN0UsMENBQTBDO1FBQzFDLG1EQUFtRDtRQUNuRCx5QkFBeUI7UUFDekIsRUFBRTtRQUNGLG1EQUFtRDtRQUNuRCx3REFBd0Q7UUFDeEQsd0JBQXdCO1FBRXhCLElBQUksQ0FBQ0wsU0FBUyxDQUFDSSxLQUFLLEdBQUcsSUFBSSxDQUFDSixTQUFTLENBQUNJLEtBQUssQ0FBQ00sS0FBSyxDQUFDO1FBQ2xELElBQUksQ0FBQ1YsU0FBUyxDQUFDSSxLQUFLLENBQUNPLE1BQU0sQ0FBQ0gsT0FBTztRQUNuQyxPQUFPQSxRQUFRLENBQUM7SUFDbEIsRUFDQTs7Ozs7R0FLQztJQUdEUCxPQUFPVyxPQUFPLEdBQUcsU0FBU0EsUUFBUVIsSUFBSTtRQUNwQyxJQUFJUyxZQUFZLElBQUksQ0FBQ2IsU0FBUyxDQUFDSSxLQUFLO1FBRXBDLElBQUksQ0FBQ1MsV0FBVztZQUNkO1FBQ0YsRUFBRSwyREFBMkQ7UUFDN0Qsc0RBQXNEO1FBQ3RELHdEQUF3RDtRQUN4RCwyQkFBMkI7UUFHM0IsSUFBSUMsVUFBVUMsTUFBTSxLQUFLLEdBQUc7WUFDMUIsSUFBSUEsU0FBU0YsVUFBVUUsTUFBTTtZQUU3QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUSxFQUFFQyxFQUFHO2dCQUMvQkgsU0FBUyxDQUFDRyxFQUFFLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVILFNBQVMsQ0FBQyxFQUFFO1lBQ3RDO1FBQ0YsT0FBTztZQUNMLElBQUlJLE9BQU9DLE1BQU1qQixTQUFTLENBQUNRLEtBQUssQ0FBQ08sSUFBSSxDQUFDSCxXQUFXO1lBQ2pELElBQUlNLFVBQVVQLFVBQVVFLE1BQU07WUFFOUIsSUFBSyxJQUFJTSxLQUFLLEdBQUdBLEtBQUtELFNBQVMsRUFBRUMsR0FBSTtnQkFDbkNSLFNBQVMsQ0FBQ1EsR0FBRyxDQUFDQyxLQUFLLENBQUMsSUFBSSxFQUFFSjtZQUM1QjtRQUNGO0lBQ0YsRUFDQTs7R0FFQztJQUdEakIsT0FBT3NCLE9BQU8sR0FBRyxTQUFTQTtRQUN4QixJQUFJLENBQUN2QixTQUFTLEdBQUcsQ0FBQztJQUNwQixFQUNBOzs7Ozs7O0dBT0M7SUFHREMsT0FBT3VCLElBQUksR0FBRyxTQUFTQSxLQUFLQyxXQUFXO1FBQ3JDLElBQUksQ0FBQ3RCLEVBQUUsQ0FBQyxRQUFRLFNBQVV1QixJQUFJO1lBQzVCRCxZQUFZbkIsSUFBSSxDQUFDb0I7UUFDbkI7SUFDRjtJQUVBLE9BQU8zQjtBQUNUO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJlZXplLW5leHQvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3Zocy11dGlscy9lcy9zdHJlYW0uanM/NzgxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHN0cmVhbS5qc1xuICovXG5cbi8qKlxuICogQSBsaWdodHdlaWdodCByZWFkYWJsZSBzdHJlYW0gaW1wbGVtZW50aW9uIHRoYXQgaGFuZGxlcyBldmVudCBkaXNwYXRjaGluZy5cbiAqXG4gKiBAY2xhc3MgU3RyZWFtXG4gKi9cbnZhciBTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHJlYW0oKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIHRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYW4gZXZlbnQgb2ZcbiAgICogdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHJlYW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5vbiA9IGZ1bmN0aW9uIG9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgbGlzdGVuZXIgZm9yIGEgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyICBhIGZ1bmN0aW9uIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBmb3IgdGhpc1xuICAgKiB0eXBlIG9mIGV2ZW50IHRocm91Z2ggYG9uYFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBpZiB3ZSBjb3VsZCB0dXJuIGl0IG9mZiBvciBub3RcbiAgICovXG4gIDtcblxuICBfcHJvdG8ub2ZmID0gZnVuY3Rpb24gb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IHRoaXMubGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpOyAvLyBUT0RPOiB3aGljaCBpcyBiZXR0ZXI/XG4gICAgLy8gSW4gVmlkZW8uanMgd2Ugc2xpY2UgbGlzdGVuZXIgZnVuY3Rpb25zXG4gICAgLy8gb24gdHJpZ2dlciBzbyB0aGF0IGl0IGRvZXMgbm90IG1lc3MgdXAgdGhlIG9yZGVyXG4gICAgLy8gd2hpbGUgd2UgbG9vcCB0aHJvdWdoLlxuICAgIC8vXG4gICAgLy8gSGVyZSB3ZSBzbGljZSBvbiBvZmYgc28gdGhhdCB0aGUgbG9vcCBpbiB0cmlnZ2VyXG4gICAgLy8gY2FuIGNvbnRpbnVlIHVzaW5nIGl0J3Mgb2xkIHJlZmVyZW5jZSB0byBsb29wIHdpdGhvdXRcbiAgICAvLyBtZXNzaW5nIHVwIHRoZSBvcmRlci5cblxuICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gdGhpcy5saXN0ZW5lcnNbdHlwZV0uc2xpY2UoMCk7XG4gICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gaW5kZXggPiAtMTtcbiAgfVxuICAvKipcbiAgICogVHJpZ2dlciBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb24gdGhpcyBzdHJlYW0uIEFueSBhZGRpdGlvbmFsXG4gICAqIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGFyZSBwYXNzZWQgYXMgcGFyYW1ldGVycyB0byBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHRoZSBldmVudCBuYW1lXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRyaWdnZXIgPSBmdW5jdGlvbiB0cmlnZ2VyKHR5cGUpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG5cbiAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2xpY2luZyB0aGUgYXJndW1lbnRzIG9uIGV2ZXJ5IGludm9jYXRpb24gb2YgdGhpcyBtZXRob2RcbiAgICAvLyBjYW4gYWRkIGEgc2lnbmlmaWNhbnQgYW1vdW50IG9mIG92ZXJoZWFkLiBBdm9pZCB0aGVcbiAgICAvLyBpbnRlcm1lZGlhdGUgb2JqZWN0IGNyZWF0aW9uIGZvciB0aGUgY29tbW9uIGNhc2Ugb2YgYVxuICAgIC8vIHNpbmdsZSBjYWxsYmFjayBhcmd1bWVudFxuXG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdmFyIGxlbmd0aCA9IGNhbGxiYWNrcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2FsbGJhY2tzW2ldLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIF9sZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2xlbmd0aDsgKytfaSkge1xuICAgICAgICBjYWxsYmFja3NbX2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIHN0cmVhbSBhbmQgY2xlYW5zIHVwLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICB9XG4gIC8qKlxuICAgKiBGb3J3YXJkcyBhbGwgYGRhdGFgIGV2ZW50cyBvbiB0aGlzIHN0cmVhbSB0byB0aGUgZGVzdGluYXRpb24gc3RyZWFtLiBUaGVcbiAgICogZGVzdGluYXRpb24gc3RyZWFtIHNob3VsZCBwcm92aWRlIGEgbWV0aG9kIGBwdXNoYCB0byByZWNlaXZlIHRoZSBkYXRhXG4gICAqIGV2ZW50cyBhcyB0aGV5IGFycml2ZS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJlYW19IGRlc3RpbmF0aW9uIHRoZSBzdHJlYW0gdGhhdCB3aWxsIHJlY2VpdmUgYWxsIGBkYXRhYCBldmVudHNcbiAgICogQHNlZSBodHRwOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3JlYWRhYmxlX3BpcGVfZGVzdGluYXRpb25fb3B0aW9uc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5waXBlID0gZnVuY3Rpb24gcGlwZShkZXN0aW5hdGlvbikge1xuICAgIHRoaXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgZGVzdGluYXRpb24ucHVzaChkYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3RyZWFtO1xufSgpO1xuXG5leHBvcnQgeyBTdHJlYW0gYXMgZGVmYXVsdCB9OyJdLCJuYW1lcyI6WyJTdHJlYW0iLCJsaXN0ZW5lcnMiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJvbiIsInR5cGUiLCJsaXN0ZW5lciIsInB1c2giLCJvZmYiLCJpbmRleCIsImluZGV4T2YiLCJzbGljZSIsInNwbGljZSIsInRyaWdnZXIiLCJjYWxsYmFja3MiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpIiwiY2FsbCIsImFyZ3MiLCJBcnJheSIsIl9sZW5ndGgiLCJfaSIsImFwcGx5IiwiZGlzcG9zZSIsInBpcGUiLCJkZXN0aW5hdGlvbiIsImRhdGEiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/vhs-utils/es/stream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/xhr/lib/http-handler.js":
/*!********************************************************!*\
  !*** ../node_modules/@videojs/xhr/lib/http-handler.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar window = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\nvar httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\n    if (decodeResponseBody === void 0) {\n        decodeResponseBody = false;\n    }\n    return function(err, response, responseBody) {\n        // if the XHR failed, return that error\n        if (err) {\n            callback(err);\n            return;\n        } // if the HTTP status code is 4xx or 5xx, the request also failed\n        if (response.statusCode >= 400 && response.statusCode <= 599) {\n            var cause = responseBody;\n            if (decodeResponseBody) {\n                if (window.TextDecoder) {\n                    var charset = getCharset(response.headers && response.headers[\"content-type\"]);\n                    try {\n                        cause = new TextDecoder(charset).decode(responseBody);\n                    } catch (e) {}\n                } else {\n                    cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\n                }\n            }\n            callback({\n                cause: cause\n            });\n            return;\n        } // otherwise, request succeeded\n        callback(null, responseBody);\n    };\n};\nfunction getCharset(contentTypeHeader) {\n    if (contentTypeHeader === void 0) {\n        contentTypeHeader = \"\";\n    }\n    return contentTypeHeader.toLowerCase().split(\";\").reduce(function(charset, contentType) {\n        var _contentType$split = contentType.split(\"=\"), type = _contentType$split[0], value = _contentType$split[1];\n        if (type.trim() === \"charset\") {\n            return value.trim();\n        }\n        return charset;\n    }, \"utf-8\");\n}\nmodule.exports = httpResponseHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B2aWRlb2pzL3hoci9saWIvaHR0cC1oYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckIsSUFBSUMsc0JBQXNCLFNBQVNBLG9CQUFvQkMsUUFBUSxFQUFFQyxrQkFBa0I7SUFDakYsSUFBSUEsdUJBQXVCLEtBQUssR0FBRztRQUNqQ0EscUJBQXFCO0lBQ3ZCO0lBRUEsT0FBTyxTQUFVQyxHQUFHLEVBQUVDLFFBQVEsRUFBRUMsWUFBWTtRQUMxQyx1Q0FBdUM7UUFDdkMsSUFBSUYsS0FBSztZQUNQRixTQUFTRTtZQUNUO1FBQ0YsRUFBRSxpRUFBaUU7UUFHbkUsSUFBSUMsU0FBU0UsVUFBVSxJQUFJLE9BQU9GLFNBQVNFLFVBQVUsSUFBSSxLQUFLO1lBQzVELElBQUlDLFFBQVFGO1lBRVosSUFBSUgsb0JBQW9CO2dCQUN0QixJQUFJSixPQUFPVSxXQUFXLEVBQUU7b0JBQ3RCLElBQUlDLFVBQVVDLFdBQVdOLFNBQVNPLE9BQU8sSUFBSVAsU0FBU08sT0FBTyxDQUFDLGVBQWU7b0JBRTdFLElBQUk7d0JBQ0ZKLFFBQVEsSUFBSUMsWUFBWUMsU0FBU0csTUFBTSxDQUFDUDtvQkFDMUMsRUFBRSxPQUFPUSxHQUFHLENBQUM7Z0JBQ2YsT0FBTztvQkFDTE4sUUFBUU8sT0FBT0MsWUFBWSxDQUFDQyxLQUFLLENBQUMsTUFBTSxJQUFJQyxXQUFXWjtnQkFDekQ7WUFDRjtZQUVBSixTQUFTO2dCQUNQTSxPQUFPQTtZQUNUO1lBQ0E7UUFDRixFQUFFLCtCQUErQjtRQUdqQ04sU0FBUyxNQUFNSTtJQUNqQjtBQUNGO0FBRUEsU0FBU0ssV0FBV1EsaUJBQWlCO0lBQ25DLElBQUlBLHNCQUFzQixLQUFLLEdBQUc7UUFDaENBLG9CQUFvQjtJQUN0QjtJQUVBLE9BQU9BLGtCQUFrQkMsV0FBVyxHQUFHQyxLQUFLLENBQUMsS0FBS0MsTUFBTSxDQUFDLFNBQVVaLE9BQU8sRUFBRWEsV0FBVztRQUNyRixJQUFJQyxxQkFBcUJELFlBQVlGLEtBQUssQ0FBQyxNQUN2Q0ksT0FBT0Qsa0JBQWtCLENBQUMsRUFBRSxFQUM1QkUsUUFBUUYsa0JBQWtCLENBQUMsRUFBRTtRQUVqQyxJQUFJQyxLQUFLRSxJQUFJLE9BQU8sV0FBVztZQUM3QixPQUFPRCxNQUFNQyxJQUFJO1FBQ25CO1FBRUEsT0FBT2pCO0lBQ1QsR0FBRztBQUNMO0FBRUFrQixPQUFPQyxPQUFPLEdBQUc1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9AdmlkZW9qcy94aHIvbGliL2h0dHAtaGFuZGxlci5qcz9mZDRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgd2luZG93ID0gcmVxdWlyZSgnZ2xvYmFsL3dpbmRvdycpO1xuXG52YXIgaHR0cFJlc3BvbnNlSGFuZGxlciA9IGZ1bmN0aW9uIGh0dHBSZXNwb25zZUhhbmRsZXIoY2FsbGJhY2ssIGRlY29kZVJlc3BvbnNlQm9keSkge1xuICBpZiAoZGVjb2RlUmVzcG9uc2VCb2R5ID09PSB2b2lkIDApIHtcbiAgICBkZWNvZGVSZXNwb25zZUJvZHkgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSwgcmVzcG9uc2VCb2R5KSB7XG4gICAgLy8gaWYgdGhlIFhIUiBmYWlsZWQsIHJldHVybiB0aGF0IGVycm9yXG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGlmIHRoZSBIVFRQIHN0YXR1cyBjb2RlIGlzIDR4eCBvciA1eHgsIHRoZSByZXF1ZXN0IGFsc28gZmFpbGVkXG5cblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID49IDQwMCAmJiByZXNwb25zZS5zdGF0dXNDb2RlIDw9IDU5OSkge1xuICAgICAgdmFyIGNhdXNlID0gcmVzcG9uc2VCb2R5O1xuXG4gICAgICBpZiAoZGVjb2RlUmVzcG9uc2VCb2R5KSB7XG4gICAgICAgIGlmICh3aW5kb3cuVGV4dERlY29kZXIpIHtcbiAgICAgICAgICB2YXIgY2hhcnNldCA9IGdldENoYXJzZXQocmVzcG9uc2UuaGVhZGVycyAmJiByZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2F1c2UgPSBuZXcgVGV4dERlY29kZXIoY2hhcnNldCkuZGVjb2RlKHJlc3BvbnNlQm9keSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXVzZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocmVzcG9uc2VCb2R5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBjYXVzZTogY2F1c2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gb3RoZXJ3aXNlLCByZXF1ZXN0IHN1Y2NlZWRlZFxuXG5cbiAgICBjYWxsYmFjayhudWxsLCByZXNwb25zZUJvZHkpO1xuICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0Q2hhcnNldChjb250ZW50VHlwZUhlYWRlcikge1xuICBpZiAoY29udGVudFR5cGVIZWFkZXIgPT09IHZvaWQgMCkge1xuICAgIGNvbnRlbnRUeXBlSGVhZGVyID0gJyc7XG4gIH1cblxuICByZXR1cm4gY29udGVudFR5cGVIZWFkZXIudG9Mb3dlckNhc2UoKS5zcGxpdCgnOycpLnJlZHVjZShmdW5jdGlvbiAoY2hhcnNldCwgY29udGVudFR5cGUpIHtcbiAgICB2YXIgX2NvbnRlbnRUeXBlJHNwbGl0ID0gY29udGVudFR5cGUuc3BsaXQoJz0nKSxcbiAgICAgICAgdHlwZSA9IF9jb250ZW50VHlwZSRzcGxpdFswXSxcbiAgICAgICAgdmFsdWUgPSBfY29udGVudFR5cGUkc3BsaXRbMV07XG5cbiAgICBpZiAodHlwZS50cmltKCkgPT09ICdjaGFyc2V0Jykge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhcnNldDtcbiAgfSwgJ3V0Zi04Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHR0cFJlc3BvbnNlSGFuZGxlcjsiXSwibmFtZXMiOlsid2luZG93IiwicmVxdWlyZSIsImh0dHBSZXNwb25zZUhhbmRsZXIiLCJjYWxsYmFjayIsImRlY29kZVJlc3BvbnNlQm9keSIsImVyciIsInJlc3BvbnNlIiwicmVzcG9uc2VCb2R5Iiwic3RhdHVzQ29kZSIsImNhdXNlIiwiVGV4dERlY29kZXIiLCJjaGFyc2V0IiwiZ2V0Q2hhcnNldCIsImhlYWRlcnMiLCJkZWNvZGUiLCJlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJVaW50OEFycmF5IiwiY29udGVudFR5cGVIZWFkZXIiLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwicmVkdWNlIiwiY29udGVudFR5cGUiLCJfY29udGVudFR5cGUkc3BsaXQiLCJ0eXBlIiwidmFsdWUiLCJ0cmltIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/xhr/lib/http-handler.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@videojs/xhr/lib/index.js":
/*!*************************************************!*\
  !*** ../node_modules/@videojs/xhr/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar window = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\nvar _extends = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/../node_modules/@babel/runtime/helpers/extends.js\");\nvar isFunction = __webpack_require__(/*! is-function */ \"(ssr)/../node_modules/is-function/index.js\");\ncreateXHR.httpHandler = __webpack_require__(/*! ./http-handler.js */ \"(ssr)/../node_modules/@videojs/xhr/lib/http-handler.js\");\n/**\n * @license\n * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>\n * Copyright (c) 2014 David Björklund\n * Available under the MIT license\n * <https://github.com/kesla/parse-headers/blob/master/LICENCE>\n */ var parseHeaders = function parseHeaders(headers) {\n    var result = {};\n    if (!headers) {\n        return result;\n    }\n    headers.trim().split(\"\\n\").forEach(function(row) {\n        var index = row.indexOf(\":\");\n        var key = row.slice(0, index).trim().toLowerCase();\n        var value = row.slice(index + 1).trim();\n        if (typeof result[key] === \"undefined\") {\n            result[key] = value;\n        } else if (Array.isArray(result[key])) {\n            result[key].push(value);\n        } else {\n            result[key] = [\n                result[key],\n                value\n            ];\n        }\n    });\n    return result;\n};\nmodule.exports = createXHR; // Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop;\ncreateXHR.XDomainRequest = \"withCredentials\" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;\nforEachArray([\n    \"get\",\n    \"put\",\n    \"post\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback);\n        options.method = method.toUpperCase();\n        return _createXHR(options);\n    };\n});\nfunction forEachArray(array, iterator) {\n    for(var i = 0; i < array.length; i++){\n        iterator(array[i]);\n    }\n}\nfunction isEmpty(obj) {\n    for(var i in obj){\n        if (obj.hasOwnProperty(i)) return false;\n    }\n    return true;\n}\nfunction initParams(uri, options, callback) {\n    var params = uri;\n    if (isFunction(options)) {\n        callback = options;\n        if (typeof uri === \"string\") {\n            params = {\n                uri: uri\n            };\n        }\n    } else {\n        params = _extends({}, options, {\n            uri: uri\n        });\n    }\n    params.callback = callback;\n    return params;\n}\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback);\n    return _createXHR(options);\n}\nfunction _createXHR(options) {\n    if (typeof options.callback === \"undefined\") {\n        throw new Error(\"callback argument missing\");\n    }\n    var called = false;\n    var callback = function cbOnce(err, response, body) {\n        if (!called) {\n            called = true;\n            options.callback(err, response, body);\n        }\n    };\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0);\n        }\n    }\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined;\n        if (xhr.response) {\n            body = xhr.response;\n        } else {\n            body = xhr.responseText || getXml(xhr);\n        }\n        if (isJson) {\n            try {\n                body = JSON.parse(body);\n            } catch (e) {}\n        }\n        return body;\n    }\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer);\n        if (!(evt instanceof Error)) {\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\"));\n        }\n        evt.statusCode = 0;\n        return callback(evt, failureResponse);\n    } // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return;\n        var status;\n        clearTimeout(timeoutTimer);\n        if (options.useXDR && xhr.status === undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200;\n        } else {\n            status = xhr.status === 1223 ? 204 : xhr.status;\n        }\n        var response = failureResponse;\n        var err = null;\n        if (status !== 0) {\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            };\n            if (xhr.getAllResponseHeaders) {\n                //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders());\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\");\n        }\n        return callback(err, response, response.body);\n    }\n    var xhr = options.xhr || null;\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest();\n        } else {\n            xhr = new createXHR.XMLHttpRequest();\n        }\n    }\n    var key;\n    var aborted;\n    var uri = xhr.url = options.uri || options.url;\n    var method = xhr.method = options.method || \"GET\";\n    var body = options.body || options.data;\n    var headers = xhr.headers = options.headers || {};\n    var sync = !!options.sync;\n    var isJson = false;\n    var timeoutTimer;\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    };\n    if (\"json\" in options && options.json !== false) {\n        isJson = true;\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\"); //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\"); //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json);\n        }\n    }\n    xhr.onreadystatechange = readystatechange;\n    xhr.onload = loadFunc;\n    xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function() {};\n    xhr.onabort = function() {\n        aborted = true;\n    };\n    xhr.ontimeout = errorFunc;\n    xhr.open(method, uri, !sync, options.username, options.password); //has to be after open\n    if (!sync) {\n        xhr.withCredentials = !!options.withCredentials;\n    } // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0) {\n        timeoutTimer = setTimeout(function() {\n            if (aborted) return;\n            aborted = true; //IE9 may still call readystatechange\n            xhr.abort(\"timeout\");\n            var e = new Error(\"XMLHttpRequest timeout\");\n            e.code = \"ETIMEDOUT\";\n            errorFunc(e);\n        }, options.timeout);\n    }\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\");\n    }\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType;\n    }\n    if (\"beforeSend\" in options && typeof options.beforeSend === \"function\") {\n        options.beforeSend(xhr);\n    } // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null);\n    return xhr;\n}\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML;\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\";\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML;\n        }\n    } catch (e) {}\n    return null;\n}\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@videojs/xhr/lib/index.js\n");

/***/ })

};
;