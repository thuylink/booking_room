/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@xmldom";
exports.ids = ["vendor-chunks/@xmldom"];
exports.modules = {

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js":
/*!*********************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/conventions.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\n *\n * Works with anything that has a `length` property and index access properties, including NodeList.\n *\n * @template {unknown} T\n * @param {Array<T> | ({length:number, [number]: T})} list\n * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\n * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\n * \t\t\t\tallows injecting a custom implementation in tests\n * @returns {T | undefined}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\n */ function find(list, predicate, ac) {\n    if (ac === undefined) {\n        ac = Array.prototype;\n    }\n    if (list && typeof ac.find === \"function\") {\n        return ac.find.call(list, predicate);\n    }\n    for(var i = 0; i < list.length; i++){\n        if (Object.prototype.hasOwnProperty.call(list, i)) {\n            var item = list[i];\n            if (predicate.call(undefined, item, i, list)) {\n                return item;\n            }\n        }\n    }\n}\n/**\n * \"Shallow freezes\" an object to render it immutable.\n * Uses `Object.freeze` if available,\n * otherwise the immutability is only in the type.\n *\n * Is used to create \"enum like\" objects.\n *\n * @template T\n * @param {T} object the object to freeze\n * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\n * \t\t\t\tallows to inject custom object constructor for tests\n * @returns {Readonly<T>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */ function freeze(object, oc) {\n    if (oc === undefined) {\n        oc = Object;\n    }\n    return oc && typeof oc.freeze === \"function\" ? oc.freeze(object) : object;\n}\n/**\n * Since we can not rely on `Object.assign` we provide a simplified version\n * that is sufficient for our needs.\n *\n * @param {Object} target\n * @param {Object | null | undefined} source\n *\n * @returns {Object} target\n * @throws TypeError if target is not an object\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\n */ function assign(target, source) {\n    if (target === null || typeof target !== \"object\") {\n        throw new TypeError(\"target is not an object\");\n    }\n    for(var key in source){\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n/**\n * All mime types that are allowed as input to `DOMParser.parseFromString`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\n * @see DOMParser.prototype.parseFromString\n */ var MIME_TYPE = freeze({\n    /**\n\t * `text/html`, the only mime type that triggers treating an XML document as HTML.\n\t *\n\t * @see DOMParser.SupportedType.isHTML\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\n\t */ HTML: \"text/html\",\n    /**\n\t * Helper method to check a mime type if it indicates an HTML document\n\t *\n\t * @param {string} [value]\n\t * @returns {boolean}\n\t *\n\t * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/HTML Wikipedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\n\t * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */ isHTML: function(value) {\n        return value === MIME_TYPE.HTML;\n    },\n    /**\n\t * `application/xml`, the standard mime type for XML documents.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_APPLICATION: \"application/xml\",\n    /**\n\t * `text/html`, an alias for `application/xml`.\n\t *\n\t * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\n\t * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\n\t * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\n\t */ XML_TEXT: \"text/xml\",\n    /**\n\t * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\n\t * but is parsed as an XML document.\n\t *\n\t * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\n\t * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\n\t */ XML_XHTML_APPLICATION: \"application/xhtml+xml\",\n    /**\n\t * `image/svg+xml`,\n\t *\n\t * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\n\t * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\n\t * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\n\t */ XML_SVG_IMAGE: \"image/svg+xml\"\n});\n/**\n * Namespaces that are used in this code base.\n *\n * @see http://www.w3.org/TR/REC-xml-names\n */ var NAMESPACE = freeze({\n    /**\n\t * The XHTML namespace.\n\t *\n\t * @see http://www.w3.org/1999/xhtml\n\t */ HTML: \"http://www.w3.org/1999/xhtml\",\n    /**\n\t * Checks if `uri` equals `NAMESPACE.HTML`.\n\t *\n\t * @param {string} [uri]\n\t *\n\t * @see NAMESPACE.HTML\n\t */ isHTML: function(uri) {\n        return uri === NAMESPACE.HTML;\n    },\n    /**\n\t * The SVG namespace.\n\t *\n\t * @see http://www.w3.org/2000/svg\n\t */ SVG: \"http://www.w3.org/2000/svg\",\n    /**\n\t * The `xml:` namespace.\n\t *\n\t * @see http://www.w3.org/XML/1998/namespace\n\t */ XML: \"http://www.w3.org/XML/1998/namespace\",\n    /**\n\t * The `xmlns:` namespace\n\t *\n\t * @see https://www.w3.org/2000/xmlns/\n\t */ XMLNS: \"http://www.w3.org/2000/xmlns/\"\n});\nexports.assign = assign;\nexports.find = find;\nexports.freeze = freeze;\nexports.MIME_TYPE = MIME_TYPE;\nexports.NAMESPACE = NAMESPACE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js":
/*!********************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/dom-parser.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar dom = __webpack_require__(/*! ./dom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\");\nvar entities = __webpack_require__(/*! ./entities */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js\");\nvar sax = __webpack_require__(/*! ./sax */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js\");\nvar DOMImplementation = dom.DOMImplementation;\nvar NAMESPACE = conventions.NAMESPACE;\nvar ParseError = sax.ParseError;\nvar XMLReader = sax.XMLReader;\n/**\n * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:\n *\n * > XML parsed entities are often stored in computer files which,\n * > for editing convenience, are organized into lines.\n * > These lines are typically separated by some combination\n * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\n * >\n * > To simplify the tasks of applications, the XML processor must behave\n * > as if it normalized all line breaks in external parsed entities (including the document entity)\n * > on input, before parsing, by translating all of the following to a single #xA character:\n * >\n * > 1. the two-character sequence #xD #xA\n * > 2. the two-character sequence #xD #x85\n * > 3. the single character #x85\n * > 4. the single character #x2028\n * > 5. any #xD character that is not immediately followed by #xA or #x85.\n *\n * @param {string} input\n * @returns {string}\n */ function normalizeLineEndings(input) {\n    return input.replace(/\\r[\\n\\u0085]/g, \"\\n\").replace(/[\\r\\u0085\\u2028]/g, \"\\n\");\n}\n/**\n * @typedef Locator\n * @property {number} [columnNumber]\n * @property {number} [lineNumber]\n */ /**\n * @typedef DOMParserOptions\n * @property {DOMHandler} [domBuilder]\n * @property {Function} [errorHandler]\n * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing\n * \t\t\t\t\t\tdefaults to `normalizeLineEndings`\n * @property {Locator} [locator]\n * @property {Record<string, string>} [xmlns]\n *\n * @see normalizeLineEndings\n */ /**\n * The DOMParser interface provides the ability to parse XML or HTML source code\n * from a string into a DOM `Document`.\n *\n * _xmldom is different from the spec in that it allows an `options` parameter,\n * to override the default behavior._\n *\n * @param {DOMParserOptions} [options]\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\n * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\n */ function DOMParser(options) {\n    this.options = options || {\n        locator: {}\n    };\n}\nDOMParser.prototype.parseFromString = function(source, mimeType) {\n    var options = this.options;\n    var sax = new XMLReader();\n    var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n    var errorHandler = options.errorHandler;\n    var locator = options.locator;\n    var defaultNSMap = options.xmlns || {};\n    var isHTML = /\\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;\n    var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;\n    if (locator) {\n        domBuilder.setDocumentLocator(locator);\n    }\n    sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n    sax.domBuilder = options.domBuilder || domBuilder;\n    if (isHTML) {\n        defaultNSMap[\"\"] = NAMESPACE.HTML;\n    }\n    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\n    var normalize = options.normalizeLineEndings || normalizeLineEndings;\n    if (source && typeof source === \"string\") {\n        sax.parse(normalize(source), defaultNSMap, entityMap);\n    } else {\n        sax.errorHandler.error(\"invalid doc source\");\n    }\n    return domBuilder.doc;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n    if (!errorImpl) {\n        if (domBuilder instanceof DOMHandler) {\n            return domBuilder;\n        }\n        errorImpl = domBuilder;\n    }\n    var errorHandler = {};\n    var isCallback = errorImpl instanceof Function;\n    locator = locator || {};\n    function build(key) {\n        var fn = errorImpl[key];\n        if (!fn && isCallback) {\n            fn = errorImpl.length == 2 ? function(msg) {\n                errorImpl(key, msg);\n            } : errorImpl;\n        }\n        errorHandler[key] = fn && function(msg) {\n            fn(\"[xmldom \" + key + \"]\t\" + msg + _locator(locator));\n        } || function() {};\n    }\n    build(\"warning\");\n    build(\"error\");\n    build(\"fatalError\");\n    return errorHandler;\n}\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\n * +ContentHandler+ErrorHandler\n * +LexicalHandler+EntityResolver2\n * -DeclHandler-DTDHandler\n *\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\n */ function DOMHandler() {\n    this.cdata = false;\n}\nfunction position(locator, node) {\n    node.lineNumber = locator.lineNumber;\n    node.columnNumber = locator.columnNumber;\n}\n/**\n * @see org.xml.sax.ContentHandler#startDocument\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\n */ DOMHandler.prototype = {\n    startDocument: function() {\n        this.doc = new DOMImplementation().createDocument(null, null, null);\n        if (this.locator) {\n            this.doc.documentURI = this.locator.systemId;\n        }\n    },\n    startElement: function(namespaceURI, localName, qName, attrs) {\n        var doc = this.doc;\n        var el = doc.createElementNS(namespaceURI, qName || localName);\n        var len = attrs.length;\n        appendElement(this, el);\n        this.currentElement = el;\n        this.locator && position(this.locator, el);\n        for(var i = 0; i < len; i++){\n            var namespaceURI = attrs.getURI(i);\n            var value = attrs.getValue(i);\n            var qName = attrs.getQName(i);\n            var attr = doc.createAttributeNS(namespaceURI, qName);\n            this.locator && position(attrs.getLocator(i), attr);\n            attr.value = attr.nodeValue = value;\n            el.setAttributeNode(attr);\n        }\n    },\n    endElement: function(namespaceURI, localName, qName) {\n        var current = this.currentElement;\n        var tagName = current.tagName;\n        this.currentElement = current.parentNode;\n    },\n    startPrefixMapping: function(prefix, uri) {},\n    endPrefixMapping: function(prefix) {},\n    processingInstruction: function(target, data) {\n        var ins = this.doc.createProcessingInstruction(target, data);\n        this.locator && position(this.locator, ins);\n        appendElement(this, ins);\n    },\n    ignorableWhitespace: function(ch, start, length) {},\n    characters: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        //console.log(chars)\n        if (chars) {\n            if (this.cdata) {\n                var charNode = this.doc.createCDATASection(chars);\n            } else {\n                var charNode = this.doc.createTextNode(chars);\n            }\n            if (this.currentElement) {\n                this.currentElement.appendChild(charNode);\n            } else if (/^\\s*$/.test(chars)) {\n                this.doc.appendChild(charNode);\n            //process xml\n            }\n            this.locator && position(this.locator, charNode);\n        }\n    },\n    skippedEntity: function(name) {},\n    endDocument: function() {\n        this.doc.normalize();\n    },\n    setDocumentLocator: function(locator) {\n        if (this.locator = locator) {\n            locator.lineNumber = 0;\n        }\n    },\n    //LexicalHandler\n    comment: function(chars, start, length) {\n        chars = _toString.apply(this, arguments);\n        var comm = this.doc.createComment(chars);\n        this.locator && position(this.locator, comm);\n        appendElement(this, comm);\n    },\n    startCDATA: function() {\n        //used in characters() methods\n        this.cdata = true;\n    },\n    endCDATA: function() {\n        this.cdata = false;\n    },\n    startDTD: function(name, publicId, systemId) {\n        var impl = this.doc.implementation;\n        if (impl && impl.createDocumentType) {\n            var dt = impl.createDocumentType(name, publicId, systemId);\n            this.locator && position(this.locator, dt);\n            appendElement(this, dt);\n            this.doc.doctype = dt;\n        }\n    },\n    /**\n\t * @see org.xml.sax.ErrorHandler\n\t * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\n\t */ warning: function(error) {\n        console.warn(\"[xmldom warning]\t\" + error, _locator(this.locator));\n    },\n    error: function(error) {\n        console.error(\"[xmldom error]\t\" + error, _locator(this.locator));\n    },\n    fatalError: function(error) {\n        throw new ParseError(error, this.locator);\n    }\n};\nfunction _locator(l) {\n    if (l) {\n        return \"\\n@\" + (l.systemId || \"\") + \"#[line:\" + l.lineNumber + \",col:\" + l.columnNumber + \"]\";\n    }\n}\nfunction _toString(chars, start, length) {\n    if (typeof chars == \"string\") {\n        return chars.substr(start, length);\n    } else {\n        if (chars.length >= start + length || start) {\n            return new java.lang.String(chars, start, length) + \"\";\n        }\n        return chars;\n    }\n}\n/*\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\n * used method of org.xml.sax.ext.LexicalHandler:\n *  #comment(chars, start, length)\n *  #startCDATA()\n *  #endCDATA()\n *  #startDTD(name, publicId, systemId)\n *\n *\n * IGNORED method of org.xml.sax.ext.LexicalHandler:\n *  #endDTD()\n *  #startEntity(name)\n *  #endEntity(name)\n *\n *\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\n * IGNORED method of org.xml.sax.ext.DeclHandler\n * \t#attributeDecl(eName, aName, type, mode, value)\n *  #elementDecl(name, model)\n *  #externalEntityDecl(name, publicId, systemId)\n *  #internalEntityDecl(name, value)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\n * IGNORED method of org.xml.sax.EntityResolver2\n *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\n *  #resolveEntity(publicId, systemId)\n *  #getExternalSubset(name, baseURI)\n * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\n * IGNORED method of org.xml.sax.DTDHandler\n *  #notationDecl(name, publicId, systemId) {};\n *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\n */ \"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function(key) {\n    DOMHandler.prototype[key] = function() {\n        return null;\n    };\n});\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function appendElement(hander, node) {\n    if (!hander.currentElement) {\n        hander.doc.appendChild(node);\n    } else {\n        hander.currentElement.appendChild(node);\n    }\n} //appendChild and setAttributeNS are preformance key\nexports.__DOMHandler = DOMHandler;\nexports.normalizeLineEndings = normalizeLineEndings;\nexports.DOMParser = DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js":
/*!*************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/dom.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var conventions = __webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\");\nvar find = conventions.find;\nvar NAMESPACE = conventions.NAMESPACE;\n/**\n * A prerequisite for `[].filter`, to drop elements that are empty\n * @param {string} input\n * @returns {boolean}\n */ function notEmptyString(input) {\n    return input !== \"\";\n}\n/**\n * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * @param {string} input\n * @returns {string[]} (can be empty)\n */ function splitOnASCIIWhitespace(input) {\n    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\n    return input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : [];\n}\n/**\n * Adds element as a key to current if it is not already present.\n *\n * @param {Record<string, boolean | undefined>} current\n * @param {string} element\n * @returns {Record<string, boolean | undefined>}\n */ function orderedSetReducer(current, element) {\n    if (!current.hasOwnProperty(element)) {\n        current[element] = true;\n    }\n    return current;\n}\n/**\n * @see https://infra.spec.whatwg.org/#ordered-set\n * @param {string} input\n * @returns {string[]}\n */ function toOrderedSet(input) {\n    if (!input) return [];\n    var list = splitOnASCIIWhitespace(input);\n    return Object.keys(list.reduce(orderedSetReducer, {}));\n}\n/**\n * Uses `list.indexOf` to implement something like `Array.prototype.includes`,\n * which we can not rely on being available.\n *\n * @param {any[]} list\n * @returns {function(any): boolean}\n */ function arrayIncludes(list) {\n    return function(element) {\n        return list && list.indexOf(element) !== -1;\n    };\n}\nfunction copy(src, dest) {\n    for(var p in src){\n        if (Object.prototype.hasOwnProperty.call(src, p)) {\n            dest[p] = src[p];\n        }\n    }\n}\n/**\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n */ function _extends(Class, Super) {\n    var pt = Class.prototype;\n    if (!(pt instanceof Super)) {\n        function t() {}\n        ;\n        t.prototype = Super.prototype;\n        t = new t();\n        copy(pt, t);\n        Class.prototype = pt = t;\n    }\n    if (pt.constructor != Class) {\n        if (typeof Class != \"function\") {\n            console.error(\"unknown Class:\" + Class);\n        }\n        pt.constructor = Class;\n    }\n}\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n/**\n * DOM Level 2\n * Object DOMException\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n */ function DOMException(code, message) {\n    if (message instanceof Error) {\n        var error = message;\n    } else {\n        error = this;\n        Error.call(this, ExceptionMessage[code]);\n        this.message = ExceptionMessage[code];\n        if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n    }\n    error.code = code;\n    if (message) this.message = this.message + \": \" + message;\n    return error;\n}\n;\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n * The items in the NodeList are accessible via an integral index, starting from 0.\n */ function NodeList() {}\n;\nNodeList.prototype = {\n    /**\n\t * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n\t * @standard level1\n\t */ length: 0,\n    /**\n\t * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n\t * @standard level1\n\t * @param index  unsigned long\n\t *   Index into the collection.\n\t * @return Node\n\t * \tThe node at the indexth position in the NodeList, or null if that is not a valid index.\n\t */ item: function(index) {\n        return index >= 0 && index < this.length ? this[index] : null;\n    },\n    toString: function(isHTML, nodeFilter) {\n        for(var buf = [], i = 0; i < this.length; i++){\n            serializeToString(this[i], buf, isHTML, nodeFilter);\n        }\n        return buf.join(\"\");\n    },\n    /**\n\t * @private\n\t * @param {function (Node):boolean} predicate\n\t * @returns {Node[]}\n\t */ filter: function(predicate) {\n        return Array.prototype.filter.call(this, predicate);\n    },\n    /**\n\t * @private\n\t * @param {Node} item\n\t * @returns {number}\n\t */ indexOf: function(item) {\n        return Array.prototype.indexOf.call(this, item);\n    }\n};\nfunction LiveNodeList(node, refresh) {\n    this._node = node;\n    this._refresh = refresh;\n    _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n    var inc = list._node._inc || list._node.ownerDocument._inc;\n    if (list._inc !== inc) {\n        var ls = list._refresh(list._node);\n        __set__(list, \"length\", ls.length);\n        if (!list.$$length || ls.length < list.$$length) {\n            for(var i = ls.length; (i in list); i++){\n                if (Object.prototype.hasOwnProperty.call(list, i)) {\n                    delete list[i];\n                }\n            }\n        }\n        copy(ls, list);\n        list._inc = inc;\n    }\n}\nLiveNodeList.prototype.item = function(i) {\n    _updateLiveList(this);\n    return this[i] || null;\n};\n_extends(LiveNodeList, NodeList);\n/**\n * Objects implementing the NamedNodeMap interface are used\n * to represent collections of nodes that can be accessed by name.\n * Note that NamedNodeMap does not inherit from NodeList;\n * NamedNodeMaps are not maintained in any particular order.\n * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,\n * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\n * and does not imply that the DOM specifies an order to these Nodes.\n * NamedNodeMap objects in the DOM are live.\n * used for attributes or DocumentType entities\n */ function NamedNodeMap() {}\n;\nfunction _findNodeIndex(list, node) {\n    var i = list.length;\n    while(i--){\n        if (list[i] === node) {\n            return i;\n        }\n    }\n}\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n    if (oldAttr) {\n        list[_findNodeIndex(list, oldAttr)] = newAttr;\n    } else {\n        list[list.length++] = newAttr;\n    }\n    if (el) {\n        newAttr.ownerElement = el;\n        var doc = el.ownerDocument;\n        if (doc) {\n            oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n            _onAddAttribute(doc, el, newAttr);\n        }\n    }\n}\nfunction _removeNamedNode(el, list, attr) {\n    //console.log('remove attr:'+attr)\n    var i = _findNodeIndex(list, attr);\n    if (i >= 0) {\n        var lastIndex = list.length - 1;\n        while(i < lastIndex){\n            list[i] = list[++i];\n        }\n        list.length = lastIndex;\n        if (el) {\n            var doc = el.ownerDocument;\n            if (doc) {\n                _onRemoveAttribute(doc, el, attr);\n                attr.ownerElement = null;\n            }\n        }\n    } else {\n        throw new DOMException(NOT_FOUND_ERR, new Error(el.tagName + \"@\" + attr));\n    }\n}\nNamedNodeMap.prototype = {\n    length: 0,\n    item: NodeList.prototype.item,\n    getNamedItem: function(key) {\n        //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n        //\t\t\treturn null;\n        //\t\t}\n        //console.log()\n        var i = this.length;\n        while(i--){\n            var attr = this[i];\n            //console.log(attr.nodeName,key)\n            if (attr.nodeName == key) {\n                return attr;\n            }\n        }\n    },\n    setNamedItem: function(attr) {\n        var el = attr.ownerElement;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        var oldAttr = this.getNamedItem(attr.nodeName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ setNamedItemNS: function(attr) {\n        var el = attr.ownerElement, oldAttr;\n        if (el && el != this._ownerElement) {\n            throw new DOMException(INUSE_ATTRIBUTE_ERR);\n        }\n        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n        _addNamedNode(this._ownerElement, this, attr, oldAttr);\n        return oldAttr;\n    },\n    /* returns Node */ removeNamedItem: function(key) {\n        var attr = this.getNamedItem(key);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    //for level2\n    removeNamedItemNS: function(namespaceURI, localName) {\n        var attr = this.getNamedItemNS(namespaceURI, localName);\n        _removeNamedNode(this._ownerElement, this, attr);\n        return attr;\n    },\n    getNamedItemNS: function(namespaceURI, localName) {\n        var i = this.length;\n        while(i--){\n            var node = this[i];\n            if (node.localName == localName && node.namespaceURI == namespaceURI) {\n                return node;\n            }\n        }\n        return null;\n    }\n};\n/**\n * The DOMImplementation interface represents an object providing methods\n * which are not dependent on any particular document.\n * Such an object is returned by the `Document.implementation` property.\n *\n * __The individual methods describe the differences compared to the specs.__\n *\n * @constructor\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\n * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)\n * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\n * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\n * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\n */ function DOMImplementation() {}\nDOMImplementation.prototype = {\n    /**\n\t * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.\n\t * The different implementations fairly diverged in what kind of features were reported.\n\t * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.\n\t *\n\t * @deprecated It is deprecated and modern browsers return true in all cases.\n\t *\n\t * @param {string} feature\n\t * @param {string} [version]\n\t * @returns {boolean} always true\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\n\t * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\n\t */ hasFeature: function(feature, version) {\n        return true;\n    },\n    /**\n\t * Creates an XML Document object of the specified type with its document element.\n\t *\n\t * __It behaves slightly different from the description in the living standard__:\n\t * - There is no interface/class `XMLDocument`, it returns a `Document` instance.\n\t * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string|null} namespaceURI\n\t * @param {string} qualifiedName\n\t * @param {DocumentType=null} doctype\n\t * @returns {Document}\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocument: function(namespaceURI, qualifiedName, doctype) {\n        var doc = new Document();\n        doc.implementation = this;\n        doc.childNodes = new NodeList();\n        doc.doctype = doctype || null;\n        if (doctype) {\n            doc.appendChild(doctype);\n        }\n        if (qualifiedName) {\n            var root = doc.createElementNS(namespaceURI, qualifiedName);\n            doc.appendChild(root);\n        }\n        return doc;\n    },\n    /**\n\t * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.\n\t *\n\t * __This behavior is slightly different from the in the specs__:\n\t * - this implementation is not validating names or qualified names\n\t *   (when parsing XML strings, the SAX parser takes care of that)\n\t *\n\t * @param {string} qualifiedName\n\t * @param {string} [publicId]\n\t * @param {string} [systemId]\n\t * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation\n\t * \t\t\t\t  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN\n\t * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core\n\t * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard\n\t *\n\t * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\n\t * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\n\t * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\n\t */ createDocumentType: function(qualifiedName, publicId, systemId) {\n        var node = new DocumentType();\n        node.name = qualifiedName;\n        node.nodeName = qualifiedName;\n        node.publicId = publicId || \"\";\n        node.systemId = systemId || \"\";\n        return node;\n    }\n};\n/**\n * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n */ function Node() {}\n;\nNode.prototype = {\n    firstChild: null,\n    lastChild: null,\n    previousSibling: null,\n    nextSibling: null,\n    attributes: null,\n    parentNode: null,\n    childNodes: null,\n    ownerDocument: null,\n    nodeValue: null,\n    namespaceURI: null,\n    prefix: null,\n    localName: null,\n    // Modified in DOM Level 2:\n    insertBefore: function(newChild, refChild) {\n        return _insertBefore(this, newChild, refChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n    },\n    removeChild: function(oldChild) {\n        return _removeChild(this, oldChild);\n    },\n    appendChild: function(newChild) {\n        return this.insertBefore(newChild, null);\n    },\n    hasChildNodes: function() {\n        return this.firstChild != null;\n    },\n    cloneNode: function(deep) {\n        return cloneNode(this.ownerDocument || this, this, deep);\n    },\n    // Modified in DOM Level 2:\n    normalize: function() {\n        var child = this.firstChild;\n        while(child){\n            var next = child.nextSibling;\n            if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n                this.removeChild(next);\n                child.appendData(next.data);\n            } else {\n                child.normalize();\n                child = next;\n            }\n        }\n    },\n    // Introduced in DOM Level 2:\n    isSupported: function(feature, version) {\n        return this.ownerDocument.implementation.hasFeature(feature, version);\n    },\n    // Introduced in DOM Level 2:\n    hasAttributes: function() {\n        return this.attributes.length > 0;\n    },\n    /**\n\t * Look up the prefix associated to the given namespace URI, starting from this node.\n\t * **The default namespace declarations are ignored by this method.**\n\t * See Namespace Prefix Lookup for details on the algorithm used by this method.\n\t *\n\t * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._\n\t *\n\t * @param {string | null} namespaceURI\n\t * @returns {string | null}\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\n\t * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\n\t * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\n\t * @see https://github.com/xmldom/xmldom/issues/322\n\t */ lookupPrefix: function(namespaceURI) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                for(var n in map){\n                    if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {\n                        return n;\n                    }\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    lookupNamespaceURI: function(prefix) {\n        var el = this;\n        while(el){\n            var map = el._nsMap;\n            //console.dir(map)\n            if (map) {\n                if (Object.prototype.hasOwnProperty.call(map, prefix)) {\n                    return map[prefix];\n                }\n            }\n            el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\n        }\n        return null;\n    },\n    // Introduced in DOM Level 3:\n    isDefaultNamespace: function(namespaceURI) {\n        var prefix = this.lookupPrefix(namespaceURI);\n        return prefix == null;\n    }\n};\nfunction _xmlEncoder(c) {\n    return c == \"<\" && \"&lt;\" || c == \">\" && \"&gt;\" || c == \"&\" && \"&amp;\" || c == '\"' && \"&quot;\" || \"&#\" + c.charCodeAt() + \";\";\n}\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n/**\n * @param callback return true for continue,false for break\n * @return boolean true: break visit;\n */ function _visitNode(node, callback) {\n    if (callback(node)) {\n        return true;\n    }\n    if (node = node.firstChild) {\n        do {\n            if (_visitNode(node, callback)) {\n                return true;\n            }\n        }while (node = node.nextSibling);\n    }\n}\nfunction Document() {\n    this.ownerDocument = this;\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        el._nsMap[newAttr.prefix ? newAttr.localName : \"\"] = newAttr.value;\n    }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n    doc && doc._inc++;\n    var ns = newAttr.namespaceURI;\n    if (ns === NAMESPACE.XMLNS) {\n        //update namespace\n        delete el._nsMap[newAttr.prefix ? newAttr.localName : \"\"];\n    }\n}\n/**\n * Updates `el.childNodes`, updating the indexed items and it's `length`.\n * Passing `newChild` means it will be appended.\n * Otherwise it's assumed that an item has been removed,\n * and `el.firstNode` and it's `.nextSibling` are used\n * to walk the current list of child nodes.\n *\n * @param {Document} doc\n * @param {Node} el\n * @param {Node} [newChild]\n * @private\n */ function _onUpdateChild(doc, el, newChild) {\n    if (doc && doc._inc) {\n        doc._inc++;\n        //update childNodes\n        var cs = el.childNodes;\n        if (newChild) {\n            cs[cs.length++] = newChild;\n        } else {\n            var child = el.firstChild;\n            var i = 0;\n            while(child){\n                cs[i++] = child;\n                child = child.nextSibling;\n            }\n            cs.length = i;\n            delete cs[cs.length];\n        }\n    }\n}\n/**\n * Removes the connections between `parentNode` and `child`\n * and any existing `child.previousSibling` or `child.nextSibling`.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n *\n * @param {Node} parentNode\n * @param {Node} child\n * @returns {Node} the child that was removed.\n * @private\n */ function _removeChild(parentNode, child) {\n    var previous = child.previousSibling;\n    var next = child.nextSibling;\n    if (previous) {\n        previous.nextSibling = next;\n    } else {\n        parentNode.firstChild = next;\n    }\n    if (next) {\n        next.previousSibling = previous;\n    } else {\n        parentNode.lastChild = previous;\n    }\n    child.parentNode = null;\n    child.previousSibling = null;\n    child.nextSibling = null;\n    _onUpdateChild(parentNode.ownerDocument, parentNode);\n    return child;\n}\n/**\n * Returns `true` if `node` can be a parent for insertion.\n * @param {Node} node\n * @returns {boolean}\n */ function hasValidParentNodeType(node) {\n    return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);\n}\n/**\n * Returns `true` if `node` can be inserted according to it's `nodeType`.\n * @param {Node} node\n * @returns {boolean}\n */ function hasInsertableNodeType(node) {\n    return node && (isElementNode(node) || isTextNode(node) || isDocTypeNode(node) || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE);\n}\n/**\n * Returns true if `node` is a DOCTYPE node\n * @param {Node} node\n * @returns {boolean}\n */ function isDocTypeNode(node) {\n    return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\n}\n/**\n * Returns true if the node is an element\n * @param {Node} node\n * @returns {boolean}\n */ function isElementNode(node) {\n    return node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Returns true if `node` is a text node\n * @param {Node} node\n * @returns {boolean}\n */ function isTextNode(node) {\n    return node && node.nodeType === Node.TEXT_NODE;\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Document} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementInsertionPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * Check if en element node can be inserted before `child`, or at the end if child is falsy,\n * according to the presence and position of a doctype node on the same level.\n *\n * @param {Node} doc The document node\n * @param {Node} child the node that would become the nextSibling if the element would be inserted\n * @returns {boolean} `true` if an element can be inserted before child\n * @private\n * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function isElementReplacementPossible(doc, child) {\n    var parentChildNodes = doc.childNodes || [];\n    function hasElementChildThatIsNotChild(node) {\n        return isElementNode(node) && node !== child;\n    }\n    if (find(parentChildNodes, hasElementChildThatIsNotChild)) {\n        return false;\n    }\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\n}\n/**\n * @private\n * Steps 1-5 of the checks before inserting and before replacing a child are the same.\n *\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidity1to5(parent, node, child) {\n    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\n    if (!hasValidParentNodeType(parent)) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected parent node type \" + parent.nodeType);\n    }\n    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\n    // not implemented!\n    // 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\n    if (child && child.parentNode !== parent) {\n        throw new DOMException(NOT_FOUND_ERR, \"child not in parent\");\n    }\n    if (// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\n    !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,\n    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\n    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\n    // or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\n    isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE) {\n        throw new DOMException(HIERARCHY_REQUEST_ERR, \"Unexpected node type \" + node.nodeType + \" for parent node type \" + parent.nodeType);\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreInsertionValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If node has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child,\n        // `child` is a doctype, or `child` is non-null and a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child, `child` is a doctype,\n        // or `child` is non-null and a doctype is following `child`.\n        if (!isElementInsertionPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        // `parent` has a doctype child,\n        if (find(parentChildNodes, isDocTypeNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // `child` is non-null and an element is preceding `child`,\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n        // or `child` is null and `parent` has an element child.\n        if (!child && parentElementChild) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can not be appended since element is present\");\n        }\n    }\n}\n/**\n * @private\n * Step 6 of the checks before inserting and before replacing a child are different.\n *\n * @param {Document} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n * @see https://dom.spec.whatwg.org/#concept-node-replace\n */ function assertPreReplacementValidityInDocument(parent, node, child) {\n    var parentChildNodes = parent.childNodes || [];\n    var nodeChildNodes = node.childNodes || [];\n    // DocumentFragment\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        var nodeChildElements = nodeChildNodes.filter(isElementNode);\n        // If `node` has more than one element child or has a Text node child.\n        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"More than one element or text in fragment\");\n        }\n        // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Element in fragment can not be inserted before doctype\");\n        }\n    }\n    // Element\n    if (isElementNode(node)) {\n        // `parent` has an element child that is not `child` or a doctype is following `child`.\n        if (!isElementReplacementPossible(parent, child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one element can be added and only after doctype\");\n        }\n    }\n    // DocumentType\n    if (isDocTypeNode(node)) {\n        function hasDoctypeChildThatIsNotChild(node) {\n            return isDocTypeNode(node) && node !== child;\n        }\n        // `parent` has a doctype child that is not `child`,\n        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Only one doctype is allowed\");\n        }\n        var parentElementChild = find(parentChildNodes, isElementNode);\n        // or an element is preceding `child`.\n        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\n            throw new DOMException(HIERARCHY_REQUEST_ERR, \"Doctype can only be inserted before an element\");\n        }\n    }\n}\n/**\n * @private\n * @param {Node} parent the parent node to insert `node` into\n * @param {Node} node the node to insert\n * @param {Node=} child the node that should become the `nextSibling` of `node`\n * @returns {Node}\n * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\n * @throws DOMException if `child` is provided but is not a child of `parent`.\n * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n */ function _insertBefore(parent, node, child, _inDocumentAssertion) {\n    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:\n    assertPreInsertionValidity1to5(parent, node, child);\n    // If parent is a document, and any of the statements below, switched on the interface node implements,\n    // are true, then throw a \"HierarchyRequestError\" DOMException.\n    if (parent.nodeType === Node.DOCUMENT_NODE) {\n        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\n    }\n    var cp = node.parentNode;\n    if (cp) {\n        cp.removeChild(node); //remove and update\n    }\n    if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n        var newFirst = node.firstChild;\n        if (newFirst == null) {\n            return node;\n        }\n        var newLast = node.lastChild;\n    } else {\n        newFirst = newLast = node;\n    }\n    var pre = child ? child.previousSibling : parent.lastChild;\n    newFirst.previousSibling = pre;\n    newLast.nextSibling = child;\n    if (pre) {\n        pre.nextSibling = newFirst;\n    } else {\n        parent.firstChild = newFirst;\n    }\n    if (child == null) {\n        parent.lastChild = newLast;\n    } else {\n        child.previousSibling = newLast;\n    }\n    do {\n        newFirst.parentNode = parent;\n    }while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n    _onUpdateChild(parent.ownerDocument || parent, parent);\n    //console.log(parent.lastChild.nextSibling == null)\n    if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\n        node.firstChild = node.lastChild = null;\n    }\n    return node;\n}\n/**\n * Appends `newChild` to `parentNode`.\n * If `newChild` is already connected to a `parentNode` it is first removed from it.\n *\n * @see https://github.com/xmldom/xmldom/issues/135\n * @see https://github.com/xmldom/xmldom/issues/145\n * @param {Node} parentNode\n * @param {Node} newChild\n * @returns {Node}\n * @private\n */ function _appendSingleChild(parentNode, newChild) {\n    if (newChild.parentNode) {\n        newChild.parentNode.removeChild(newChild);\n    }\n    newChild.parentNode = parentNode;\n    newChild.previousSibling = parentNode.lastChild;\n    newChild.nextSibling = null;\n    if (newChild.previousSibling) {\n        newChild.previousSibling.nextSibling = newChild;\n    } else {\n        parentNode.firstChild = newChild;\n    }\n    parentNode.lastChild = newChild;\n    _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n    return newChild;\n}\nDocument.prototype = {\n    //implementation : null,\n    nodeName: \"#document\",\n    nodeType: DOCUMENT_NODE,\n    /**\n\t * The DocumentType node of the document.\n\t *\n\t * @readonly\n\t * @type DocumentType\n\t */ doctype: null,\n    documentElement: null,\n    _inc: 1,\n    insertBefore: function(newChild, refChild) {\n        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n            var child = newChild.firstChild;\n            while(child){\n                var next = child.nextSibling;\n                this.insertBefore(child, refChild);\n                child = next;\n            }\n            return newChild;\n        }\n        _insertBefore(this, newChild, refChild);\n        newChild.ownerDocument = this;\n        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\n            this.documentElement = newChild;\n        }\n        return newChild;\n    },\n    removeChild: function(oldChild) {\n        if (this.documentElement == oldChild) {\n            this.documentElement = null;\n        }\n        return _removeChild(this, oldChild);\n    },\n    replaceChild: function(newChild, oldChild) {\n        //raises\n        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\n        newChild.ownerDocument = this;\n        if (oldChild) {\n            this.removeChild(oldChild);\n        }\n        if (isElementNode(newChild)) {\n            this.documentElement = newChild;\n        }\n    },\n    // Introduced in DOM Level 2:\n    importNode: function(importedNode, deep) {\n        return importNode(this, importedNode, deep);\n    },\n    // Introduced in DOM Level 2:\n    getElementById: function(id) {\n        var rtv = null;\n        _visitNode(this.documentElement, function(node) {\n            if (node.nodeType == ELEMENT_NODE) {\n                if (node.getAttribute(\"id\") == id) {\n                    rtv = node;\n                    return true;\n                }\n            }\n        });\n        return rtv;\n    },\n    /**\n\t * The `getElementsByClassName` method of `Document` interface returns an array-like object\n\t * of all child elements which have **all** of the given class name(s).\n\t *\n\t * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.\n\t *\n\t *\n\t * Warning: This is a live LiveNodeList.\n\t * Changes in the DOM will reflect in the array as the changes occur.\n\t * If an element selected by this array no longer qualifies for the selector,\n\t * it will automatically be removed. Be aware of this for iteration purposes.\n\t *\n\t * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\n\t * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\n\t */ getElementsByClassName: function(classNames) {\n        var classNamesSet = toOrderedSet(classNames);\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            if (classNamesSet.length > 0) {\n                _visitNode(base.documentElement, function(node) {\n                    if (node !== base && node.nodeType === ELEMENT_NODE) {\n                        var nodeClassNames = node.getAttribute(\"class\");\n                        // can be null if the attribute does not exist\n                        if (nodeClassNames) {\n                            // before splitting and iterating just compare them for the most common case\n                            var matches = classNames === nodeClassNames;\n                            if (!matches) {\n                                var nodeClassNamesSet = toOrderedSet(nodeClassNames);\n                                matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));\n                            }\n                            if (matches) {\n                                ls.push(node);\n                            }\n                        }\n                    }\n                });\n            }\n            return ls;\n        });\n    },\n    //document factory method:\n    createElement: function(tagName) {\n        var node = new Element();\n        node.ownerDocument = this;\n        node.nodeName = tagName;\n        node.tagName = tagName;\n        node.localName = tagName;\n        node.childNodes = new NodeList();\n        var attrs = node.attributes = new NamedNodeMap();\n        attrs._ownerElement = node;\n        return node;\n    },\n    createDocumentFragment: function() {\n        var node = new DocumentFragment();\n        node.ownerDocument = this;\n        node.childNodes = new NodeList();\n        return node;\n    },\n    createTextNode: function(data) {\n        var node = new Text();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createComment: function(data) {\n        var node = new Comment();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createCDATASection: function(data) {\n        var node = new CDATASection();\n        node.ownerDocument = this;\n        node.appendData(data);\n        return node;\n    },\n    createProcessingInstruction: function(target, data) {\n        var node = new ProcessingInstruction();\n        node.ownerDocument = this;\n        node.tagName = node.nodeName = node.target = target;\n        node.nodeValue = node.data = data;\n        return node;\n    },\n    createAttribute: function(name) {\n        var node = new Attr();\n        node.ownerDocument = this;\n        node.name = name;\n        node.nodeName = name;\n        node.localName = name;\n        node.specified = true;\n        return node;\n    },\n    createEntityReference: function(name) {\n        var node = new EntityReference();\n        node.ownerDocument = this;\n        node.nodeName = name;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createElementNS: function(namespaceURI, qualifiedName) {\n        var node = new Element();\n        var pl = qualifiedName.split(\":\");\n        var attrs = node.attributes = new NamedNodeMap();\n        node.childNodes = new NodeList();\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.tagName = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        attrs._ownerElement = node;\n        return node;\n    },\n    // Introduced in DOM Level 2:\n    createAttributeNS: function(namespaceURI, qualifiedName) {\n        var node = new Attr();\n        var pl = qualifiedName.split(\":\");\n        node.ownerDocument = this;\n        node.nodeName = qualifiedName;\n        node.name = qualifiedName;\n        node.namespaceURI = namespaceURI;\n        node.specified = true;\n        if (pl.length == 2) {\n            node.prefix = pl[0];\n            node.localName = pl[1];\n        } else {\n            //el.prefix = null;\n            node.localName = qualifiedName;\n        }\n        return node;\n    }\n};\n_extends(Document, Node);\nfunction Element() {\n    this._nsMap = {};\n}\n;\nElement.prototype = {\n    nodeType: ELEMENT_NODE,\n    hasAttribute: function(name) {\n        return this.getAttributeNode(name) != null;\n    },\n    getAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        return attr && attr.value || \"\";\n    },\n    getAttributeNode: function(name) {\n        return this.attributes.getNamedItem(name);\n    },\n    setAttribute: function(name, value) {\n        var attr = this.ownerDocument.createAttribute(name);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    removeAttribute: function(name) {\n        var attr = this.getAttributeNode(name);\n        attr && this.removeAttributeNode(attr);\n    },\n    //four real opeartion method\n    appendChild: function(newChild) {\n        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            return this.insertBefore(newChild, null);\n        } else {\n            return _appendSingleChild(this, newChild);\n        }\n    },\n    setAttributeNode: function(newAttr) {\n        return this.attributes.setNamedItem(newAttr);\n    },\n    setAttributeNodeNS: function(newAttr) {\n        return this.attributes.setNamedItemNS(newAttr);\n    },\n    removeAttributeNode: function(oldAttr) {\n        //console.log(this == oldAttr.ownerElement)\n        return this.attributes.removeNamedItem(oldAttr.nodeName);\n    },\n    //get real attribute name,and remove it by removeAttributeNode\n    removeAttributeNS: function(namespaceURI, localName) {\n        var old = this.getAttributeNodeNS(namespaceURI, localName);\n        old && this.removeAttributeNode(old);\n    },\n    hasAttributeNS: function(namespaceURI, localName) {\n        return this.getAttributeNodeNS(namespaceURI, localName) != null;\n    },\n    getAttributeNS: function(namespaceURI, localName) {\n        var attr = this.getAttributeNodeNS(namespaceURI, localName);\n        return attr && attr.value || \"\";\n    },\n    setAttributeNS: function(namespaceURI, qualifiedName, value) {\n        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n        attr.value = attr.nodeValue = \"\" + value;\n        this.setAttributeNode(attr);\n    },\n    getAttributeNodeNS: function(namespaceURI, localName) {\n        return this.attributes.getNamedItemNS(namespaceURI, localName);\n    },\n    getElementsByTagName: function(tagName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === \"*\" || node.tagName == tagName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    },\n    getElementsByTagNameNS: function(namespaceURI, localName) {\n        return new LiveNodeList(this, function(base) {\n            var ls = [];\n            _visitNode(base, function(node) {\n                if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === \"*\" || node.namespaceURI === namespaceURI) && (localName === \"*\" || node.localName == localName)) {\n                    ls.push(node);\n                }\n            });\n            return ls;\n        });\n    }\n};\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n_extends(Element, Node);\nfunction Attr() {}\n;\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\nfunction CharacterData() {}\n;\nCharacterData.prototype = {\n    data: \"\",\n    substringData: function(offset, count) {\n        return this.data.substring(offset, offset + count);\n    },\n    appendData: function(text) {\n        text = this.data + text;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    },\n    insertData: function(offset, text) {\n        this.replaceData(offset, 0, text);\n    },\n    appendChild: function(newChild) {\n        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);\n    },\n    deleteData: function(offset, count) {\n        this.replaceData(offset, count, \"\");\n    },\n    replaceData: function(offset, count, text) {\n        var start = this.data.substring(0, offset);\n        var end = this.data.substring(offset + count);\n        text = start + text + end;\n        this.nodeValue = this.data = text;\n        this.length = text.length;\n    }\n};\n_extends(CharacterData, Node);\nfunction Text() {}\n;\nText.prototype = {\n    nodeName: \"#text\",\n    nodeType: TEXT_NODE,\n    splitText: function(offset) {\n        var text = this.data;\n        var newText = text.substring(offset);\n        text = text.substring(0, offset);\n        this.data = this.nodeValue = text;\n        this.length = text.length;\n        var newNode = this.ownerDocument.createTextNode(newText);\n        if (this.parentNode) {\n            this.parentNode.insertBefore(newNode, this.nextSibling);\n        }\n        return newNode;\n    }\n};\n_extends(Text, CharacterData);\nfunction Comment() {}\n;\nComment.prototype = {\n    nodeName: \"#comment\",\n    nodeType: COMMENT_NODE\n};\n_extends(Comment, CharacterData);\nfunction CDATASection() {}\n;\nCDATASection.prototype = {\n    nodeName: \"#cdata-section\",\n    nodeType: CDATA_SECTION_NODE\n};\n_extends(CDATASection, CharacterData);\nfunction DocumentType() {}\n;\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\nfunction Notation() {}\n;\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\nfunction Entity() {}\n;\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\nfunction EntityReference() {}\n;\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\nfunction DocumentFragment() {}\n;\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\nfunction ProcessingInstruction() {}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {}\nXMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {\n    return nodeSerializeToString.call(node, isHtml, nodeFilter);\n};\nNode.prototype.toString = nodeSerializeToString;\nfunction nodeSerializeToString(isHtml, nodeFilter) {\n    var buf = [];\n    var refNode = this.nodeType == 9 && this.documentElement || this;\n    var prefix = refNode.prefix;\n    var uri = refNode.namespaceURI;\n    if (uri && prefix == null) {\n        //console.log(prefix)\n        var prefix = refNode.lookupPrefix(uri);\n        if (prefix == null) {\n            //isHTML = true;\n            var visibleNamespaces = [\n                {\n                    namespace: uri,\n                    prefix: null\n                }\n            ];\n        }\n    }\n    serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);\n    //console.log('###',this.nodeType,uri,prefix,buf.join(''))\n    return buf.join(\"\");\n}\nfunction needNamespaceDefine(node, isHTML, visibleNamespaces) {\n    var prefix = node.prefix || \"\";\n    var uri = node.namespaceURI;\n    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\n    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\n    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\n    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\n    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\n    // > [...] Furthermore, the attribute value [...] must not be an empty string.\n    // so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\n    if (!uri) {\n        return false;\n    }\n    if (prefix === \"xml\" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {\n        return false;\n    }\n    var i = visibleNamespaces.length;\n    while(i--){\n        var ns = visibleNamespaces[i];\n        // get namespace prefix\n        if (ns.prefix === prefix) {\n            return ns.namespace !== uri;\n        }\n    }\n    return true;\n}\n/**\n * Well-formed constraint: No < in Attribute Values\n * > The replacement text of any entity referred to directly or indirectly\n * > in an attribute value must not contain a <.\n * @see https://www.w3.org/TR/xml11/#CleanAttrVals\n * @see https://www.w3.org/TR/xml11/#NT-AttValue\n *\n * Literal whitespace other than space that appear in attribute values\n * are serialized as their entity references, so they will be preserved.\n * (In contrast to whitespace literals in the input which are normalized to spaces)\n * @see https://www.w3.org/TR/xml11/#AVNormalize\n * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\n */ function addSerializedAttribute(buf, qualifiedName, value) {\n    buf.push(\" \", qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"');\n}\nfunction serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {\n    if (!visibleNamespaces) {\n        visibleNamespaces = [];\n    }\n    if (nodeFilter) {\n        node = nodeFilter(node);\n        if (node) {\n            if (typeof node == \"string\") {\n                buf.push(node);\n                return;\n            }\n        } else {\n            return;\n        }\n    //buf.sort.apply(attrs, attributeSorter);\n    }\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var len = attrs.length;\n            var child = node.firstChild;\n            var nodeName = node.tagName;\n            isHTML = NAMESPACE.isHTML(node.namespaceURI) || isHTML;\n            var prefixedNodeName = nodeName;\n            if (!isHTML && !node.prefix && node.namespaceURI) {\n                var defaultNS;\n                // lookup current default ns from `xmlns` attribute\n                for(var ai = 0; ai < attrs.length; ai++){\n                    if (attrs.item(ai).name === \"xmlns\") {\n                        defaultNS = attrs.item(ai).value;\n                        break;\n                    }\n                }\n                if (!defaultNS) {\n                    // lookup current default ns in visibleNamespaces\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.prefix === \"\" && namespace.namespace === node.namespaceURI) {\n                            defaultNS = namespace.namespace;\n                            break;\n                        }\n                    }\n                }\n                if (defaultNS !== node.namespaceURI) {\n                    for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){\n                        var namespace = visibleNamespaces[nsi];\n                        if (namespace.namespace === node.namespaceURI) {\n                            if (namespace.prefix) {\n                                prefixedNodeName = namespace.prefix + \":\" + nodeName;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            buf.push(\"<\", prefixedNodeName);\n            for(var i = 0; i < len; i++){\n                // add namespaces for attributes\n                var attr = attrs.item(i);\n                if (attr.prefix == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: attr.localName,\n                        namespace: attr.value\n                    });\n                } else if (attr.nodeName == \"xmlns\") {\n                    visibleNamespaces.push({\n                        prefix: \"\",\n                        namespace: attr.value\n                    });\n                }\n            }\n            for(var i = 0; i < len; i++){\n                var attr = attrs.item(i);\n                if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\n                    var prefix = attr.prefix || \"\";\n                    var uri = attr.namespaceURI;\n                    addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                    visibleNamespaces.push({\n                        prefix: prefix,\n                        namespace: uri\n                    });\n                }\n                serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);\n            }\n            // add namespace for current node\n            if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\n                var prefix = node.prefix || \"\";\n                var uri = node.namespaceURI;\n                addSerializedAttribute(buf, prefix ? \"xmlns:\" + prefix : \"xmlns\", uri);\n                visibleNamespaces.push({\n                    prefix: prefix,\n                    namespace: uri\n                });\n            }\n            if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {\n                buf.push(\">\");\n                //if is cdata child node\n                if (isHTML && /^script$/i.test(nodeName)) {\n                    while(child){\n                        if (child.data) {\n                            buf.push(child.data);\n                        } else {\n                            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        }\n                        child = child.nextSibling;\n                    }\n                } else {\n                    while(child){\n                        serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                        child = child.nextSibling;\n                    }\n                }\n                buf.push(\"</\", prefixedNodeName, \">\");\n            } else {\n                buf.push(\"/>\");\n            }\n            // remove added visible namespaces\n            //visibleNamespaces.length = startVisibleNamespaces;\n            return;\n        case DOCUMENT_NODE:\n        case DOCUMENT_FRAGMENT_NODE:\n            var child = node.firstChild;\n            while(child){\n                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\n                child = child.nextSibling;\n            }\n            return;\n        case ATTRIBUTE_NODE:\n            return addSerializedAttribute(buf, node.name, node.value);\n        case TEXT_NODE:\n            /**\n\t\t * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\n\t\t * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.\n\t\t * If they are needed elsewhere, they must be escaped using either numeric character references or the strings\n\t\t * `&amp;` and `&lt;` respectively.\n\t\t * The right angle bracket (>) may be represented using the string \" &gt; \", and must, for compatibility,\n\t\t * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,\n\t\t * when that string is not marking the end of a CDATA section.\n\t\t *\n\t\t * In the content of elements, character data is any string of characters\n\t\t * which does not contain the start-delimiter of any markup\n\t\t * and does not include the CDATA-section-close delimiter, `]]>`.\n\t\t *\n\t\t * @see https://www.w3.org/TR/xml/#NT-CharData\n\t\t * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\n\t\t */ return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));\n        case CDATA_SECTION_NODE:\n            return buf.push(\"<![CDATA[\", node.data, \"]]>\");\n        case COMMENT_NODE:\n            return buf.push(\"<!--\", node.data, \"-->\");\n        case DOCUMENT_TYPE_NODE:\n            var pubid = node.publicId;\n            var sysid = node.systemId;\n            buf.push(\"<!DOCTYPE \", node.name);\n            if (pubid) {\n                buf.push(\" PUBLIC \", pubid);\n                if (sysid && sysid != \".\") {\n                    buf.push(\" \", sysid);\n                }\n                buf.push(\">\");\n            } else if (sysid && sysid != \".\") {\n                buf.push(\" SYSTEM \", sysid, \">\");\n            } else {\n                var sub = node.internalSubset;\n                if (sub) {\n                    buf.push(\" [\", sub, \"]\");\n                }\n                buf.push(\">\");\n            }\n            return;\n        case PROCESSING_INSTRUCTION_NODE:\n            return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n        case ENTITY_REFERENCE_NODE:\n            return buf.push(\"&\", node.nodeName, \";\");\n        //case ENTITY_NODE:\n        //case NOTATION_NODE:\n        default:\n            buf.push(\"??\", node.nodeName);\n    }\n}\nfunction importNode(doc, node, deep) {\n    var node2;\n    switch(node.nodeType){\n        case ELEMENT_NODE:\n            node2 = node.cloneNode(false);\n            node2.ownerDocument = doc;\n        //var attrs = node2.attributes;\n        //var len = attrs.length;\n        //for(var i=0;i<len;i++){\n        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n        //}\n        case DOCUMENT_FRAGMENT_NODE:\n            break;\n        case ATTRIBUTE_NODE:\n            deep = true;\n            break;\n    }\n    if (!node2) {\n        node2 = node.cloneNode(false); //false\n    }\n    node2.ownerDocument = doc;\n    node2.parentNode = null;\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(importNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction cloneNode(doc, node, deep) {\n    var node2 = new node.constructor();\n    for(var n in node){\n        if (Object.prototype.hasOwnProperty.call(node, n)) {\n            var v = node[n];\n            if (typeof v != \"object\") {\n                if (v != node2[n]) {\n                    node2[n] = v;\n                }\n            }\n        }\n    }\n    if (node.childNodes) {\n        node2.childNodes = new NodeList();\n    }\n    node2.ownerDocument = doc;\n    switch(node2.nodeType){\n        case ELEMENT_NODE:\n            var attrs = node.attributes;\n            var attrs2 = node2.attributes = new NamedNodeMap();\n            var len = attrs.length;\n            attrs2._ownerElement = node2;\n            for(var i = 0; i < len; i++){\n                node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));\n            }\n            break;\n            ;\n        case ATTRIBUTE_NODE:\n            deep = true;\n    }\n    if (deep) {\n        var child = node.firstChild;\n        while(child){\n            node2.appendChild(cloneNode(doc, child, deep));\n            child = child.nextSibling;\n        }\n    }\n    return node2;\n}\nfunction __set__(object, key, value) {\n    object[key] = value;\n}\n//do dynamic\ntry {\n    if (Object.defineProperty) {\n        Object.defineProperty(LiveNodeList.prototype, \"length\", {\n            get: function() {\n                _updateLiveList(this);\n                return this.$$length;\n            }\n        });\n        Object.defineProperty(Node.prototype, \"textContent\", {\n            get: function() {\n                return getTextContent(this);\n            },\n            set: function(data) {\n                switch(this.nodeType){\n                    case ELEMENT_NODE:\n                    case DOCUMENT_FRAGMENT_NODE:\n                        while(this.firstChild){\n                            this.removeChild(this.firstChild);\n                        }\n                        if (data || String(data)) {\n                            this.appendChild(this.ownerDocument.createTextNode(data));\n                        }\n                        break;\n                    default:\n                        this.data = data;\n                        this.value = data;\n                        this.nodeValue = data;\n                }\n            }\n        });\n        function getTextContent(node) {\n            switch(node.nodeType){\n                case ELEMENT_NODE:\n                case DOCUMENT_FRAGMENT_NODE:\n                    var buf = [];\n                    node = node.firstChild;\n                    while(node){\n                        if (node.nodeType !== 7 && node.nodeType !== 8) {\n                            buf.push(getTextContent(node));\n                        }\n                        node = node.nextSibling;\n                    }\n                    return buf.join(\"\");\n                default:\n                    return node.nodeValue;\n            }\n        }\n        __set__ = function(object, key, value) {\n            //console.log(value)\n            object[\"$$\" + key] = value;\n        };\n    }\n} catch (e) {}\n//if(typeof require == 'function'){\nexports.DocumentType = DocumentType;\nexports.DOMException = DOMException;\nexports.DOMImplementation = DOMImplementation;\nexports.Element = Element;\nexports.Node = Node;\nexports.NodeList = NodeList;\nexports.XMLSerializer = XMLSerializer; //}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js":
/*!******************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/entities.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar freeze = (__webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\").freeze);\n/**\n * The entities that are predefined in every XML document.\n *\n * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\n * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia\n */ exports.XML_ENTITIES = freeze({\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    quot: '\"'\n});\n/**\n * A map of all entities that are detected in an HTML document.\n * They contain all entries from `XML_ENTITIES`.\n *\n * @see XML_ENTITIES\n * @see DOMParser.parseFromString\n * @see DOMImplementation.prototype.createHTMLDocument\n * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec\n * @see https://html.spec.whatwg.org/entities.json JSON\n * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\n * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)\n * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)\n */ exports.HTML_ENTITIES = freeze({\n    Aacute: \"\\xc1\",\n    aacute: \"\\xe1\",\n    Abreve: \"Ă\",\n    abreve: \"ă\",\n    ac: \"∾\",\n    acd: \"∿\",\n    acE: \"∾̳\",\n    Acirc: \"\\xc2\",\n    acirc: \"\\xe2\",\n    acute: \"\\xb4\",\n    Acy: \"А\",\n    acy: \"а\",\n    AElig: \"\\xc6\",\n    aelig: \"\\xe6\",\n    af: \"⁡\",\n    Afr: \"\\uD835\\uDD04\",\n    afr: \"\\uD835\\uDD1E\",\n    Agrave: \"\\xc0\",\n    agrave: \"\\xe0\",\n    alefsym: \"ℵ\",\n    aleph: \"ℵ\",\n    Alpha: \"Α\",\n    alpha: \"α\",\n    Amacr: \"Ā\",\n    amacr: \"ā\",\n    amalg: \"⨿\",\n    AMP: \"&\",\n    amp: \"&\",\n    And: \"⩓\",\n    and: \"∧\",\n    andand: \"⩕\",\n    andd: \"⩜\",\n    andslope: \"⩘\",\n    andv: \"⩚\",\n    ang: \"∠\",\n    ange: \"⦤\",\n    angle: \"∠\",\n    angmsd: \"∡\",\n    angmsdaa: \"⦨\",\n    angmsdab: \"⦩\",\n    angmsdac: \"⦪\",\n    angmsdad: \"⦫\",\n    angmsdae: \"⦬\",\n    angmsdaf: \"⦭\",\n    angmsdag: \"⦮\",\n    angmsdah: \"⦯\",\n    angrt: \"∟\",\n    angrtvb: \"⊾\",\n    angrtvbd: \"⦝\",\n    angsph: \"∢\",\n    angst: \"\\xc5\",\n    angzarr: \"⍼\",\n    Aogon: \"Ą\",\n    aogon: \"ą\",\n    Aopf: \"\\uD835\\uDD38\",\n    aopf: \"\\uD835\\uDD52\",\n    ap: \"≈\",\n    apacir: \"⩯\",\n    apE: \"⩰\",\n    ape: \"≊\",\n    apid: \"≋\",\n    apos: \"'\",\n    ApplyFunction: \"⁡\",\n    approx: \"≈\",\n    approxeq: \"≊\",\n    Aring: \"\\xc5\",\n    aring: \"\\xe5\",\n    Ascr: \"\\uD835\\uDC9C\",\n    ascr: \"\\uD835\\uDCB6\",\n    Assign: \"≔\",\n    ast: \"*\",\n    asymp: \"≈\",\n    asympeq: \"≍\",\n    Atilde: \"\\xc3\",\n    atilde: \"\\xe3\",\n    Auml: \"\\xc4\",\n    auml: \"\\xe4\",\n    awconint: \"∳\",\n    awint: \"⨑\",\n    backcong: \"≌\",\n    backepsilon: \"϶\",\n    backprime: \"‵\",\n    backsim: \"∽\",\n    backsimeq: \"⋍\",\n    Backslash: \"∖\",\n    Barv: \"⫧\",\n    barvee: \"⊽\",\n    Barwed: \"⌆\",\n    barwed: \"⌅\",\n    barwedge: \"⌅\",\n    bbrk: \"⎵\",\n    bbrktbrk: \"⎶\",\n    bcong: \"≌\",\n    Bcy: \"Б\",\n    bcy: \"б\",\n    bdquo: \"„\",\n    becaus: \"∵\",\n    Because: \"∵\",\n    because: \"∵\",\n    bemptyv: \"⦰\",\n    bepsi: \"϶\",\n    bernou: \"ℬ\",\n    Bernoullis: \"ℬ\",\n    Beta: \"Β\",\n    beta: \"β\",\n    beth: \"ℶ\",\n    between: \"≬\",\n    Bfr: \"\\uD835\\uDD05\",\n    bfr: \"\\uD835\\uDD1F\",\n    bigcap: \"⋂\",\n    bigcirc: \"◯\",\n    bigcup: \"⋃\",\n    bigodot: \"⨀\",\n    bigoplus: \"⨁\",\n    bigotimes: \"⨂\",\n    bigsqcup: \"⨆\",\n    bigstar: \"★\",\n    bigtriangledown: \"▽\",\n    bigtriangleup: \"△\",\n    biguplus: \"⨄\",\n    bigvee: \"⋁\",\n    bigwedge: \"⋀\",\n    bkarow: \"⤍\",\n    blacklozenge: \"⧫\",\n    blacksquare: \"▪\",\n    blacktriangle: \"▴\",\n    blacktriangledown: \"▾\",\n    blacktriangleleft: \"◂\",\n    blacktriangleright: \"▸\",\n    blank: \"␣\",\n    blk12: \"▒\",\n    blk14: \"░\",\n    blk34: \"▓\",\n    block: \"█\",\n    bne: \"=⃥\",\n    bnequiv: \"≡⃥\",\n    bNot: \"⫭\",\n    bnot: \"⌐\",\n    Bopf: \"\\uD835\\uDD39\",\n    bopf: \"\\uD835\\uDD53\",\n    bot: \"⊥\",\n    bottom: \"⊥\",\n    bowtie: \"⋈\",\n    boxbox: \"⧉\",\n    boxDL: \"╗\",\n    boxDl: \"╖\",\n    boxdL: \"╕\",\n    boxdl: \"┐\",\n    boxDR: \"╔\",\n    boxDr: \"╓\",\n    boxdR: \"╒\",\n    boxdr: \"┌\",\n    boxH: \"═\",\n    boxh: \"─\",\n    boxHD: \"╦\",\n    boxHd: \"╤\",\n    boxhD: \"╥\",\n    boxhd: \"┬\",\n    boxHU: \"╩\",\n    boxHu: \"╧\",\n    boxhU: \"╨\",\n    boxhu: \"┴\",\n    boxminus: \"⊟\",\n    boxplus: \"⊞\",\n    boxtimes: \"⊠\",\n    boxUL: \"╝\",\n    boxUl: \"╜\",\n    boxuL: \"╛\",\n    boxul: \"┘\",\n    boxUR: \"╚\",\n    boxUr: \"╙\",\n    boxuR: \"╘\",\n    boxur: \"└\",\n    boxV: \"║\",\n    boxv: \"│\",\n    boxVH: \"╬\",\n    boxVh: \"╫\",\n    boxvH: \"╪\",\n    boxvh: \"┼\",\n    boxVL: \"╣\",\n    boxVl: \"╢\",\n    boxvL: \"╡\",\n    boxvl: \"┤\",\n    boxVR: \"╠\",\n    boxVr: \"╟\",\n    boxvR: \"╞\",\n    boxvr: \"├\",\n    bprime: \"‵\",\n    Breve: \"˘\",\n    breve: \"˘\",\n    brvbar: \"\\xa6\",\n    Bscr: \"ℬ\",\n    bscr: \"\\uD835\\uDCB7\",\n    bsemi: \"⁏\",\n    bsim: \"∽\",\n    bsime: \"⋍\",\n    bsol: \"\\\\\",\n    bsolb: \"⧅\",\n    bsolhsub: \"⟈\",\n    bull: \"•\",\n    bullet: \"•\",\n    bump: \"≎\",\n    bumpE: \"⪮\",\n    bumpe: \"≏\",\n    Bumpeq: \"≎\",\n    bumpeq: \"≏\",\n    Cacute: \"Ć\",\n    cacute: \"ć\",\n    Cap: \"⋒\",\n    cap: \"∩\",\n    capand: \"⩄\",\n    capbrcup: \"⩉\",\n    capcap: \"⩋\",\n    capcup: \"⩇\",\n    capdot: \"⩀\",\n    CapitalDifferentialD: \"ⅅ\",\n    caps: \"∩︀\",\n    caret: \"⁁\",\n    caron: \"ˇ\",\n    Cayleys: \"ℭ\",\n    ccaps: \"⩍\",\n    Ccaron: \"Č\",\n    ccaron: \"č\",\n    Ccedil: \"\\xc7\",\n    ccedil: \"\\xe7\",\n    Ccirc: \"Ĉ\",\n    ccirc: \"ĉ\",\n    Cconint: \"∰\",\n    ccups: \"⩌\",\n    ccupssm: \"⩐\",\n    Cdot: \"Ċ\",\n    cdot: \"ċ\",\n    cedil: \"\\xb8\",\n    Cedilla: \"\\xb8\",\n    cemptyv: \"⦲\",\n    cent: \"\\xa2\",\n    CenterDot: \"\\xb7\",\n    centerdot: \"\\xb7\",\n    Cfr: \"ℭ\",\n    cfr: \"\\uD835\\uDD20\",\n    CHcy: \"Ч\",\n    chcy: \"ч\",\n    check: \"✓\",\n    checkmark: \"✓\",\n    Chi: \"Χ\",\n    chi: \"χ\",\n    cir: \"○\",\n    circ: \"ˆ\",\n    circeq: \"≗\",\n    circlearrowleft: \"↺\",\n    circlearrowright: \"↻\",\n    circledast: \"⊛\",\n    circledcirc: \"⊚\",\n    circleddash: \"⊝\",\n    CircleDot: \"⊙\",\n    circledR: \"\\xae\",\n    circledS: \"Ⓢ\",\n    CircleMinus: \"⊖\",\n    CirclePlus: \"⊕\",\n    CircleTimes: \"⊗\",\n    cirE: \"⧃\",\n    cire: \"≗\",\n    cirfnint: \"⨐\",\n    cirmid: \"⫯\",\n    cirscir: \"⧂\",\n    ClockwiseContourIntegral: \"∲\",\n    CloseCurlyDoubleQuote: \"”\",\n    CloseCurlyQuote: \"’\",\n    clubs: \"♣\",\n    clubsuit: \"♣\",\n    Colon: \"∷\",\n    colon: \":\",\n    Colone: \"⩴\",\n    colone: \"≔\",\n    coloneq: \"≔\",\n    comma: \",\",\n    commat: \"@\",\n    comp: \"∁\",\n    compfn: \"∘\",\n    complement: \"∁\",\n    complexes: \"ℂ\",\n    cong: \"≅\",\n    congdot: \"⩭\",\n    Congruent: \"≡\",\n    Conint: \"∯\",\n    conint: \"∮\",\n    ContourIntegral: \"∮\",\n    Copf: \"ℂ\",\n    copf: \"\\uD835\\uDD54\",\n    coprod: \"∐\",\n    Coproduct: \"∐\",\n    COPY: \"\\xa9\",\n    copy: \"\\xa9\",\n    copysr: \"℗\",\n    CounterClockwiseContourIntegral: \"∳\",\n    crarr: \"↵\",\n    Cross: \"⨯\",\n    cross: \"✗\",\n    Cscr: \"\\uD835\\uDC9E\",\n    cscr: \"\\uD835\\uDCB8\",\n    csub: \"⫏\",\n    csube: \"⫑\",\n    csup: \"⫐\",\n    csupe: \"⫒\",\n    ctdot: \"⋯\",\n    cudarrl: \"⤸\",\n    cudarrr: \"⤵\",\n    cuepr: \"⋞\",\n    cuesc: \"⋟\",\n    cularr: \"↶\",\n    cularrp: \"⤽\",\n    Cup: \"⋓\",\n    cup: \"∪\",\n    cupbrcap: \"⩈\",\n    CupCap: \"≍\",\n    cupcap: \"⩆\",\n    cupcup: \"⩊\",\n    cupdot: \"⊍\",\n    cupor: \"⩅\",\n    cups: \"∪︀\",\n    curarr: \"↷\",\n    curarrm: \"⤼\",\n    curlyeqprec: \"⋞\",\n    curlyeqsucc: \"⋟\",\n    curlyvee: \"⋎\",\n    curlywedge: \"⋏\",\n    curren: \"\\xa4\",\n    curvearrowleft: \"↶\",\n    curvearrowright: \"↷\",\n    cuvee: \"⋎\",\n    cuwed: \"⋏\",\n    cwconint: \"∲\",\n    cwint: \"∱\",\n    cylcty: \"⌭\",\n    Dagger: \"‡\",\n    dagger: \"†\",\n    daleth: \"ℸ\",\n    Darr: \"↡\",\n    dArr: \"⇓\",\n    darr: \"↓\",\n    dash: \"‐\",\n    Dashv: \"⫤\",\n    dashv: \"⊣\",\n    dbkarow: \"⤏\",\n    dblac: \"˝\",\n    Dcaron: \"Ď\",\n    dcaron: \"ď\",\n    Dcy: \"Д\",\n    dcy: \"д\",\n    DD: \"ⅅ\",\n    dd: \"ⅆ\",\n    ddagger: \"‡\",\n    ddarr: \"⇊\",\n    DDotrahd: \"⤑\",\n    ddotseq: \"⩷\",\n    deg: \"\\xb0\",\n    Del: \"∇\",\n    Delta: \"Δ\",\n    delta: \"δ\",\n    demptyv: \"⦱\",\n    dfisht: \"⥿\",\n    Dfr: \"\\uD835\\uDD07\",\n    dfr: \"\\uD835\\uDD21\",\n    dHar: \"⥥\",\n    dharl: \"⇃\",\n    dharr: \"⇂\",\n    DiacriticalAcute: \"\\xb4\",\n    DiacriticalDot: \"˙\",\n    DiacriticalDoubleAcute: \"˝\",\n    DiacriticalGrave: \"`\",\n    DiacriticalTilde: \"˜\",\n    diam: \"⋄\",\n    Diamond: \"⋄\",\n    diamond: \"⋄\",\n    diamondsuit: \"♦\",\n    diams: \"♦\",\n    die: \"\\xa8\",\n    DifferentialD: \"ⅆ\",\n    digamma: \"ϝ\",\n    disin: \"⋲\",\n    div: \"\\xf7\",\n    divide: \"\\xf7\",\n    divideontimes: \"⋇\",\n    divonx: \"⋇\",\n    DJcy: \"Ђ\",\n    djcy: \"ђ\",\n    dlcorn: \"⌞\",\n    dlcrop: \"⌍\",\n    dollar: \"$\",\n    Dopf: \"\\uD835\\uDD3B\",\n    dopf: \"\\uD835\\uDD55\",\n    Dot: \"\\xa8\",\n    dot: \"˙\",\n    DotDot: \"⃜\",\n    doteq: \"≐\",\n    doteqdot: \"≑\",\n    DotEqual: \"≐\",\n    dotminus: \"∸\",\n    dotplus: \"∔\",\n    dotsquare: \"⊡\",\n    doublebarwedge: \"⌆\",\n    DoubleContourIntegral: \"∯\",\n    DoubleDot: \"\\xa8\",\n    DoubleDownArrow: \"⇓\",\n    DoubleLeftArrow: \"⇐\",\n    DoubleLeftRightArrow: \"⇔\",\n    DoubleLeftTee: \"⫤\",\n    DoubleLongLeftArrow: \"⟸\",\n    DoubleLongLeftRightArrow: \"⟺\",\n    DoubleLongRightArrow: \"⟹\",\n    DoubleRightArrow: \"⇒\",\n    DoubleRightTee: \"⊨\",\n    DoubleUpArrow: \"⇑\",\n    DoubleUpDownArrow: \"⇕\",\n    DoubleVerticalBar: \"∥\",\n    DownArrow: \"↓\",\n    Downarrow: \"⇓\",\n    downarrow: \"↓\",\n    DownArrowBar: \"⤓\",\n    DownArrowUpArrow: \"⇵\",\n    DownBreve: \"̑\",\n    downdownarrows: \"⇊\",\n    downharpoonleft: \"⇃\",\n    downharpoonright: \"⇂\",\n    DownLeftRightVector: \"⥐\",\n    DownLeftTeeVector: \"⥞\",\n    DownLeftVector: \"↽\",\n    DownLeftVectorBar: \"⥖\",\n    DownRightTeeVector: \"⥟\",\n    DownRightVector: \"⇁\",\n    DownRightVectorBar: \"⥗\",\n    DownTee: \"⊤\",\n    DownTeeArrow: \"↧\",\n    drbkarow: \"⤐\",\n    drcorn: \"⌟\",\n    drcrop: \"⌌\",\n    Dscr: \"\\uD835\\uDC9F\",\n    dscr: \"\\uD835\\uDCB9\",\n    DScy: \"Ѕ\",\n    dscy: \"ѕ\",\n    dsol: \"⧶\",\n    Dstrok: \"Đ\",\n    dstrok: \"đ\",\n    dtdot: \"⋱\",\n    dtri: \"▿\",\n    dtrif: \"▾\",\n    duarr: \"⇵\",\n    duhar: \"⥯\",\n    dwangle: \"⦦\",\n    DZcy: \"Џ\",\n    dzcy: \"џ\",\n    dzigrarr: \"⟿\",\n    Eacute: \"\\xc9\",\n    eacute: \"\\xe9\",\n    easter: \"⩮\",\n    Ecaron: \"Ě\",\n    ecaron: \"ě\",\n    ecir: \"≖\",\n    Ecirc: \"\\xca\",\n    ecirc: \"\\xea\",\n    ecolon: \"≕\",\n    Ecy: \"Э\",\n    ecy: \"э\",\n    eDDot: \"⩷\",\n    Edot: \"Ė\",\n    eDot: \"≑\",\n    edot: \"ė\",\n    ee: \"ⅇ\",\n    efDot: \"≒\",\n    Efr: \"\\uD835\\uDD08\",\n    efr: \"\\uD835\\uDD22\",\n    eg: \"⪚\",\n    Egrave: \"\\xc8\",\n    egrave: \"\\xe8\",\n    egs: \"⪖\",\n    egsdot: \"⪘\",\n    el: \"⪙\",\n    Element: \"∈\",\n    elinters: \"⏧\",\n    ell: \"ℓ\",\n    els: \"⪕\",\n    elsdot: \"⪗\",\n    Emacr: \"Ē\",\n    emacr: \"ē\",\n    empty: \"∅\",\n    emptyset: \"∅\",\n    EmptySmallSquare: \"◻\",\n    emptyv: \"∅\",\n    EmptyVerySmallSquare: \"▫\",\n    emsp: \" \",\n    emsp13: \" \",\n    emsp14: \" \",\n    ENG: \"Ŋ\",\n    eng: \"ŋ\",\n    ensp: \" \",\n    Eogon: \"Ę\",\n    eogon: \"ę\",\n    Eopf: \"\\uD835\\uDD3C\",\n    eopf: \"\\uD835\\uDD56\",\n    epar: \"⋕\",\n    eparsl: \"⧣\",\n    eplus: \"⩱\",\n    epsi: \"ε\",\n    Epsilon: \"Ε\",\n    epsilon: \"ε\",\n    epsiv: \"ϵ\",\n    eqcirc: \"≖\",\n    eqcolon: \"≕\",\n    eqsim: \"≂\",\n    eqslantgtr: \"⪖\",\n    eqslantless: \"⪕\",\n    Equal: \"⩵\",\n    equals: \"=\",\n    EqualTilde: \"≂\",\n    equest: \"≟\",\n    Equilibrium: \"⇌\",\n    equiv: \"≡\",\n    equivDD: \"⩸\",\n    eqvparsl: \"⧥\",\n    erarr: \"⥱\",\n    erDot: \"≓\",\n    Escr: \"ℰ\",\n    escr: \"ℯ\",\n    esdot: \"≐\",\n    Esim: \"⩳\",\n    esim: \"≂\",\n    Eta: \"Η\",\n    eta: \"η\",\n    ETH: \"\\xd0\",\n    eth: \"\\xf0\",\n    Euml: \"\\xcb\",\n    euml: \"\\xeb\",\n    euro: \"€\",\n    excl: \"!\",\n    exist: \"∃\",\n    Exists: \"∃\",\n    expectation: \"ℰ\",\n    ExponentialE: \"ⅇ\",\n    exponentiale: \"ⅇ\",\n    fallingdotseq: \"≒\",\n    Fcy: \"Ф\",\n    fcy: \"ф\",\n    female: \"♀\",\n    ffilig: \"ﬃ\",\n    fflig: \"ﬀ\",\n    ffllig: \"ﬄ\",\n    Ffr: \"\\uD835\\uDD09\",\n    ffr: \"\\uD835\\uDD23\",\n    filig: \"ﬁ\",\n    FilledSmallSquare: \"◼\",\n    FilledVerySmallSquare: \"▪\",\n    fjlig: \"fj\",\n    flat: \"♭\",\n    fllig: \"ﬂ\",\n    fltns: \"▱\",\n    fnof: \"ƒ\",\n    Fopf: \"\\uD835\\uDD3D\",\n    fopf: \"\\uD835\\uDD57\",\n    ForAll: \"∀\",\n    forall: \"∀\",\n    fork: \"⋔\",\n    forkv: \"⫙\",\n    Fouriertrf: \"ℱ\",\n    fpartint: \"⨍\",\n    frac12: \"\\xbd\",\n    frac13: \"⅓\",\n    frac14: \"\\xbc\",\n    frac15: \"⅕\",\n    frac16: \"⅙\",\n    frac18: \"⅛\",\n    frac23: \"⅔\",\n    frac25: \"⅖\",\n    frac34: \"\\xbe\",\n    frac35: \"⅗\",\n    frac38: \"⅜\",\n    frac45: \"⅘\",\n    frac56: \"⅚\",\n    frac58: \"⅝\",\n    frac78: \"⅞\",\n    frasl: \"⁄\",\n    frown: \"⌢\",\n    Fscr: \"ℱ\",\n    fscr: \"\\uD835\\uDCBB\",\n    gacute: \"ǵ\",\n    Gamma: \"Γ\",\n    gamma: \"γ\",\n    Gammad: \"Ϝ\",\n    gammad: \"ϝ\",\n    gap: \"⪆\",\n    Gbreve: \"Ğ\",\n    gbreve: \"ğ\",\n    Gcedil: \"Ģ\",\n    Gcirc: \"Ĝ\",\n    gcirc: \"ĝ\",\n    Gcy: \"Г\",\n    gcy: \"г\",\n    Gdot: \"Ġ\",\n    gdot: \"ġ\",\n    gE: \"≧\",\n    ge: \"≥\",\n    gEl: \"⪌\",\n    gel: \"⋛\",\n    geq: \"≥\",\n    geqq: \"≧\",\n    geqslant: \"⩾\",\n    ges: \"⩾\",\n    gescc: \"⪩\",\n    gesdot: \"⪀\",\n    gesdoto: \"⪂\",\n    gesdotol: \"⪄\",\n    gesl: \"⋛︀\",\n    gesles: \"⪔\",\n    Gfr: \"\\uD835\\uDD0A\",\n    gfr: \"\\uD835\\uDD24\",\n    Gg: \"⋙\",\n    gg: \"≫\",\n    ggg: \"⋙\",\n    gimel: \"ℷ\",\n    GJcy: \"Ѓ\",\n    gjcy: \"ѓ\",\n    gl: \"≷\",\n    gla: \"⪥\",\n    glE: \"⪒\",\n    glj: \"⪤\",\n    gnap: \"⪊\",\n    gnapprox: \"⪊\",\n    gnE: \"≩\",\n    gne: \"⪈\",\n    gneq: \"⪈\",\n    gneqq: \"≩\",\n    gnsim: \"⋧\",\n    Gopf: \"\\uD835\\uDD3E\",\n    gopf: \"\\uD835\\uDD58\",\n    grave: \"`\",\n    GreaterEqual: \"≥\",\n    GreaterEqualLess: \"⋛\",\n    GreaterFullEqual: \"≧\",\n    GreaterGreater: \"⪢\",\n    GreaterLess: \"≷\",\n    GreaterSlantEqual: \"⩾\",\n    GreaterTilde: \"≳\",\n    Gscr: \"\\uD835\\uDCA2\",\n    gscr: \"ℊ\",\n    gsim: \"≳\",\n    gsime: \"⪎\",\n    gsiml: \"⪐\",\n    Gt: \"≫\",\n    GT: \">\",\n    gt: \">\",\n    gtcc: \"⪧\",\n    gtcir: \"⩺\",\n    gtdot: \"⋗\",\n    gtlPar: \"⦕\",\n    gtquest: \"⩼\",\n    gtrapprox: \"⪆\",\n    gtrarr: \"⥸\",\n    gtrdot: \"⋗\",\n    gtreqless: \"⋛\",\n    gtreqqless: \"⪌\",\n    gtrless: \"≷\",\n    gtrsim: \"≳\",\n    gvertneqq: \"≩︀\",\n    gvnE: \"≩︀\",\n    Hacek: \"ˇ\",\n    hairsp: \" \",\n    half: \"\\xbd\",\n    hamilt: \"ℋ\",\n    HARDcy: \"Ъ\",\n    hardcy: \"ъ\",\n    hArr: \"⇔\",\n    harr: \"↔\",\n    harrcir: \"⥈\",\n    harrw: \"↭\",\n    Hat: \"^\",\n    hbar: \"ℏ\",\n    Hcirc: \"Ĥ\",\n    hcirc: \"ĥ\",\n    hearts: \"♥\",\n    heartsuit: \"♥\",\n    hellip: \"…\",\n    hercon: \"⊹\",\n    Hfr: \"ℌ\",\n    hfr: \"\\uD835\\uDD25\",\n    HilbertSpace: \"ℋ\",\n    hksearow: \"⤥\",\n    hkswarow: \"⤦\",\n    hoarr: \"⇿\",\n    homtht: \"∻\",\n    hookleftarrow: \"↩\",\n    hookrightarrow: \"↪\",\n    Hopf: \"ℍ\",\n    hopf: \"\\uD835\\uDD59\",\n    horbar: \"―\",\n    HorizontalLine: \"─\",\n    Hscr: \"ℋ\",\n    hscr: \"\\uD835\\uDCBD\",\n    hslash: \"ℏ\",\n    Hstrok: \"Ħ\",\n    hstrok: \"ħ\",\n    HumpDownHump: \"≎\",\n    HumpEqual: \"≏\",\n    hybull: \"⁃\",\n    hyphen: \"‐\",\n    Iacute: \"\\xcd\",\n    iacute: \"\\xed\",\n    ic: \"⁣\",\n    Icirc: \"\\xce\",\n    icirc: \"\\xee\",\n    Icy: \"И\",\n    icy: \"и\",\n    Idot: \"İ\",\n    IEcy: \"Е\",\n    iecy: \"е\",\n    iexcl: \"\\xa1\",\n    iff: \"⇔\",\n    Ifr: \"ℑ\",\n    ifr: \"\\uD835\\uDD26\",\n    Igrave: \"\\xcc\",\n    igrave: \"\\xec\",\n    ii: \"ⅈ\",\n    iiiint: \"⨌\",\n    iiint: \"∭\",\n    iinfin: \"⧜\",\n    iiota: \"℩\",\n    IJlig: \"Ĳ\",\n    ijlig: \"ĳ\",\n    Im: \"ℑ\",\n    Imacr: \"Ī\",\n    imacr: \"ī\",\n    image: \"ℑ\",\n    ImaginaryI: \"ⅈ\",\n    imagline: \"ℐ\",\n    imagpart: \"ℑ\",\n    imath: \"ı\",\n    imof: \"⊷\",\n    imped: \"Ƶ\",\n    Implies: \"⇒\",\n    in: \"∈\",\n    incare: \"℅\",\n    infin: \"∞\",\n    infintie: \"⧝\",\n    inodot: \"ı\",\n    Int: \"∬\",\n    int: \"∫\",\n    intcal: \"⊺\",\n    integers: \"ℤ\",\n    Integral: \"∫\",\n    intercal: \"⊺\",\n    Intersection: \"⋂\",\n    intlarhk: \"⨗\",\n    intprod: \"⨼\",\n    InvisibleComma: \"⁣\",\n    InvisibleTimes: \"⁢\",\n    IOcy: \"Ё\",\n    iocy: \"ё\",\n    Iogon: \"Į\",\n    iogon: \"į\",\n    Iopf: \"\\uD835\\uDD40\",\n    iopf: \"\\uD835\\uDD5A\",\n    Iota: \"Ι\",\n    iota: \"ι\",\n    iprod: \"⨼\",\n    iquest: \"\\xbf\",\n    Iscr: \"ℐ\",\n    iscr: \"\\uD835\\uDCBE\",\n    isin: \"∈\",\n    isindot: \"⋵\",\n    isinE: \"⋹\",\n    isins: \"⋴\",\n    isinsv: \"⋳\",\n    isinv: \"∈\",\n    it: \"⁢\",\n    Itilde: \"Ĩ\",\n    itilde: \"ĩ\",\n    Iukcy: \"І\",\n    iukcy: \"і\",\n    Iuml: \"\\xcf\",\n    iuml: \"\\xef\",\n    Jcirc: \"Ĵ\",\n    jcirc: \"ĵ\",\n    Jcy: \"Й\",\n    jcy: \"й\",\n    Jfr: \"\\uD835\\uDD0D\",\n    jfr: \"\\uD835\\uDD27\",\n    jmath: \"ȷ\",\n    Jopf: \"\\uD835\\uDD41\",\n    jopf: \"\\uD835\\uDD5B\",\n    Jscr: \"\\uD835\\uDCA5\",\n    jscr: \"\\uD835\\uDCBF\",\n    Jsercy: \"Ј\",\n    jsercy: \"ј\",\n    Jukcy: \"Є\",\n    jukcy: \"є\",\n    Kappa: \"Κ\",\n    kappa: \"κ\",\n    kappav: \"ϰ\",\n    Kcedil: \"Ķ\",\n    kcedil: \"ķ\",\n    Kcy: \"К\",\n    kcy: \"к\",\n    Kfr: \"\\uD835\\uDD0E\",\n    kfr: \"\\uD835\\uDD28\",\n    kgreen: \"ĸ\",\n    KHcy: \"Х\",\n    khcy: \"х\",\n    KJcy: \"Ќ\",\n    kjcy: \"ќ\",\n    Kopf: \"\\uD835\\uDD42\",\n    kopf: \"\\uD835\\uDD5C\",\n    Kscr: \"\\uD835\\uDCA6\",\n    kscr: \"\\uD835\\uDCC0\",\n    lAarr: \"⇚\",\n    Lacute: \"Ĺ\",\n    lacute: \"ĺ\",\n    laemptyv: \"⦴\",\n    lagran: \"ℒ\",\n    Lambda: \"Λ\",\n    lambda: \"λ\",\n    Lang: \"⟪\",\n    lang: \"⟨\",\n    langd: \"⦑\",\n    langle: \"⟨\",\n    lap: \"⪅\",\n    Laplacetrf: \"ℒ\",\n    laquo: \"\\xab\",\n    Larr: \"↞\",\n    lArr: \"⇐\",\n    larr: \"←\",\n    larrb: \"⇤\",\n    larrbfs: \"⤟\",\n    larrfs: \"⤝\",\n    larrhk: \"↩\",\n    larrlp: \"↫\",\n    larrpl: \"⤹\",\n    larrsim: \"⥳\",\n    larrtl: \"↢\",\n    lat: \"⪫\",\n    lAtail: \"⤛\",\n    latail: \"⤙\",\n    late: \"⪭\",\n    lates: \"⪭︀\",\n    lBarr: \"⤎\",\n    lbarr: \"⤌\",\n    lbbrk: \"❲\",\n    lbrace: \"{\",\n    lbrack: \"[\",\n    lbrke: \"⦋\",\n    lbrksld: \"⦏\",\n    lbrkslu: \"⦍\",\n    Lcaron: \"Ľ\",\n    lcaron: \"ľ\",\n    Lcedil: \"Ļ\",\n    lcedil: \"ļ\",\n    lceil: \"⌈\",\n    lcub: \"{\",\n    Lcy: \"Л\",\n    lcy: \"л\",\n    ldca: \"⤶\",\n    ldquo: \"“\",\n    ldquor: \"„\",\n    ldrdhar: \"⥧\",\n    ldrushar: \"⥋\",\n    ldsh: \"↲\",\n    lE: \"≦\",\n    le: \"≤\",\n    LeftAngleBracket: \"⟨\",\n    LeftArrow: \"←\",\n    Leftarrow: \"⇐\",\n    leftarrow: \"←\",\n    LeftArrowBar: \"⇤\",\n    LeftArrowRightArrow: \"⇆\",\n    leftarrowtail: \"↢\",\n    LeftCeiling: \"⌈\",\n    LeftDoubleBracket: \"⟦\",\n    LeftDownTeeVector: \"⥡\",\n    LeftDownVector: \"⇃\",\n    LeftDownVectorBar: \"⥙\",\n    LeftFloor: \"⌊\",\n    leftharpoondown: \"↽\",\n    leftharpoonup: \"↼\",\n    leftleftarrows: \"⇇\",\n    LeftRightArrow: \"↔\",\n    Leftrightarrow: \"⇔\",\n    leftrightarrow: \"↔\",\n    leftrightarrows: \"⇆\",\n    leftrightharpoons: \"⇋\",\n    leftrightsquigarrow: \"↭\",\n    LeftRightVector: \"⥎\",\n    LeftTee: \"⊣\",\n    LeftTeeArrow: \"↤\",\n    LeftTeeVector: \"⥚\",\n    leftthreetimes: \"⋋\",\n    LeftTriangle: \"⊲\",\n    LeftTriangleBar: \"⧏\",\n    LeftTriangleEqual: \"⊴\",\n    LeftUpDownVector: \"⥑\",\n    LeftUpTeeVector: \"⥠\",\n    LeftUpVector: \"↿\",\n    LeftUpVectorBar: \"⥘\",\n    LeftVector: \"↼\",\n    LeftVectorBar: \"⥒\",\n    lEg: \"⪋\",\n    leg: \"⋚\",\n    leq: \"≤\",\n    leqq: \"≦\",\n    leqslant: \"⩽\",\n    les: \"⩽\",\n    lescc: \"⪨\",\n    lesdot: \"⩿\",\n    lesdoto: \"⪁\",\n    lesdotor: \"⪃\",\n    lesg: \"⋚︀\",\n    lesges: \"⪓\",\n    lessapprox: \"⪅\",\n    lessdot: \"⋖\",\n    lesseqgtr: \"⋚\",\n    lesseqqgtr: \"⪋\",\n    LessEqualGreater: \"⋚\",\n    LessFullEqual: \"≦\",\n    LessGreater: \"≶\",\n    lessgtr: \"≶\",\n    LessLess: \"⪡\",\n    lesssim: \"≲\",\n    LessSlantEqual: \"⩽\",\n    LessTilde: \"≲\",\n    lfisht: \"⥼\",\n    lfloor: \"⌊\",\n    Lfr: \"\\uD835\\uDD0F\",\n    lfr: \"\\uD835\\uDD29\",\n    lg: \"≶\",\n    lgE: \"⪑\",\n    lHar: \"⥢\",\n    lhard: \"↽\",\n    lharu: \"↼\",\n    lharul: \"⥪\",\n    lhblk: \"▄\",\n    LJcy: \"Љ\",\n    ljcy: \"љ\",\n    Ll: \"⋘\",\n    ll: \"≪\",\n    llarr: \"⇇\",\n    llcorner: \"⌞\",\n    Lleftarrow: \"⇚\",\n    llhard: \"⥫\",\n    lltri: \"◺\",\n    Lmidot: \"Ŀ\",\n    lmidot: \"ŀ\",\n    lmoust: \"⎰\",\n    lmoustache: \"⎰\",\n    lnap: \"⪉\",\n    lnapprox: \"⪉\",\n    lnE: \"≨\",\n    lne: \"⪇\",\n    lneq: \"⪇\",\n    lneqq: \"≨\",\n    lnsim: \"⋦\",\n    loang: \"⟬\",\n    loarr: \"⇽\",\n    lobrk: \"⟦\",\n    LongLeftArrow: \"⟵\",\n    Longleftarrow: \"⟸\",\n    longleftarrow: \"⟵\",\n    LongLeftRightArrow: \"⟷\",\n    Longleftrightarrow: \"⟺\",\n    longleftrightarrow: \"⟷\",\n    longmapsto: \"⟼\",\n    LongRightArrow: \"⟶\",\n    Longrightarrow: \"⟹\",\n    longrightarrow: \"⟶\",\n    looparrowleft: \"↫\",\n    looparrowright: \"↬\",\n    lopar: \"⦅\",\n    Lopf: \"\\uD835\\uDD43\",\n    lopf: \"\\uD835\\uDD5D\",\n    loplus: \"⨭\",\n    lotimes: \"⨴\",\n    lowast: \"∗\",\n    lowbar: \"_\",\n    LowerLeftArrow: \"↙\",\n    LowerRightArrow: \"↘\",\n    loz: \"◊\",\n    lozenge: \"◊\",\n    lozf: \"⧫\",\n    lpar: \"(\",\n    lparlt: \"⦓\",\n    lrarr: \"⇆\",\n    lrcorner: \"⌟\",\n    lrhar: \"⇋\",\n    lrhard: \"⥭\",\n    lrm: \"‎\",\n    lrtri: \"⊿\",\n    lsaquo: \"‹\",\n    Lscr: \"ℒ\",\n    lscr: \"\\uD835\\uDCC1\",\n    Lsh: \"↰\",\n    lsh: \"↰\",\n    lsim: \"≲\",\n    lsime: \"⪍\",\n    lsimg: \"⪏\",\n    lsqb: \"[\",\n    lsquo: \"‘\",\n    lsquor: \"‚\",\n    Lstrok: \"Ł\",\n    lstrok: \"ł\",\n    Lt: \"≪\",\n    LT: \"<\",\n    lt: \"<\",\n    ltcc: \"⪦\",\n    ltcir: \"⩹\",\n    ltdot: \"⋖\",\n    lthree: \"⋋\",\n    ltimes: \"⋉\",\n    ltlarr: \"⥶\",\n    ltquest: \"⩻\",\n    ltri: \"◃\",\n    ltrie: \"⊴\",\n    ltrif: \"◂\",\n    ltrPar: \"⦖\",\n    lurdshar: \"⥊\",\n    luruhar: \"⥦\",\n    lvertneqq: \"≨︀\",\n    lvnE: \"≨︀\",\n    macr: \"\\xaf\",\n    male: \"♂\",\n    malt: \"✠\",\n    maltese: \"✠\",\n    Map: \"⤅\",\n    map: \"↦\",\n    mapsto: \"↦\",\n    mapstodown: \"↧\",\n    mapstoleft: \"↤\",\n    mapstoup: \"↥\",\n    marker: \"▮\",\n    mcomma: \"⨩\",\n    Mcy: \"М\",\n    mcy: \"м\",\n    mdash: \"—\",\n    mDDot: \"∺\",\n    measuredangle: \"∡\",\n    MediumSpace: \" \",\n    Mellintrf: \"ℳ\",\n    Mfr: \"\\uD835\\uDD10\",\n    mfr: \"\\uD835\\uDD2A\",\n    mho: \"℧\",\n    micro: \"\\xb5\",\n    mid: \"∣\",\n    midast: \"*\",\n    midcir: \"⫰\",\n    middot: \"\\xb7\",\n    minus: \"−\",\n    minusb: \"⊟\",\n    minusd: \"∸\",\n    minusdu: \"⨪\",\n    MinusPlus: \"∓\",\n    mlcp: \"⫛\",\n    mldr: \"…\",\n    mnplus: \"∓\",\n    models: \"⊧\",\n    Mopf: \"\\uD835\\uDD44\",\n    mopf: \"\\uD835\\uDD5E\",\n    mp: \"∓\",\n    Mscr: \"ℳ\",\n    mscr: \"\\uD835\\uDCC2\",\n    mstpos: \"∾\",\n    Mu: \"Μ\",\n    mu: \"μ\",\n    multimap: \"⊸\",\n    mumap: \"⊸\",\n    nabla: \"∇\",\n    Nacute: \"Ń\",\n    nacute: \"ń\",\n    nang: \"∠⃒\",\n    nap: \"≉\",\n    napE: \"⩰̸\",\n    napid: \"≋̸\",\n    napos: \"ŉ\",\n    napprox: \"≉\",\n    natur: \"♮\",\n    natural: \"♮\",\n    naturals: \"ℕ\",\n    nbsp: \"\\xa0\",\n    nbump: \"≎̸\",\n    nbumpe: \"≏̸\",\n    ncap: \"⩃\",\n    Ncaron: \"Ň\",\n    ncaron: \"ň\",\n    Ncedil: \"Ņ\",\n    ncedil: \"ņ\",\n    ncong: \"≇\",\n    ncongdot: \"⩭̸\",\n    ncup: \"⩂\",\n    Ncy: \"Н\",\n    ncy: \"н\",\n    ndash: \"–\",\n    ne: \"≠\",\n    nearhk: \"⤤\",\n    neArr: \"⇗\",\n    nearr: \"↗\",\n    nearrow: \"↗\",\n    nedot: \"≐̸\",\n    NegativeMediumSpace: \"​\",\n    NegativeThickSpace: \"​\",\n    NegativeThinSpace: \"​\",\n    NegativeVeryThinSpace: \"​\",\n    nequiv: \"≢\",\n    nesear: \"⤨\",\n    nesim: \"≂̸\",\n    NestedGreaterGreater: \"≫\",\n    NestedLessLess: \"≪\",\n    NewLine: \"\\n\",\n    nexist: \"∄\",\n    nexists: \"∄\",\n    Nfr: \"\\uD835\\uDD11\",\n    nfr: \"\\uD835\\uDD2B\",\n    ngE: \"≧̸\",\n    nge: \"≱\",\n    ngeq: \"≱\",\n    ngeqq: \"≧̸\",\n    ngeqslant: \"⩾̸\",\n    nges: \"⩾̸\",\n    nGg: \"⋙̸\",\n    ngsim: \"≵\",\n    nGt: \"≫⃒\",\n    ngt: \"≯\",\n    ngtr: \"≯\",\n    nGtv: \"≫̸\",\n    nhArr: \"⇎\",\n    nharr: \"↮\",\n    nhpar: \"⫲\",\n    ni: \"∋\",\n    nis: \"⋼\",\n    nisd: \"⋺\",\n    niv: \"∋\",\n    NJcy: \"Њ\",\n    njcy: \"њ\",\n    nlArr: \"⇍\",\n    nlarr: \"↚\",\n    nldr: \"‥\",\n    nlE: \"≦̸\",\n    nle: \"≰\",\n    nLeftarrow: \"⇍\",\n    nleftarrow: \"↚\",\n    nLeftrightarrow: \"⇎\",\n    nleftrightarrow: \"↮\",\n    nleq: \"≰\",\n    nleqq: \"≦̸\",\n    nleqslant: \"⩽̸\",\n    nles: \"⩽̸\",\n    nless: \"≮\",\n    nLl: \"⋘̸\",\n    nlsim: \"≴\",\n    nLt: \"≪⃒\",\n    nlt: \"≮\",\n    nltri: \"⋪\",\n    nltrie: \"⋬\",\n    nLtv: \"≪̸\",\n    nmid: \"∤\",\n    NoBreak: \"⁠\",\n    NonBreakingSpace: \"\\xa0\",\n    Nopf: \"ℕ\",\n    nopf: \"\\uD835\\uDD5F\",\n    Not: \"⫬\",\n    not: \"\\xac\",\n    NotCongruent: \"≢\",\n    NotCupCap: \"≭\",\n    NotDoubleVerticalBar: \"∦\",\n    NotElement: \"∉\",\n    NotEqual: \"≠\",\n    NotEqualTilde: \"≂̸\",\n    NotExists: \"∄\",\n    NotGreater: \"≯\",\n    NotGreaterEqual: \"≱\",\n    NotGreaterFullEqual: \"≧̸\",\n    NotGreaterGreater: \"≫̸\",\n    NotGreaterLess: \"≹\",\n    NotGreaterSlantEqual: \"⩾̸\",\n    NotGreaterTilde: \"≵\",\n    NotHumpDownHump: \"≎̸\",\n    NotHumpEqual: \"≏̸\",\n    notin: \"∉\",\n    notindot: \"⋵̸\",\n    notinE: \"⋹̸\",\n    notinva: \"∉\",\n    notinvb: \"⋷\",\n    notinvc: \"⋶\",\n    NotLeftTriangle: \"⋪\",\n    NotLeftTriangleBar: \"⧏̸\",\n    NotLeftTriangleEqual: \"⋬\",\n    NotLess: \"≮\",\n    NotLessEqual: \"≰\",\n    NotLessGreater: \"≸\",\n    NotLessLess: \"≪̸\",\n    NotLessSlantEqual: \"⩽̸\",\n    NotLessTilde: \"≴\",\n    NotNestedGreaterGreater: \"⪢̸\",\n    NotNestedLessLess: \"⪡̸\",\n    notni: \"∌\",\n    notniva: \"∌\",\n    notnivb: \"⋾\",\n    notnivc: \"⋽\",\n    NotPrecedes: \"⊀\",\n    NotPrecedesEqual: \"⪯̸\",\n    NotPrecedesSlantEqual: \"⋠\",\n    NotReverseElement: \"∌\",\n    NotRightTriangle: \"⋫\",\n    NotRightTriangleBar: \"⧐̸\",\n    NotRightTriangleEqual: \"⋭\",\n    NotSquareSubset: \"⊏̸\",\n    NotSquareSubsetEqual: \"⋢\",\n    NotSquareSuperset: \"⊐̸\",\n    NotSquareSupersetEqual: \"⋣\",\n    NotSubset: \"⊂⃒\",\n    NotSubsetEqual: \"⊈\",\n    NotSucceeds: \"⊁\",\n    NotSucceedsEqual: \"⪰̸\",\n    NotSucceedsSlantEqual: \"⋡\",\n    NotSucceedsTilde: \"≿̸\",\n    NotSuperset: \"⊃⃒\",\n    NotSupersetEqual: \"⊉\",\n    NotTilde: \"≁\",\n    NotTildeEqual: \"≄\",\n    NotTildeFullEqual: \"≇\",\n    NotTildeTilde: \"≉\",\n    NotVerticalBar: \"∤\",\n    npar: \"∦\",\n    nparallel: \"∦\",\n    nparsl: \"⫽⃥\",\n    npart: \"∂̸\",\n    npolint: \"⨔\",\n    npr: \"⊀\",\n    nprcue: \"⋠\",\n    npre: \"⪯̸\",\n    nprec: \"⊀\",\n    npreceq: \"⪯̸\",\n    nrArr: \"⇏\",\n    nrarr: \"↛\",\n    nrarrc: \"⤳̸\",\n    nrarrw: \"↝̸\",\n    nRightarrow: \"⇏\",\n    nrightarrow: \"↛\",\n    nrtri: \"⋫\",\n    nrtrie: \"⋭\",\n    nsc: \"⊁\",\n    nsccue: \"⋡\",\n    nsce: \"⪰̸\",\n    Nscr: \"\\uD835\\uDCA9\",\n    nscr: \"\\uD835\\uDCC3\",\n    nshortmid: \"∤\",\n    nshortparallel: \"∦\",\n    nsim: \"≁\",\n    nsime: \"≄\",\n    nsimeq: \"≄\",\n    nsmid: \"∤\",\n    nspar: \"∦\",\n    nsqsube: \"⋢\",\n    nsqsupe: \"⋣\",\n    nsub: \"⊄\",\n    nsubE: \"⫅̸\",\n    nsube: \"⊈\",\n    nsubset: \"⊂⃒\",\n    nsubseteq: \"⊈\",\n    nsubseteqq: \"⫅̸\",\n    nsucc: \"⊁\",\n    nsucceq: \"⪰̸\",\n    nsup: \"⊅\",\n    nsupE: \"⫆̸\",\n    nsupe: \"⊉\",\n    nsupset: \"⊃⃒\",\n    nsupseteq: \"⊉\",\n    nsupseteqq: \"⫆̸\",\n    ntgl: \"≹\",\n    Ntilde: \"\\xd1\",\n    ntilde: \"\\xf1\",\n    ntlg: \"≸\",\n    ntriangleleft: \"⋪\",\n    ntrianglelefteq: \"⋬\",\n    ntriangleright: \"⋫\",\n    ntrianglerighteq: \"⋭\",\n    Nu: \"Ν\",\n    nu: \"ν\",\n    num: \"#\",\n    numero: \"№\",\n    numsp: \" \",\n    nvap: \"≍⃒\",\n    nVDash: \"⊯\",\n    nVdash: \"⊮\",\n    nvDash: \"⊭\",\n    nvdash: \"⊬\",\n    nvge: \"≥⃒\",\n    nvgt: \">⃒\",\n    nvHarr: \"⤄\",\n    nvinfin: \"⧞\",\n    nvlArr: \"⤂\",\n    nvle: \"≤⃒\",\n    nvlt: \"<⃒\",\n    nvltrie: \"⊴⃒\",\n    nvrArr: \"⤃\",\n    nvrtrie: \"⊵⃒\",\n    nvsim: \"∼⃒\",\n    nwarhk: \"⤣\",\n    nwArr: \"⇖\",\n    nwarr: \"↖\",\n    nwarrow: \"↖\",\n    nwnear: \"⤧\",\n    Oacute: \"\\xd3\",\n    oacute: \"\\xf3\",\n    oast: \"⊛\",\n    ocir: \"⊚\",\n    Ocirc: \"\\xd4\",\n    ocirc: \"\\xf4\",\n    Ocy: \"О\",\n    ocy: \"о\",\n    odash: \"⊝\",\n    Odblac: \"Ő\",\n    odblac: \"ő\",\n    odiv: \"⨸\",\n    odot: \"⊙\",\n    odsold: \"⦼\",\n    OElig: \"Œ\",\n    oelig: \"œ\",\n    ofcir: \"⦿\",\n    Ofr: \"\\uD835\\uDD12\",\n    ofr: \"\\uD835\\uDD2C\",\n    ogon: \"˛\",\n    Ograve: \"\\xd2\",\n    ograve: \"\\xf2\",\n    ogt: \"⧁\",\n    ohbar: \"⦵\",\n    ohm: \"Ω\",\n    oint: \"∮\",\n    olarr: \"↺\",\n    olcir: \"⦾\",\n    olcross: \"⦻\",\n    oline: \"‾\",\n    olt: \"⧀\",\n    Omacr: \"Ō\",\n    omacr: \"ō\",\n    Omega: \"Ω\",\n    omega: \"ω\",\n    Omicron: \"Ο\",\n    omicron: \"ο\",\n    omid: \"⦶\",\n    ominus: \"⊖\",\n    Oopf: \"\\uD835\\uDD46\",\n    oopf: \"\\uD835\\uDD60\",\n    opar: \"⦷\",\n    OpenCurlyDoubleQuote: \"“\",\n    OpenCurlyQuote: \"‘\",\n    operp: \"⦹\",\n    oplus: \"⊕\",\n    Or: \"⩔\",\n    or: \"∨\",\n    orarr: \"↻\",\n    ord: \"⩝\",\n    order: \"ℴ\",\n    orderof: \"ℴ\",\n    ordf: \"\\xaa\",\n    ordm: \"\\xba\",\n    origof: \"⊶\",\n    oror: \"⩖\",\n    orslope: \"⩗\",\n    orv: \"⩛\",\n    oS: \"Ⓢ\",\n    Oscr: \"\\uD835\\uDCAA\",\n    oscr: \"ℴ\",\n    Oslash: \"\\xd8\",\n    oslash: \"\\xf8\",\n    osol: \"⊘\",\n    Otilde: \"\\xd5\",\n    otilde: \"\\xf5\",\n    Otimes: \"⨷\",\n    otimes: \"⊗\",\n    otimesas: \"⨶\",\n    Ouml: \"\\xd6\",\n    ouml: \"\\xf6\",\n    ovbar: \"⌽\",\n    OverBar: \"‾\",\n    OverBrace: \"⏞\",\n    OverBracket: \"⎴\",\n    OverParenthesis: \"⏜\",\n    par: \"∥\",\n    para: \"\\xb6\",\n    parallel: \"∥\",\n    parsim: \"⫳\",\n    parsl: \"⫽\",\n    part: \"∂\",\n    PartialD: \"∂\",\n    Pcy: \"П\",\n    pcy: \"п\",\n    percnt: \"%\",\n    period: \".\",\n    permil: \"‰\",\n    perp: \"⊥\",\n    pertenk: \"‱\",\n    Pfr: \"\\uD835\\uDD13\",\n    pfr: \"\\uD835\\uDD2D\",\n    Phi: \"Φ\",\n    phi: \"φ\",\n    phiv: \"ϕ\",\n    phmmat: \"ℳ\",\n    phone: \"☎\",\n    Pi: \"Π\",\n    pi: \"π\",\n    pitchfork: \"⋔\",\n    piv: \"ϖ\",\n    planck: \"ℏ\",\n    planckh: \"ℎ\",\n    plankv: \"ℏ\",\n    plus: \"+\",\n    plusacir: \"⨣\",\n    plusb: \"⊞\",\n    pluscir: \"⨢\",\n    plusdo: \"∔\",\n    plusdu: \"⨥\",\n    pluse: \"⩲\",\n    PlusMinus: \"\\xb1\",\n    plusmn: \"\\xb1\",\n    plussim: \"⨦\",\n    plustwo: \"⨧\",\n    pm: \"\\xb1\",\n    Poincareplane: \"ℌ\",\n    pointint: \"⨕\",\n    Popf: \"ℙ\",\n    popf: \"\\uD835\\uDD61\",\n    pound: \"\\xa3\",\n    Pr: \"⪻\",\n    pr: \"≺\",\n    prap: \"⪷\",\n    prcue: \"≼\",\n    prE: \"⪳\",\n    pre: \"⪯\",\n    prec: \"≺\",\n    precapprox: \"⪷\",\n    preccurlyeq: \"≼\",\n    Precedes: \"≺\",\n    PrecedesEqual: \"⪯\",\n    PrecedesSlantEqual: \"≼\",\n    PrecedesTilde: \"≾\",\n    preceq: \"⪯\",\n    precnapprox: \"⪹\",\n    precneqq: \"⪵\",\n    precnsim: \"⋨\",\n    precsim: \"≾\",\n    Prime: \"″\",\n    prime: \"′\",\n    primes: \"ℙ\",\n    prnap: \"⪹\",\n    prnE: \"⪵\",\n    prnsim: \"⋨\",\n    prod: \"∏\",\n    Product: \"∏\",\n    profalar: \"⌮\",\n    profline: \"⌒\",\n    profsurf: \"⌓\",\n    prop: \"∝\",\n    Proportion: \"∷\",\n    Proportional: \"∝\",\n    propto: \"∝\",\n    prsim: \"≾\",\n    prurel: \"⊰\",\n    Pscr: \"\\uD835\\uDCAB\",\n    pscr: \"\\uD835\\uDCC5\",\n    Psi: \"Ψ\",\n    psi: \"ψ\",\n    puncsp: \" \",\n    Qfr: \"\\uD835\\uDD14\",\n    qfr: \"\\uD835\\uDD2E\",\n    qint: \"⨌\",\n    Qopf: \"ℚ\",\n    qopf: \"\\uD835\\uDD62\",\n    qprime: \"⁗\",\n    Qscr: \"\\uD835\\uDCAC\",\n    qscr: \"\\uD835\\uDCC6\",\n    quaternions: \"ℍ\",\n    quatint: \"⨖\",\n    quest: \"?\",\n    questeq: \"≟\",\n    QUOT: '\"',\n    quot: '\"',\n    rAarr: \"⇛\",\n    race: \"∽̱\",\n    Racute: \"Ŕ\",\n    racute: \"ŕ\",\n    radic: \"√\",\n    raemptyv: \"⦳\",\n    Rang: \"⟫\",\n    rang: \"⟩\",\n    rangd: \"⦒\",\n    range: \"⦥\",\n    rangle: \"⟩\",\n    raquo: \"\\xbb\",\n    Rarr: \"↠\",\n    rArr: \"⇒\",\n    rarr: \"→\",\n    rarrap: \"⥵\",\n    rarrb: \"⇥\",\n    rarrbfs: \"⤠\",\n    rarrc: \"⤳\",\n    rarrfs: \"⤞\",\n    rarrhk: \"↪\",\n    rarrlp: \"↬\",\n    rarrpl: \"⥅\",\n    rarrsim: \"⥴\",\n    Rarrtl: \"⤖\",\n    rarrtl: \"↣\",\n    rarrw: \"↝\",\n    rAtail: \"⤜\",\n    ratail: \"⤚\",\n    ratio: \"∶\",\n    rationals: \"ℚ\",\n    RBarr: \"⤐\",\n    rBarr: \"⤏\",\n    rbarr: \"⤍\",\n    rbbrk: \"❳\",\n    rbrace: \"}\",\n    rbrack: \"]\",\n    rbrke: \"⦌\",\n    rbrksld: \"⦎\",\n    rbrkslu: \"⦐\",\n    Rcaron: \"Ř\",\n    rcaron: \"ř\",\n    Rcedil: \"Ŗ\",\n    rcedil: \"ŗ\",\n    rceil: \"⌉\",\n    rcub: \"}\",\n    Rcy: \"Р\",\n    rcy: \"р\",\n    rdca: \"⤷\",\n    rdldhar: \"⥩\",\n    rdquo: \"”\",\n    rdquor: \"”\",\n    rdsh: \"↳\",\n    Re: \"ℜ\",\n    real: \"ℜ\",\n    realine: \"ℛ\",\n    realpart: \"ℜ\",\n    reals: \"ℝ\",\n    rect: \"▭\",\n    REG: \"\\xae\",\n    reg: \"\\xae\",\n    ReverseElement: \"∋\",\n    ReverseEquilibrium: \"⇋\",\n    ReverseUpEquilibrium: \"⥯\",\n    rfisht: \"⥽\",\n    rfloor: \"⌋\",\n    Rfr: \"ℜ\",\n    rfr: \"\\uD835\\uDD2F\",\n    rHar: \"⥤\",\n    rhard: \"⇁\",\n    rharu: \"⇀\",\n    rharul: \"⥬\",\n    Rho: \"Ρ\",\n    rho: \"ρ\",\n    rhov: \"ϱ\",\n    RightAngleBracket: \"⟩\",\n    RightArrow: \"→\",\n    Rightarrow: \"⇒\",\n    rightarrow: \"→\",\n    RightArrowBar: \"⇥\",\n    RightArrowLeftArrow: \"⇄\",\n    rightarrowtail: \"↣\",\n    RightCeiling: \"⌉\",\n    RightDoubleBracket: \"⟧\",\n    RightDownTeeVector: \"⥝\",\n    RightDownVector: \"⇂\",\n    RightDownVectorBar: \"⥕\",\n    RightFloor: \"⌋\",\n    rightharpoondown: \"⇁\",\n    rightharpoonup: \"⇀\",\n    rightleftarrows: \"⇄\",\n    rightleftharpoons: \"⇌\",\n    rightrightarrows: \"⇉\",\n    rightsquigarrow: \"↝\",\n    RightTee: \"⊢\",\n    RightTeeArrow: \"↦\",\n    RightTeeVector: \"⥛\",\n    rightthreetimes: \"⋌\",\n    RightTriangle: \"⊳\",\n    RightTriangleBar: \"⧐\",\n    RightTriangleEqual: \"⊵\",\n    RightUpDownVector: \"⥏\",\n    RightUpTeeVector: \"⥜\",\n    RightUpVector: \"↾\",\n    RightUpVectorBar: \"⥔\",\n    RightVector: \"⇀\",\n    RightVectorBar: \"⥓\",\n    ring: \"˚\",\n    risingdotseq: \"≓\",\n    rlarr: \"⇄\",\n    rlhar: \"⇌\",\n    rlm: \"‏\",\n    rmoust: \"⎱\",\n    rmoustache: \"⎱\",\n    rnmid: \"⫮\",\n    roang: \"⟭\",\n    roarr: \"⇾\",\n    robrk: \"⟧\",\n    ropar: \"⦆\",\n    Ropf: \"ℝ\",\n    ropf: \"\\uD835\\uDD63\",\n    roplus: \"⨮\",\n    rotimes: \"⨵\",\n    RoundImplies: \"⥰\",\n    rpar: \")\",\n    rpargt: \"⦔\",\n    rppolint: \"⨒\",\n    rrarr: \"⇉\",\n    Rrightarrow: \"⇛\",\n    rsaquo: \"›\",\n    Rscr: \"ℛ\",\n    rscr: \"\\uD835\\uDCC7\",\n    Rsh: \"↱\",\n    rsh: \"↱\",\n    rsqb: \"]\",\n    rsquo: \"’\",\n    rsquor: \"’\",\n    rthree: \"⋌\",\n    rtimes: \"⋊\",\n    rtri: \"▹\",\n    rtrie: \"⊵\",\n    rtrif: \"▸\",\n    rtriltri: \"⧎\",\n    RuleDelayed: \"⧴\",\n    ruluhar: \"⥨\",\n    rx: \"℞\",\n    Sacute: \"Ś\",\n    sacute: \"ś\",\n    sbquo: \"‚\",\n    Sc: \"⪼\",\n    sc: \"≻\",\n    scap: \"⪸\",\n    Scaron: \"Š\",\n    scaron: \"š\",\n    sccue: \"≽\",\n    scE: \"⪴\",\n    sce: \"⪰\",\n    Scedil: \"Ş\",\n    scedil: \"ş\",\n    Scirc: \"Ŝ\",\n    scirc: \"ŝ\",\n    scnap: \"⪺\",\n    scnE: \"⪶\",\n    scnsim: \"⋩\",\n    scpolint: \"⨓\",\n    scsim: \"≿\",\n    Scy: \"С\",\n    scy: \"с\",\n    sdot: \"⋅\",\n    sdotb: \"⊡\",\n    sdote: \"⩦\",\n    searhk: \"⤥\",\n    seArr: \"⇘\",\n    searr: \"↘\",\n    searrow: \"↘\",\n    sect: \"\\xa7\",\n    semi: \";\",\n    seswar: \"⤩\",\n    setminus: \"∖\",\n    setmn: \"∖\",\n    sext: \"✶\",\n    Sfr: \"\\uD835\\uDD16\",\n    sfr: \"\\uD835\\uDD30\",\n    sfrown: \"⌢\",\n    sharp: \"♯\",\n    SHCHcy: \"Щ\",\n    shchcy: \"щ\",\n    SHcy: \"Ш\",\n    shcy: \"ш\",\n    ShortDownArrow: \"↓\",\n    ShortLeftArrow: \"←\",\n    shortmid: \"∣\",\n    shortparallel: \"∥\",\n    ShortRightArrow: \"→\",\n    ShortUpArrow: \"↑\",\n    shy: \"\\xad\",\n    Sigma: \"Σ\",\n    sigma: \"σ\",\n    sigmaf: \"ς\",\n    sigmav: \"ς\",\n    sim: \"∼\",\n    simdot: \"⩪\",\n    sime: \"≃\",\n    simeq: \"≃\",\n    simg: \"⪞\",\n    simgE: \"⪠\",\n    siml: \"⪝\",\n    simlE: \"⪟\",\n    simne: \"≆\",\n    simplus: \"⨤\",\n    simrarr: \"⥲\",\n    slarr: \"←\",\n    SmallCircle: \"∘\",\n    smallsetminus: \"∖\",\n    smashp: \"⨳\",\n    smeparsl: \"⧤\",\n    smid: \"∣\",\n    smile: \"⌣\",\n    smt: \"⪪\",\n    smte: \"⪬\",\n    smtes: \"⪬︀\",\n    SOFTcy: \"Ь\",\n    softcy: \"ь\",\n    sol: \"/\",\n    solb: \"⧄\",\n    solbar: \"⌿\",\n    Sopf: \"\\uD835\\uDD4A\",\n    sopf: \"\\uD835\\uDD64\",\n    spades: \"♠\",\n    spadesuit: \"♠\",\n    spar: \"∥\",\n    sqcap: \"⊓\",\n    sqcaps: \"⊓︀\",\n    sqcup: \"⊔\",\n    sqcups: \"⊔︀\",\n    Sqrt: \"√\",\n    sqsub: \"⊏\",\n    sqsube: \"⊑\",\n    sqsubset: \"⊏\",\n    sqsubseteq: \"⊑\",\n    sqsup: \"⊐\",\n    sqsupe: \"⊒\",\n    sqsupset: \"⊐\",\n    sqsupseteq: \"⊒\",\n    squ: \"□\",\n    Square: \"□\",\n    square: \"□\",\n    SquareIntersection: \"⊓\",\n    SquareSubset: \"⊏\",\n    SquareSubsetEqual: \"⊑\",\n    SquareSuperset: \"⊐\",\n    SquareSupersetEqual: \"⊒\",\n    SquareUnion: \"⊔\",\n    squarf: \"▪\",\n    squf: \"▪\",\n    srarr: \"→\",\n    Sscr: \"\\uD835\\uDCAE\",\n    sscr: \"\\uD835\\uDCC8\",\n    ssetmn: \"∖\",\n    ssmile: \"⌣\",\n    sstarf: \"⋆\",\n    Star: \"⋆\",\n    star: \"☆\",\n    starf: \"★\",\n    straightepsilon: \"ϵ\",\n    straightphi: \"ϕ\",\n    strns: \"\\xaf\",\n    Sub: \"⋐\",\n    sub: \"⊂\",\n    subdot: \"⪽\",\n    subE: \"⫅\",\n    sube: \"⊆\",\n    subedot: \"⫃\",\n    submult: \"⫁\",\n    subnE: \"⫋\",\n    subne: \"⊊\",\n    subplus: \"⪿\",\n    subrarr: \"⥹\",\n    Subset: \"⋐\",\n    subset: \"⊂\",\n    subseteq: \"⊆\",\n    subseteqq: \"⫅\",\n    SubsetEqual: \"⊆\",\n    subsetneq: \"⊊\",\n    subsetneqq: \"⫋\",\n    subsim: \"⫇\",\n    subsub: \"⫕\",\n    subsup: \"⫓\",\n    succ: \"≻\",\n    succapprox: \"⪸\",\n    succcurlyeq: \"≽\",\n    Succeeds: \"≻\",\n    SucceedsEqual: \"⪰\",\n    SucceedsSlantEqual: \"≽\",\n    SucceedsTilde: \"≿\",\n    succeq: \"⪰\",\n    succnapprox: \"⪺\",\n    succneqq: \"⪶\",\n    succnsim: \"⋩\",\n    succsim: \"≿\",\n    SuchThat: \"∋\",\n    Sum: \"∑\",\n    sum: \"∑\",\n    sung: \"♪\",\n    Sup: \"⋑\",\n    sup: \"⊃\",\n    sup1: \"\\xb9\",\n    sup2: \"\\xb2\",\n    sup3: \"\\xb3\",\n    supdot: \"⪾\",\n    supdsub: \"⫘\",\n    supE: \"⫆\",\n    supe: \"⊇\",\n    supedot: \"⫄\",\n    Superset: \"⊃\",\n    SupersetEqual: \"⊇\",\n    suphsol: \"⟉\",\n    suphsub: \"⫗\",\n    suplarr: \"⥻\",\n    supmult: \"⫂\",\n    supnE: \"⫌\",\n    supne: \"⊋\",\n    supplus: \"⫀\",\n    Supset: \"⋑\",\n    supset: \"⊃\",\n    supseteq: \"⊇\",\n    supseteqq: \"⫆\",\n    supsetneq: \"⊋\",\n    supsetneqq: \"⫌\",\n    supsim: \"⫈\",\n    supsub: \"⫔\",\n    supsup: \"⫖\",\n    swarhk: \"⤦\",\n    swArr: \"⇙\",\n    swarr: \"↙\",\n    swarrow: \"↙\",\n    swnwar: \"⤪\",\n    szlig: \"\\xdf\",\n    Tab: \"\t\",\n    target: \"⌖\",\n    Tau: \"Τ\",\n    tau: \"τ\",\n    tbrk: \"⎴\",\n    Tcaron: \"Ť\",\n    tcaron: \"ť\",\n    Tcedil: \"Ţ\",\n    tcedil: \"ţ\",\n    Tcy: \"Т\",\n    tcy: \"т\",\n    tdot: \"⃛\",\n    telrec: \"⌕\",\n    Tfr: \"\\uD835\\uDD17\",\n    tfr: \"\\uD835\\uDD31\",\n    there4: \"∴\",\n    Therefore: \"∴\",\n    therefore: \"∴\",\n    Theta: \"Θ\",\n    theta: \"θ\",\n    thetasym: \"ϑ\",\n    thetav: \"ϑ\",\n    thickapprox: \"≈\",\n    thicksim: \"∼\",\n    ThickSpace: \"  \",\n    thinsp: \" \",\n    ThinSpace: \" \",\n    thkap: \"≈\",\n    thksim: \"∼\",\n    THORN: \"\\xde\",\n    thorn: \"\\xfe\",\n    Tilde: \"∼\",\n    tilde: \"˜\",\n    TildeEqual: \"≃\",\n    TildeFullEqual: \"≅\",\n    TildeTilde: \"≈\",\n    times: \"\\xd7\",\n    timesb: \"⊠\",\n    timesbar: \"⨱\",\n    timesd: \"⨰\",\n    tint: \"∭\",\n    toea: \"⤨\",\n    top: \"⊤\",\n    topbot: \"⌶\",\n    topcir: \"⫱\",\n    Topf: \"\\uD835\\uDD4B\",\n    topf: \"\\uD835\\uDD65\",\n    topfork: \"⫚\",\n    tosa: \"⤩\",\n    tprime: \"‴\",\n    TRADE: \"™\",\n    trade: \"™\",\n    triangle: \"▵\",\n    triangledown: \"▿\",\n    triangleleft: \"◃\",\n    trianglelefteq: \"⊴\",\n    triangleq: \"≜\",\n    triangleright: \"▹\",\n    trianglerighteq: \"⊵\",\n    tridot: \"◬\",\n    trie: \"≜\",\n    triminus: \"⨺\",\n    TripleDot: \"⃛\",\n    triplus: \"⨹\",\n    trisb: \"⧍\",\n    tritime: \"⨻\",\n    trpezium: \"⏢\",\n    Tscr: \"\\uD835\\uDCAF\",\n    tscr: \"\\uD835\\uDCC9\",\n    TScy: \"Ц\",\n    tscy: \"ц\",\n    TSHcy: \"Ћ\",\n    tshcy: \"ћ\",\n    Tstrok: \"Ŧ\",\n    tstrok: \"ŧ\",\n    twixt: \"≬\",\n    twoheadleftarrow: \"↞\",\n    twoheadrightarrow: \"↠\",\n    Uacute: \"\\xda\",\n    uacute: \"\\xfa\",\n    Uarr: \"↟\",\n    uArr: \"⇑\",\n    uarr: \"↑\",\n    Uarrocir: \"⥉\",\n    Ubrcy: \"Ў\",\n    ubrcy: \"ў\",\n    Ubreve: \"Ŭ\",\n    ubreve: \"ŭ\",\n    Ucirc: \"\\xdb\",\n    ucirc: \"\\xfb\",\n    Ucy: \"У\",\n    ucy: \"у\",\n    udarr: \"⇅\",\n    Udblac: \"Ű\",\n    udblac: \"ű\",\n    udhar: \"⥮\",\n    ufisht: \"⥾\",\n    Ufr: \"\\uD835\\uDD18\",\n    ufr: \"\\uD835\\uDD32\",\n    Ugrave: \"\\xd9\",\n    ugrave: \"\\xf9\",\n    uHar: \"⥣\",\n    uharl: \"↿\",\n    uharr: \"↾\",\n    uhblk: \"▀\",\n    ulcorn: \"⌜\",\n    ulcorner: \"⌜\",\n    ulcrop: \"⌏\",\n    ultri: \"◸\",\n    Umacr: \"Ū\",\n    umacr: \"ū\",\n    uml: \"\\xa8\",\n    UnderBar: \"_\",\n    UnderBrace: \"⏟\",\n    UnderBracket: \"⎵\",\n    UnderParenthesis: \"⏝\",\n    Union: \"⋃\",\n    UnionPlus: \"⊎\",\n    Uogon: \"Ų\",\n    uogon: \"ų\",\n    Uopf: \"\\uD835\\uDD4C\",\n    uopf: \"\\uD835\\uDD66\",\n    UpArrow: \"↑\",\n    Uparrow: \"⇑\",\n    uparrow: \"↑\",\n    UpArrowBar: \"⤒\",\n    UpArrowDownArrow: \"⇅\",\n    UpDownArrow: \"↕\",\n    Updownarrow: \"⇕\",\n    updownarrow: \"↕\",\n    UpEquilibrium: \"⥮\",\n    upharpoonleft: \"↿\",\n    upharpoonright: \"↾\",\n    uplus: \"⊎\",\n    UpperLeftArrow: \"↖\",\n    UpperRightArrow: \"↗\",\n    Upsi: \"ϒ\",\n    upsi: \"υ\",\n    upsih: \"ϒ\",\n    Upsilon: \"Υ\",\n    upsilon: \"υ\",\n    UpTee: \"⊥\",\n    UpTeeArrow: \"↥\",\n    upuparrows: \"⇈\",\n    urcorn: \"⌝\",\n    urcorner: \"⌝\",\n    urcrop: \"⌎\",\n    Uring: \"Ů\",\n    uring: \"ů\",\n    urtri: \"◹\",\n    Uscr: \"\\uD835\\uDCB0\",\n    uscr: \"\\uD835\\uDCCA\",\n    utdot: \"⋰\",\n    Utilde: \"Ũ\",\n    utilde: \"ũ\",\n    utri: \"▵\",\n    utrif: \"▴\",\n    uuarr: \"⇈\",\n    Uuml: \"\\xdc\",\n    uuml: \"\\xfc\",\n    uwangle: \"⦧\",\n    vangrt: \"⦜\",\n    varepsilon: \"ϵ\",\n    varkappa: \"ϰ\",\n    varnothing: \"∅\",\n    varphi: \"ϕ\",\n    varpi: \"ϖ\",\n    varpropto: \"∝\",\n    vArr: \"⇕\",\n    varr: \"↕\",\n    varrho: \"ϱ\",\n    varsigma: \"ς\",\n    varsubsetneq: \"⊊︀\",\n    varsubsetneqq: \"⫋︀\",\n    varsupsetneq: \"⊋︀\",\n    varsupsetneqq: \"⫌︀\",\n    vartheta: \"ϑ\",\n    vartriangleleft: \"⊲\",\n    vartriangleright: \"⊳\",\n    Vbar: \"⫫\",\n    vBar: \"⫨\",\n    vBarv: \"⫩\",\n    Vcy: \"В\",\n    vcy: \"в\",\n    VDash: \"⊫\",\n    Vdash: \"⊩\",\n    vDash: \"⊨\",\n    vdash: \"⊢\",\n    Vdashl: \"⫦\",\n    Vee: \"⋁\",\n    vee: \"∨\",\n    veebar: \"⊻\",\n    veeeq: \"≚\",\n    vellip: \"⋮\",\n    Verbar: \"‖\",\n    verbar: \"|\",\n    Vert: \"‖\",\n    vert: \"|\",\n    VerticalBar: \"∣\",\n    VerticalLine: \"|\",\n    VerticalSeparator: \"❘\",\n    VerticalTilde: \"≀\",\n    VeryThinSpace: \" \",\n    Vfr: \"\\uD835\\uDD19\",\n    vfr: \"\\uD835\\uDD33\",\n    vltri: \"⊲\",\n    vnsub: \"⊂⃒\",\n    vnsup: \"⊃⃒\",\n    Vopf: \"\\uD835\\uDD4D\",\n    vopf: \"\\uD835\\uDD67\",\n    vprop: \"∝\",\n    vrtri: \"⊳\",\n    Vscr: \"\\uD835\\uDCB1\",\n    vscr: \"\\uD835\\uDCCB\",\n    vsubnE: \"⫋︀\",\n    vsubne: \"⊊︀\",\n    vsupnE: \"⫌︀\",\n    vsupne: \"⊋︀\",\n    Vvdash: \"⊪\",\n    vzigzag: \"⦚\",\n    Wcirc: \"Ŵ\",\n    wcirc: \"ŵ\",\n    wedbar: \"⩟\",\n    Wedge: \"⋀\",\n    wedge: \"∧\",\n    wedgeq: \"≙\",\n    weierp: \"℘\",\n    Wfr: \"\\uD835\\uDD1A\",\n    wfr: \"\\uD835\\uDD34\",\n    Wopf: \"\\uD835\\uDD4E\",\n    wopf: \"\\uD835\\uDD68\",\n    wp: \"℘\",\n    wr: \"≀\",\n    wreath: \"≀\",\n    Wscr: \"\\uD835\\uDCB2\",\n    wscr: \"\\uD835\\uDCCC\",\n    xcap: \"⋂\",\n    xcirc: \"◯\",\n    xcup: \"⋃\",\n    xdtri: \"▽\",\n    Xfr: \"\\uD835\\uDD1B\",\n    xfr: \"\\uD835\\uDD35\",\n    xhArr: \"⟺\",\n    xharr: \"⟷\",\n    Xi: \"Ξ\",\n    xi: \"ξ\",\n    xlArr: \"⟸\",\n    xlarr: \"⟵\",\n    xmap: \"⟼\",\n    xnis: \"⋻\",\n    xodot: \"⨀\",\n    Xopf: \"\\uD835\\uDD4F\",\n    xopf: \"\\uD835\\uDD69\",\n    xoplus: \"⨁\",\n    xotime: \"⨂\",\n    xrArr: \"⟹\",\n    xrarr: \"⟶\",\n    Xscr: \"\\uD835\\uDCB3\",\n    xscr: \"\\uD835\\uDCCD\",\n    xsqcup: \"⨆\",\n    xuplus: \"⨄\",\n    xutri: \"△\",\n    xvee: \"⋁\",\n    xwedge: \"⋀\",\n    Yacute: \"\\xdd\",\n    yacute: \"\\xfd\",\n    YAcy: \"Я\",\n    yacy: \"я\",\n    Ycirc: \"Ŷ\",\n    ycirc: \"ŷ\",\n    Ycy: \"Ы\",\n    ycy: \"ы\",\n    yen: \"\\xa5\",\n    Yfr: \"\\uD835\\uDD1C\",\n    yfr: \"\\uD835\\uDD36\",\n    YIcy: \"Ї\",\n    yicy: \"ї\",\n    Yopf: \"\\uD835\\uDD50\",\n    yopf: \"\\uD835\\uDD6A\",\n    Yscr: \"\\uD835\\uDCB4\",\n    yscr: \"\\uD835\\uDCCE\",\n    YUcy: \"Ю\",\n    yucy: \"ю\",\n    Yuml: \"Ÿ\",\n    yuml: \"\\xff\",\n    Zacute: \"Ź\",\n    zacute: \"ź\",\n    Zcaron: \"Ž\",\n    zcaron: \"ž\",\n    Zcy: \"З\",\n    zcy: \"з\",\n    Zdot: \"Ż\",\n    zdot: \"ż\",\n    zeetrf: \"ℨ\",\n    ZeroWidthSpace: \"​\",\n    Zeta: \"Ζ\",\n    zeta: \"ζ\",\n    Zfr: \"ℨ\",\n    zfr: \"\\uD835\\uDD37\",\n    ZHcy: \"Ж\",\n    zhcy: \"ж\",\n    zigrarr: \"⇝\",\n    Zopf: \"ℤ\",\n    zopf: \"\\uD835\\uDD6B\",\n    Zscr: \"\\uD835\\uDCB5\",\n    zscr: \"\\uD835\\uDCCF\",\n    zwj: \"‍\",\n    zwnj: \"‌\"\n});\n/**\n * @deprecated use `HTML_ENTITIES` instead\n * @see HTML_ENTITIES\n */ exports.entityMap = exports.HTML_ENTITIES;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/entities.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/index.js":
/*!***************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var dom = __webpack_require__(/*! ./dom */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom.js\");\nexports.DOMImplementation = dom.DOMImplementation;\nexports.XMLSerializer = dom.XMLSerializer;\nexports.DOMParser = __webpack_require__(/*! ./dom-parser */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/dom-parser.js\").DOMParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B4bWxkb20veG1sZG9tL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxNQUFNQyxtQkFBT0EsQ0FBQztBQUNsQkMseUJBQXlCLEdBQUdGLElBQUlHLGlCQUFpQjtBQUNqREQscUJBQXFCLEdBQUdGLElBQUlJLGFBQWE7QUFDekNGLCtIQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9AeG1sZG9tL3htbGRvbS9saWIvaW5kZXguanM/Y2YxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZG9tID0gcmVxdWlyZSgnLi9kb20nKVxuZXhwb3J0cy5ET01JbXBsZW1lbnRhdGlvbiA9IGRvbS5ET01JbXBsZW1lbnRhdGlvblxuZXhwb3J0cy5YTUxTZXJpYWxpemVyID0gZG9tLlhNTFNlcmlhbGl6ZXJcbmV4cG9ydHMuRE9NUGFyc2VyID0gcmVxdWlyZSgnLi9kb20tcGFyc2VyJykuRE9NUGFyc2VyXG4iXSwibmFtZXMiOlsiZG9tIiwicmVxdWlyZSIsImV4cG9ydHMiLCJET01JbXBsZW1lbnRhdGlvbiIsIlhNTFNlcmlhbGl6ZXIiLCJET01QYXJzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js":
/*!*************************************************!*\
  !*** ../node_modules/@xmldom/xmldom/lib/sax.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var NAMESPACE = (__webpack_require__(/*! ./conventions */ \"(ssr)/../node_modules/@xmldom/xmldom/lib/conventions.js\").NAMESPACE);\n//[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/ //\\u10000-\\uEFFFF\n;\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\nvar tagNamePattern = new RegExp(\"^\" + nameStartChar.source + nameChar.source + \"*(?::\" + nameStartChar.source + nameChar.source + \"*)?$\");\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n//S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_SPACE = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\nvar S_ATTR_END = 5; //attr value end and no space(quot end)\nvar S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\nvar S_TAG_CLOSE = 7; //closed el<el />\n/**\n * Creates an error that will not be caught by XMLReader aka the SAX parser.\n *\n * @param {string} message\n * @param {any?} locator Optional, can provide details about the location in the source\n * @constructor\n */ function ParseError(message, locator) {\n    this.message = message;\n    this.locator = locator;\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);\n}\nParseError.prototype = new Error();\nParseError.prototype.name = ParseError.name;\nfunction XMLReader() {}\nXMLReader.prototype = {\n    parse: function(source, defaultNSMap, entityMap) {\n        var domBuilder = this.domBuilder;\n        domBuilder.startDocument();\n        _copy(defaultNSMap, defaultNSMap = {});\n        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);\n        domBuilder.endDocument();\n    }\n};\nfunction parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n    function fixedFromCharCode(code) {\n        // String.prototype.fromCharCode does not supports\n        // > 2 bytes unicode chars directly\n        if (code > 0xffff) {\n            code -= 0x10000;\n            var surrogate1 = 0xd800 + (code >> 10), surrogate2 = 0xdc00 + (code & 0x3ff);\n            return String.fromCharCode(surrogate1, surrogate2);\n        } else {\n            return String.fromCharCode(code);\n        }\n    }\n    function entityReplacer(a) {\n        var k = a.slice(1, -1);\n        if (Object.hasOwnProperty.call(entityMap, k)) {\n            return entityMap[k];\n        } else if (k.charAt(0) === \"#\") {\n            return fixedFromCharCode(parseInt(k.substr(1).replace(\"x\", \"0x\")));\n        } else {\n            errorHandler.error(\"entity not found:\" + a);\n            return a;\n        }\n    }\n    function appendText(end) {\n        if (end > start) {\n            var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n            locator && position(start);\n            domBuilder.characters(xt, 0, end - start);\n            start = end;\n        }\n    }\n    function position(p, m) {\n        while(p >= lineEnd && (m = linePattern.exec(source))){\n            lineStart = m.index;\n            lineEnd = lineStart + m[0].length;\n            locator.lineNumber++;\n        //console.log('line++:',locator,startPos,endPos)\n        }\n        locator.columnNumber = p - lineStart + 1;\n    }\n    var lineStart = 0;\n    var lineEnd = 0;\n    var linePattern = /.*(?:\\r\\n?|\\n)|.*$/g;\n    var locator = domBuilder.locator;\n    var parseStack = [\n        {\n            currentNSMap: defaultNSMapCopy\n        }\n    ];\n    var closeMap = {};\n    var start = 0;\n    while(true){\n        try {\n            var tagStart = source.indexOf(\"<\", start);\n            if (tagStart < 0) {\n                if (!source.substr(start).match(/^\\s*$/)) {\n                    var doc = domBuilder.doc;\n                    var text = doc.createTextNode(source.substr(start));\n                    doc.appendChild(text);\n                    domBuilder.currentElement = text;\n                }\n                return;\n            }\n            if (tagStart > start) {\n                appendText(tagStart);\n            }\n            switch(source.charAt(tagStart + 1)){\n                case \"/\":\n                    var end = source.indexOf(\">\", tagStart + 3);\n                    var tagName = source.substring(tagStart + 2, end).replace(/[ \\t\\n\\r]+$/g, \"\");\n                    var config = parseStack.pop();\n                    if (end < 0) {\n                        tagName = source.substring(tagStart + 2).replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" is not complete:\" + config.tagName);\n                        end = tagStart + 1 + tagName.length;\n                    } else if (tagName.match(/\\s</)) {\n                        tagName = tagName.replace(/[\\s<].*/, \"\");\n                        errorHandler.error(\"end tag name: \" + tagName + \" maybe not complete\");\n                        end = tagStart + 1 + tagName.length;\n                    }\n                    var localNSMap = config.localNSMap;\n                    var endMatch = config.tagName == tagName;\n                    var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();\n                    if (endIgnoreCaseMach) {\n                        domBuilder.endElement(config.uri, config.localName, tagName);\n                        if (localNSMap) {\n                            for(var prefix in localNSMap){\n                                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                                    domBuilder.endPrefixMapping(prefix);\n                                }\n                            }\n                        }\n                        if (!endMatch) {\n                            errorHandler.fatalError(\"end tag name: \" + tagName + \" is not match the current start tagName:\" + config.tagName); // No known test case\n                        }\n                    } else {\n                        parseStack.push(config);\n                    }\n                    end++;\n                    break;\n                // end elment\n                case \"?\":\n                    locator && position(tagStart);\n                    end = parseInstruction(source, tagStart, domBuilder);\n                    break;\n                case \"!\":\n                    locator && position(tagStart);\n                    end = parseDCC(source, tagStart, domBuilder, errorHandler);\n                    break;\n                default:\n                    locator && position(tagStart);\n                    var el = new ElementAttributes();\n                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n                    //elStartEnd\n                    var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);\n                    var len = el.length;\n                    if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n                        el.closed = true;\n                        if (!entityMap.nbsp) {\n                            errorHandler.warning(\"unclosed xml attribute\");\n                        }\n                    }\n                    if (locator && len) {\n                        var locator2 = copyLocator(locator, {});\n                        //try{//attribute position fixed\n                        for(var i = 0; i < len; i++){\n                            var a = el[i];\n                            position(a.offset);\n                            a.locator = copyLocator(locator, {});\n                        }\n                        domBuilder.locator = locator2;\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                        domBuilder.locator = locator;\n                    } else {\n                        if (appendElement(el, domBuilder, currentNSMap)) {\n                            parseStack.push(el);\n                        }\n                    }\n                    if (NAMESPACE.isHTML(el.uri) && !el.closed) {\n                        end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n                    } else {\n                        end++;\n                    }\n            }\n        } catch (e) {\n            if (e instanceof ParseError) {\n                throw e;\n            }\n            errorHandler.error(\"element parse error: \" + e);\n            end = -1;\n        }\n        if (end > start) {\n            start = end;\n        } else {\n            //TODO: 这里有可能sax回退，有位置错误风险\n            appendText(Math.max(tagStart, start) + 1);\n        }\n    }\n}\nfunction copyLocator(f, t) {\n    t.lineNumber = f.lineNumber;\n    t.columnNumber = f.columnNumber;\n    return t;\n}\n/**\n * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\n * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\n */ function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {\n    /**\n\t * @param {string} qname\n\t * @param {string} value\n\t * @param {number} startIndex\n\t */ function addAttribute(qname, value, startIndex) {\n        if (el.attributeNames.hasOwnProperty(qname)) {\n            errorHandler.fatalError(\"Attribute \" + qname + \" redefined\");\n        }\n        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize\n        // since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\n        // - recursive replacement of (DTD) entity references\n        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\n        value.replace(/[\\t\\n\\r]/g, \" \").replace(/&#?\\w+;/g, entityReplacer), startIndex);\n    }\n    var attrName;\n    var value;\n    var p = ++start;\n    var s = S_TAG; //status\n    while(true){\n        var c = source.charAt(p);\n        switch(c){\n            case \"=\":\n                if (s === S_ATTR) {\n                    attrName = source.slice(start, p);\n                    s = S_EQ;\n                } else if (s === S_ATTR_SPACE) {\n                    s = S_EQ;\n                } else {\n                    //fatalError: equal must after attrName or space after attrName\n                    throw new Error(\"attribute equal must after attrName\"); // No known test case\n                }\n                break;\n            case \"'\":\n            case '\"':\n                if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\n                ) {\n                    if (s === S_ATTR) {\n                        errorHandler.warning('attribute value must after \"=\"');\n                        attrName = source.slice(start, p);\n                    }\n                    start = p + 1;\n                    p = source.indexOf(c, start);\n                    if (p > 0) {\n                        value = source.slice(start, p);\n                        addAttribute(attrName, value, start - 1);\n                        s = S_ATTR_END;\n                    } else {\n                        //fatalError: no end quot match\n                        throw new Error(\"attribute value no end '\" + c + \"' match\");\n                    }\n                } else if (s == S_ATTR_NOQUOT_VALUE) {\n                    value = source.slice(start, p);\n                    addAttribute(attrName, value, start);\n                    errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + \")!!\");\n                    start = p + 1;\n                    s = S_ATTR_END;\n                } else {\n                    //fatalError: no equal before\n                    throw new Error('attribute value must after \"=\"'); // No known test case\n                }\n                break;\n            case \"/\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        s = S_TAG_CLOSE;\n                        el.closed = true;\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        break;\n                    case S_ATTR_SPACE:\n                        el.closed = true;\n                        break;\n                    //case S_EQ:\n                    default:\n                        throw new Error(\"attribute invalid close char('/')\") // No known test case\n                        ;\n                }\n                break;\n            case \"\":\n                errorHandler.error(\"unexpected end of input\");\n                if (s == S_TAG) {\n                    el.setTagName(source.slice(start, p));\n                }\n                return p;\n            case \">\":\n                switch(s){\n                    case S_TAG:\n                        el.setTagName(source.slice(start, p));\n                    case S_ATTR_END:\n                    case S_TAG_SPACE:\n                    case S_TAG_CLOSE:\n                        break; //normal\n                    case S_ATTR_NOQUOT_VALUE:\n                    case S_ATTR:\n                        value = source.slice(start, p);\n                        if (value.slice(-1) === \"/\") {\n                            el.closed = true;\n                            value = value.slice(0, -1);\n                        }\n                    case S_ATTR_SPACE:\n                        if (s === S_ATTR_SPACE) {\n                            value = attrName;\n                        }\n                        if (s == S_ATTR_NOQUOT_VALUE) {\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!');\n                            addAttribute(attrName, value, start);\n                        } else {\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !value.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n                            }\n                            addAttribute(value, value, start);\n                        }\n                        break;\n                    case S_EQ:\n                        throw new Error(\"attribute value missed!!\");\n                }\n                //\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n                return p;\n            /*xml space '\\x20' | #x9 | #xD | #xA; */ case \"\\x80\":\n                c = \" \";\n            default:\n                if (c <= \" \") {\n                    switch(s){\n                        case S_TAG:\n                            el.setTagName(source.slice(start, p)); //tagName\n                            s = S_TAG_SPACE;\n                            break;\n                        case S_ATTR:\n                            attrName = source.slice(start, p);\n                            s = S_ATTR_SPACE;\n                            break;\n                        case S_ATTR_NOQUOT_VALUE:\n                            var value = source.slice(start, p);\n                            errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n                            addAttribute(attrName, value, start);\n                        case S_ATTR_END:\n                            s = S_TAG_SPACE;\n                            break;\n                    }\n                } else {\n                    //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\n                    //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\n                    switch(s){\n                        //case S_TAG:void();break;\n                        //case S_ATTR:void();break;\n                        //case S_ATTR_NOQUOT_VALUE:void();break;\n                        case S_ATTR_SPACE:\n                            var tagName = el.tagName;\n                            if (!NAMESPACE.isHTML(currentNSMap[\"\"]) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\n                                errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\n                            }\n                            addAttribute(attrName, attrName, start);\n                            start = p;\n                            s = S_ATTR;\n                            break;\n                        case S_ATTR_END:\n                            errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n                        case S_TAG_SPACE:\n                            s = S_ATTR;\n                            start = p;\n                            break;\n                        case S_EQ:\n                            s = S_ATTR_NOQUOT_VALUE;\n                            start = p;\n                            break;\n                        case S_TAG_CLOSE:\n                            throw new Error(\"elements closed character '/' and '>' must be connected to\");\n                    }\n                }\n        } //end outer switch\n        //console.log('p++',p)\n        p++;\n    }\n}\n/**\n * @return true if has new namespace define\n */ function appendElement(el, domBuilder, currentNSMap) {\n    var tagName = el.tagName;\n    var localNSMap = null;\n    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\n    var i = el.length;\n    while(i--){\n        var a = el[i];\n        var qName = a.qName;\n        var value = a.value;\n        var nsp = qName.indexOf(\":\");\n        if (nsp > 0) {\n            var prefix = a.prefix = qName.slice(0, nsp);\n            var localName = qName.slice(nsp + 1);\n            var nsPrefix = prefix === \"xmlns\" && localName;\n        } else {\n            localName = qName;\n            prefix = null;\n            nsPrefix = qName === \"xmlns\" && \"\";\n        }\n        //can not set prefix,because prefix !== ''\n        a.localName = localName;\n        //prefix == null for no ns prefix attribute\n        if (nsPrefix !== false) {\n            if (localNSMap == null) {\n                localNSMap = {};\n                //console.log(currentNSMap,0)\n                _copy(currentNSMap, currentNSMap = {});\n            //console.log(currentNSMap,1)\n            }\n            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n            a.uri = NAMESPACE.XMLNS;\n            domBuilder.startPrefixMapping(nsPrefix, value);\n        }\n    }\n    var i = el.length;\n    while(i--){\n        a = el[i];\n        var prefix = a.prefix;\n        if (prefix) {\n            if (prefix === \"xml\") {\n                a.uri = NAMESPACE.XML;\n            }\n            if (prefix !== \"xmlns\") {\n                a.uri = currentNSMap[prefix || \"\"];\n            //{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n            }\n        }\n    }\n    var nsp = tagName.indexOf(\":\");\n    if (nsp > 0) {\n        prefix = el.prefix = tagName.slice(0, nsp);\n        localName = el.localName = tagName.slice(nsp + 1);\n    } else {\n        prefix = null; //important!!\n        localName = el.localName = tagName;\n    }\n    //no prefix element has default namespace\n    var ns = el.uri = currentNSMap[prefix || \"\"];\n    domBuilder.startElement(ns, localName, tagName, el);\n    //endPrefixMapping and startPrefixMapping have not any help for dom builder\n    //localNSMap = null\n    if (el.closed) {\n        domBuilder.endElement(ns, localName, tagName);\n        if (localNSMap) {\n            for(prefix in localNSMap){\n                if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\n                    domBuilder.endPrefixMapping(prefix);\n                }\n            }\n        }\n    } else {\n        el.currentNSMap = currentNSMap;\n        el.localNSMap = localNSMap;\n        //parseStack.push(el);\n        return true;\n    }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n    if (/^(?:script|textarea)$/i.test(tagName)) {\n        var elEndStart = source.indexOf(\"</\" + tagName + \">\", elStartEnd);\n        var text = source.substring(elStartEnd + 1, elEndStart);\n        if (/[&<]/.test(text)) {\n            if (/^script$/i.test(tagName)) {\n                //if(!/\\]\\]>/.test(text)){\n                //lexHandler.startCDATA();\n                domBuilder.characters(text, 0, text.length);\n                //lexHandler.endCDATA();\n                return elEndStart;\n            //}\n            } //}else{//text area\n            text = text.replace(/&#?\\w+;/g, entityReplacer);\n            domBuilder.characters(text, 0, text.length);\n            return elEndStart;\n        //}\n        }\n    }\n    return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n    //if(tagName in closeMap){\n    var pos = closeMap[tagName];\n    if (pos == null) {\n        //console.log(tagName)\n        pos = source.lastIndexOf(\"</\" + tagName + \">\");\n        if (pos < elStartEnd) {\n            pos = source.lastIndexOf(\"</\" + tagName);\n        }\n        closeMap[tagName] = pos;\n    }\n    return pos < elStartEnd;\n//}\n}\nfunction _copy(source, target) {\n    for(var n in source){\n        if (Object.prototype.hasOwnProperty.call(source, n)) {\n            target[n] = source[n];\n        }\n    }\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {\n    var next = source.charAt(start + 2);\n    switch(next){\n        case \"-\":\n            if (source.charAt(start + 3) === \"-\") {\n                var end = source.indexOf(\"-->\", start + 4);\n                //append comment source.substring(4,end)//<!--\n                if (end > start) {\n                    domBuilder.comment(source, start + 4, end - start - 4);\n                    return end + 3;\n                } else {\n                    errorHandler.error(\"Unclosed comment\");\n                    return -1;\n                }\n            } else {\n                //error\n                return -1;\n            }\n        default:\n            if (source.substr(start + 3, 6) == \"CDATA[\") {\n                var end = source.indexOf(\"]]>\", start + 9);\n                domBuilder.startCDATA();\n                domBuilder.characters(source, start + 9, end - start - 9);\n                domBuilder.endCDATA();\n                return end + 3;\n            }\n            //<!DOCTYPE\n            //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n            var matchs = split(source, start);\n            var len = matchs.length;\n            if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n                var name = matchs[1][0];\n                var pubid = false;\n                var sysid = false;\n                if (len > 3) {\n                    if (/^public$/i.test(matchs[2][0])) {\n                        pubid = matchs[3][0];\n                        sysid = len > 4 && matchs[4][0];\n                    } else if (/^system$/i.test(matchs[2][0])) {\n                        sysid = matchs[3][0];\n                    }\n                }\n                var lastMatch = matchs[len - 1];\n                domBuilder.startDTD(name, pubid, sysid);\n                domBuilder.endDTD();\n                return lastMatch.index + lastMatch[0].length;\n            }\n    }\n    return -1;\n}\nfunction parseInstruction(source, start, domBuilder) {\n    var end = source.indexOf(\"?>\", start);\n    if (end) {\n        var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n        if (match) {\n            var len = match[0].length;\n            domBuilder.processingInstruction(match[1], match[2]);\n            return end + 2;\n        } else {\n            return -1;\n        }\n    }\n    return -1;\n}\nfunction ElementAttributes() {\n    this.attributeNames = {};\n}\nElementAttributes.prototype = {\n    setTagName: function(tagName) {\n        if (!tagNamePattern.test(tagName)) {\n            throw new Error(\"invalid tagName:\" + tagName);\n        }\n        this.tagName = tagName;\n    },\n    addValue: function(qName, value, offset) {\n        if (!tagNamePattern.test(qName)) {\n            throw new Error(\"invalid attribute:\" + qName);\n        }\n        this.attributeNames[qName] = this.length;\n        this[this.length++] = {\n            qName: qName,\n            value: value,\n            offset: offset\n        };\n    },\n    length: 0,\n    getLocalName: function(i) {\n        return this[i].localName;\n    },\n    getLocator: function(i) {\n        return this[i].locator;\n    },\n    getQName: function(i) {\n        return this[i].qName;\n    },\n    getURI: function(i) {\n        return this[i].uri;\n    },\n    getValue: function(i) {\n        return this[i].value;\n    }\n};\nfunction split(source, start) {\n    var match;\n    var buf = [];\n    var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n    reg.lastIndex = start;\n    reg.exec(source); //skip <\n    while(match = reg.exec(source)){\n        buf.push(match);\n        if (match[1]) return buf;\n    }\n}\nexports.XMLReader = XMLReader;\nexports.ParseError = ParseError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@xmldom/xmldom/lib/sax.js\n");

/***/ })

};
;