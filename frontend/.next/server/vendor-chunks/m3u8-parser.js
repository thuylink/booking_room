"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/m3u8-parser";
exports.ids = ["vendor-chunks/m3u8-parser"];
exports.modules = {

/***/ "(ssr)/../node_modules/m3u8-parser/dist/m3u8-parser.es.js":
/*!**********************************************************!*\
  !*** ../node_modules/m3u8-parser/dist/m3u8-parser.es.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineStream: () => (/* binding */ LineStream),\n/* harmony export */   ParseStream: () => (/* binding */ ParseStream),\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ \"(ssr)/../node_modules/@babel/runtime/helpers/inheritsLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _videojs_vhs_utils_es_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @videojs/vhs-utils/es/stream.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/stream.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/../node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(ssr)/../node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _videojs_vhs_utils_es_decode_b64_to_uint8_array_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @videojs/vhs-utils/es/decode-b64-to-uint8-array.js */ \"(ssr)/../node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js\");\n/*! @name m3u8-parser @version 4.8.0 @license Apache-2.0 */ \n\n\n\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */ var LineStream = /*#__PURE__*/ function(_Stream) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default()(LineStream, _Stream);\n    function LineStream() {\n        var _this;\n        _this = _Stream.call(this) || this;\n        _this.buffer = \"\";\n        return _this;\n    }\n    /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */ var _proto = LineStream.prototype;\n    _proto.push = function push(data) {\n        var nextNewline;\n        this.buffer += data;\n        nextNewline = this.buffer.indexOf(\"\\n\");\n        for(; nextNewline > -1; nextNewline = this.buffer.indexOf(\"\\n\")){\n            this.trigger(\"data\", this.buffer.substring(0, nextNewline));\n            this.buffer = this.buffer.substring(nextNewline + 1);\n        }\n    };\n    return LineStream;\n}(_videojs_vhs_utils_es_stream_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\nvar TAB = String.fromCharCode(0x09);\nvar parseByterange = function parseByterange(byterangeString) {\n    // optionally match and capture 0+ digits before `@`\n    // optionally match and capture 0+ digits after `@`\n    var match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || \"\");\n    var result = {};\n    if (match[1]) {\n        result.length = parseInt(match[1], 10);\n    }\n    if (match[2]) {\n        result.offset = parseInt(match[2], 10);\n    }\n    return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */ var attributeSeparator = function attributeSeparator() {\n    var key = \"[^=]*\";\n    var value = '\"[^\"]*\"|[^,]*';\n    var keyvalue = \"(?:\" + key + \")=(?:\" + value + \")\";\n    return new RegExp(\"(?:^|,)(\" + keyvalue + \")\");\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */ var parseAttributes = function parseAttributes(attributes) {\n    // split the string using attributes as the separator\n    var attrs = attributes.split(attributeSeparator());\n    var result = {};\n    var i = attrs.length;\n    var attr;\n    while(i--){\n        // filter out unmatched portions of the string\n        if (attrs[i] === \"\") {\n            continue;\n        } // split the key and value\n        attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n        attr[0] = attr[0].replace(/^\\s+|\\s+$/g, \"\");\n        attr[1] = attr[1].replace(/^\\s+|\\s+$/g, \"\");\n        attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, \"$1\");\n        result[attr[0]] = attr[1];\n    }\n    return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */ var ParseStream = /*#__PURE__*/ function(_Stream) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default()(ParseStream, _Stream);\n    function ParseStream() {\n        var _this;\n        _this = _Stream.call(this) || this;\n        _this.customParsers = [];\n        _this.tagMappers = [];\n        return _this;\n    }\n    /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */ var _proto = ParseStream.prototype;\n    _proto.push = function push(line) {\n        var _this2 = this;\n        var match;\n        var event; // strip whitespace\n        line = line.trim();\n        if (line.length === 0) {\n            // ignore empty lines\n            return;\n        } // URIs\n        if (line[0] !== \"#\") {\n            this.trigger(\"data\", {\n                type: \"uri\",\n                uri: line\n            });\n            return;\n        } // map tags\n        var newLines = this.tagMappers.reduce(function(acc, mapper) {\n            var mappedLine = mapper(line); // skip if unchanged\n            if (mappedLine === line) {\n                return acc;\n            }\n            return acc.concat([\n                mappedLine\n            ]);\n        }, [\n            line\n        ]);\n        newLines.forEach(function(newLine) {\n            for(var i = 0; i < _this2.customParsers.length; i++){\n                if (_this2.customParsers[i].call(_this2, newLine)) {\n                    return;\n                }\n            } // Comments\n            if (newLine.indexOf(\"#EXT\") !== 0) {\n                _this2.trigger(\"data\", {\n                    type: \"comment\",\n                    text: newLine.slice(1)\n                });\n                return;\n            } // strip off any carriage returns here so the regex matching\n            // doesn't have to account for them.\n            newLine = newLine.replace(\"\\r\", \"\"); // Tags\n            match = /^#EXTM3U/.exec(newLine);\n            if (match) {\n                _this2.trigger(\"data\", {\n                    type: \"tag\",\n                    tagType: \"m3u\"\n                });\n                return;\n            }\n            match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"inf\"\n                };\n                if (match[1]) {\n                    event.duration = parseFloat(match[1]);\n                }\n                if (match[2]) {\n                    event.title = match[2];\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"targetduration\"\n                };\n                if (match[1]) {\n                    event.duration = parseInt(match[1], 10);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"version\"\n                };\n                if (match[1]) {\n                    event.version = parseInt(match[1], 10);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"media-sequence\"\n                };\n                if (match[1]) {\n                    event.number = parseInt(match[1], 10);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"discontinuity-sequence\"\n                };\n                if (match[1]) {\n                    event.number = parseInt(match[1], 10);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"playlist-type\"\n                };\n                if (match[1]) {\n                    event.playlistType = match[1];\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(newLine);\n            if (match) {\n                event = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default()(parseByterange(match[1]), {\n                    type: \"tag\",\n                    tagType: \"byterange\"\n                });\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"allow-cache\"\n                };\n                if (match[1]) {\n                    event.allowed = !/NO/.test(match[1]);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"map\"\n                };\n                if (match[1]) {\n                    var attributes = parseAttributes(match[1]);\n                    if (attributes.URI) {\n                        event.uri = attributes.URI;\n                    }\n                    if (attributes.BYTERANGE) {\n                        event.byterange = parseByterange(attributes.BYTERANGE);\n                    }\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"stream-inf\"\n                };\n                if (match[1]) {\n                    event.attributes = parseAttributes(match[1]);\n                    if (event.attributes.RESOLUTION) {\n                        var split = event.attributes.RESOLUTION.split(\"x\");\n                        var resolution = {};\n                        if (split[0]) {\n                            resolution.width = parseInt(split[0], 10);\n                        }\n                        if (split[1]) {\n                            resolution.height = parseInt(split[1], 10);\n                        }\n                        event.attributes.RESOLUTION = resolution;\n                    }\n                    if (event.attributes.BANDWIDTH) {\n                        event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n                    }\n                    if (event.attributes[\"FRAME-RATE\"]) {\n                        event.attributes[\"FRAME-RATE\"] = parseFloat(event.attributes[\"FRAME-RATE\"]);\n                    }\n                    if (event.attributes[\"PROGRAM-ID\"]) {\n                        event.attributes[\"PROGRAM-ID\"] = parseInt(event.attributes[\"PROGRAM-ID\"], 10);\n                    }\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"media\"\n                };\n                if (match[1]) {\n                    event.attributes = parseAttributes(match[1]);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-ENDLIST/.exec(newLine);\n            if (match) {\n                _this2.trigger(\"data\", {\n                    type: \"tag\",\n                    tagType: \"endlist\"\n                });\n                return;\n            }\n            match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n            if (match) {\n                _this2.trigger(\"data\", {\n                    type: \"tag\",\n                    tagType: \"discontinuity\"\n                });\n                return;\n            }\n            match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"program-date-time\"\n                };\n                if (match[1]) {\n                    event.dateTimeString = match[1];\n                    event.dateTimeObject = new Date(match[1]);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"key\"\n                };\n                if (match[1]) {\n                    event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n                    if (event.attributes.IV) {\n                        if (event.attributes.IV.substring(0, 2).toLowerCase() === \"0x\") {\n                            event.attributes.IV = event.attributes.IV.substring(2);\n                        }\n                        event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n                        event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n                        event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n                        event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n                        event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n                        event.attributes.IV = new Uint32Array(event.attributes.IV);\n                    }\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-START:?(.*)$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"start\"\n                };\n                if (match[1]) {\n                    event.attributes = parseAttributes(match[1]);\n                    event.attributes[\"TIME-OFFSET\"] = parseFloat(event.attributes[\"TIME-OFFSET\"]);\n                    event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"cue-out-cont\"\n                };\n                if (match[1]) {\n                    event.data = match[1];\n                } else {\n                    event.data = \"\";\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"cue-out\"\n                };\n                if (match[1]) {\n                    event.data = match[1];\n                } else {\n                    event.data = \"\";\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\n            if (match) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"cue-in\"\n                };\n                if (match[1]) {\n                    event.data = match[1];\n                } else {\n                    event.data = \"\";\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"skip\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                if (event.attributes.hasOwnProperty(\"SKIPPED-SEGMENTS\")) {\n                    event.attributes[\"SKIPPED-SEGMENTS\"] = parseInt(event.attributes[\"SKIPPED-SEGMENTS\"], 10);\n                }\n                if (event.attributes.hasOwnProperty(\"RECENTLY-REMOVED-DATERANGES\")) {\n                    event.attributes[\"RECENTLY-REMOVED-DATERANGES\"] = event.attributes[\"RECENTLY-REMOVED-DATERANGES\"].split(TAB);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"part\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                [\n                    \"DURATION\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = parseFloat(event.attributes[key]);\n                    }\n                });\n                [\n                    \"INDEPENDENT\",\n                    \"GAP\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = /YES/.test(event.attributes[key]);\n                    }\n                });\n                if (event.attributes.hasOwnProperty(\"BYTERANGE\")) {\n                    event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n                }\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"server-control\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                [\n                    \"CAN-SKIP-UNTIL\",\n                    \"PART-HOLD-BACK\",\n                    \"HOLD-BACK\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = parseFloat(event.attributes[key]);\n                    }\n                });\n                [\n                    \"CAN-SKIP-DATERANGES\",\n                    \"CAN-BLOCK-RELOAD\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = /YES/.test(event.attributes[key]);\n                    }\n                });\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"part-inf\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                [\n                    \"PART-TARGET\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = parseFloat(event.attributes[key]);\n                    }\n                });\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"preload-hint\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                [\n                    \"BYTERANGE-START\",\n                    \"BYTERANGE-LENGTH\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = parseInt(event.attributes[key], 10);\n                        var subkey = key === \"BYTERANGE-LENGTH\" ? \"length\" : \"offset\";\n                        event.attributes.byterange = event.attributes.byterange || {};\n                        event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n                        delete event.attributes[key];\n                    }\n                });\n                _this2.trigger(\"data\", event);\n                return;\n            }\n            match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n            if (match && match[1]) {\n                event = {\n                    type: \"tag\",\n                    tagType: \"rendition-report\"\n                };\n                event.attributes = parseAttributes(match[1]);\n                [\n                    \"LAST-MSN\",\n                    \"LAST-PART\"\n                ].forEach(function(key) {\n                    if (event.attributes.hasOwnProperty(key)) {\n                        event.attributes[key] = parseInt(event.attributes[key], 10);\n                    }\n                });\n                _this2.trigger(\"data\", event);\n                return;\n            } // unknown tag type\n            _this2.trigger(\"data\", {\n                type: \"tag\",\n                data: newLine.slice(4)\n            });\n        });\n    } /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */ ;\n    _proto.addParser = function addParser(_ref) {\n        var _this3 = this;\n        var expression = _ref.expression, customType = _ref.customType, dataParser = _ref.dataParser, segment = _ref.segment;\n        if (typeof dataParser !== \"function\") {\n            dataParser = function dataParser(line) {\n                return line;\n            };\n        }\n        this.customParsers.push(function(line) {\n            var match = expression.exec(line);\n            if (match) {\n                _this3.trigger(\"data\", {\n                    type: \"custom\",\n                    data: dataParser(line),\n                    customType: customType,\n                    segment: segment\n                });\n                return true;\n            }\n        });\n    } /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */ ;\n    _proto.addTagMapper = function addTagMapper(_ref2) {\n        var expression = _ref2.expression, map = _ref2.map;\n        var mapFn = function mapFn(line) {\n            if (expression.test(line)) {\n                return map(line);\n            }\n            return line;\n        };\n        this.tagMappers.push(mapFn);\n    };\n    return ParseStream;\n}(_videojs_vhs_utils_es_stream_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\nvar camelCase = function camelCase(str) {\n    return str.toLowerCase().replace(/-(\\w)/g, function(a) {\n        return a[1].toUpperCase();\n    });\n};\nvar camelCaseKeys = function camelCaseKeys(attributes) {\n    var result = {};\n    Object.keys(attributes).forEach(function(key) {\n        result[camelCase(key)] = attributes[key];\n    });\n    return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\nvar setHoldBack = function setHoldBack(manifest) {\n    var serverControl = manifest.serverControl, targetDuration = manifest.targetDuration, partTargetDuration = manifest.partTargetDuration;\n    if (!serverControl) {\n        return;\n    }\n    var tag = \"#EXT-X-SERVER-CONTROL\";\n    var hb = \"holdBack\";\n    var phb = \"partHoldBack\";\n    var minTargetDuration = targetDuration && targetDuration * 3;\n    var minPartDuration = partTargetDuration && partTargetDuration * 2;\n    if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n        serverControl[hb] = minTargetDuration;\n        this.trigger(\"info\", {\n            message: tag + \" defaulting HOLD-BACK to targetDuration * 3 (\" + minTargetDuration + \").\"\n        });\n    }\n    if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n        this.trigger(\"warn\", {\n            message: tag + \" clamping HOLD-BACK (\" + serverControl[hb] + \") to targetDuration * 3 (\" + minTargetDuration + \")\"\n        });\n        serverControl[hb] = minTargetDuration;\n    } // default no part hold back to part target duration * 3\n    if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n        serverControl[phb] = partTargetDuration * 3;\n        this.trigger(\"info\", {\n            message: tag + \" defaulting PART-HOLD-BACK to partTargetDuration * 3 (\" + serverControl[phb] + \").\"\n        });\n    } // if part hold back is too small default it to part target duration * 2\n    if (partTargetDuration && serverControl[phb] < minPartDuration) {\n        this.trigger(\"warn\", {\n            message: tag + \" clamping PART-HOLD-BACK (\" + serverControl[phb] + \") to partTargetDuration * 2 (\" + minPartDuration + \").\"\n        });\n        serverControl[phb] = minPartDuration;\n    }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */ var Parser = /*#__PURE__*/ function(_Stream) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0___default()(Parser, _Stream);\n    function Parser() {\n        var _this;\n        _this = _Stream.call(this) || this;\n        _this.lineStream = new LineStream();\n        _this.parseStream = new ParseStream();\n        _this.lineStream.pipe(_this.parseStream);\n        /* eslint-disable consistent-this */ var self = _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_3___default()(_this);\n        /* eslint-enable consistent-this */ var uris = [];\n        var currentUri = {}; // if specified, the active EXT-X-MAP definition\n        var currentMap; // if specified, the active decryption key\n        var _key;\n        var hasParts = false;\n        var noop = function noop() {};\n        var defaultMediaGroups = {\n            \"AUDIO\": {},\n            \"VIDEO\": {},\n            \"CLOSED-CAPTIONS\": {},\n            \"SUBTITLES\": {}\n        }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n        // used in MPDs with Widevine encrypted streams.\n        var widevineUuid = \"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed\"; // group segments into numbered timelines delineated by discontinuities\n        var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n        _this.manifest = {\n            allowCache: true,\n            discontinuityStarts: [],\n            segments: []\n        }; // keep track of the last seen segment's byte range end, as segments are not required\n        // to provide the offset, in which case it defaults to the next byte after the\n        // previous segment\n        var lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n        var lastPartByterangeEnd = 0;\n        _this.on(\"end\", function() {\n            // only add preloadSegment if we don't yet have a uri for it.\n            // and we actually have parts/preloadHints\n            if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n                return;\n            }\n            if (!currentUri.map && currentMap) {\n                currentUri.map = currentMap;\n            }\n            if (!currentUri.key && _key) {\n                currentUri.key = _key;\n            }\n            if (!currentUri.timeline && typeof currentTimeline === \"number\") {\n                currentUri.timeline = currentTimeline;\n            }\n            _this.manifest.preloadSegment = currentUri;\n        }); // update the manifest with the m3u8 entry from the parse stream\n        _this.parseStream.on(\"data\", function(entry) {\n            var mediaGroup;\n            var rendition;\n            ({\n                tag: function tag() {\n                    // switch based on the tag type\n                    (({\n                        version: function version() {\n                            if (entry.version) {\n                                this.manifest.version = entry.version;\n                            }\n                        },\n                        \"allow-cache\": function allowCache() {\n                            this.manifest.allowCache = entry.allowed;\n                            if (!(\"allowed\" in entry)) {\n                                this.trigger(\"info\", {\n                                    message: \"defaulting allowCache to YES\"\n                                });\n                                this.manifest.allowCache = true;\n                            }\n                        },\n                        byterange: function byterange() {\n                            var byterange = {};\n                            if (\"length\" in entry) {\n                                currentUri.byterange = byterange;\n                                byterange.length = entry.length;\n                                if (!(\"offset\" in entry)) {\n                                    /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */ entry.offset = lastByterangeEnd;\n                                }\n                            }\n                            if (\"offset\" in entry) {\n                                currentUri.byterange = byterange;\n                                byterange.offset = entry.offset;\n                            }\n                            lastByterangeEnd = byterange.offset + byterange.length;\n                        },\n                        endlist: function endlist() {\n                            this.manifest.endList = true;\n                        },\n                        inf: function inf() {\n                            if (!(\"mediaSequence\" in this.manifest)) {\n                                this.manifest.mediaSequence = 0;\n                                this.trigger(\"info\", {\n                                    message: \"defaulting media sequence to zero\"\n                                });\n                            }\n                            if (!(\"discontinuitySequence\" in this.manifest)) {\n                                this.manifest.discontinuitySequence = 0;\n                                this.trigger(\"info\", {\n                                    message: \"defaulting discontinuity sequence to zero\"\n                                });\n                            }\n                            if (entry.duration > 0) {\n                                currentUri.duration = entry.duration;\n                            }\n                            if (entry.duration === 0) {\n                                currentUri.duration = 0.01;\n                                this.trigger(\"info\", {\n                                    message: \"updating zero segment duration to a small value\"\n                                });\n                            }\n                            this.manifest.segments = uris;\n                        },\n                        key: function key() {\n                            if (!entry.attributes) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring key declaration without attribute list\"\n                                });\n                                return;\n                            } // clear the active encryption key\n                            if (entry.attributes.METHOD === \"NONE\") {\n                                _key = null;\n                                return;\n                            }\n                            if (!entry.attributes.URI) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring key declaration without URI\"\n                                });\n                                return;\n                            }\n                            if (entry.attributes.KEYFORMAT === \"com.apple.streamingkeydelivery\") {\n                                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n                                this.manifest.contentProtection[\"com.apple.fps.1_0\"] = {\n                                    attributes: entry.attributes\n                                };\n                                return;\n                            }\n                            if (entry.attributes.KEYFORMAT === \"com.microsoft.playready\") {\n                                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n                                this.manifest.contentProtection[\"com.microsoft.playready\"] = {\n                                    uri: entry.attributes.URI\n                                };\n                                return;\n                            } // check if the content is encrypted for Widevine\n                            // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n                            if (entry.attributes.KEYFORMAT === widevineUuid) {\n                                var VALID_METHODS = [\n                                    \"SAMPLE-AES\",\n                                    \"SAMPLE-AES-CTR\",\n                                    \"SAMPLE-AES-CENC\"\n                                ];\n                                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                                    this.trigger(\"warn\", {\n                                        message: \"invalid key method provided for Widevine\"\n                                    });\n                                    return;\n                                }\n                                if (entry.attributes.METHOD === \"SAMPLE-AES-CENC\") {\n                                    this.trigger(\"warn\", {\n                                        message: \"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead\"\n                                    });\n                                }\n                                if (entry.attributes.URI.substring(0, 23) !== \"data:text/plain;base64,\") {\n                                    this.trigger(\"warn\", {\n                                        message: \"invalid key URI provided for Widevine\"\n                                    });\n                                    return;\n                                }\n                                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === \"0x\")) {\n                                    this.trigger(\"warn\", {\n                                        message: \"invalid key ID provided for Widevine\"\n                                    });\n                                    return;\n                                } // if Widevine key attributes are valid, store them as `contentProtection`\n                                // on the manifest to emulate Widevine tag structure in a DASH mpd\n                                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                                this.manifest.contentProtection[\"com.widevine.alpha\"] = {\n                                    attributes: {\n                                        schemeIdUri: entry.attributes.KEYFORMAT,\n                                        // remove '0x' from the key id string\n                                        keyId: entry.attributes.KEYID.substring(2)\n                                    },\n                                    // decode the base64-encoded PSSH box\n                                    pssh: (0,_videojs_vhs_utils_es_decode_b64_to_uint8_array_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(entry.attributes.URI.split(\",\")[1])\n                                };\n                                return;\n                            }\n                            if (!entry.attributes.METHOD) {\n                                this.trigger(\"warn\", {\n                                    message: \"defaulting key method to AES-128\"\n                                });\n                            } // setup an encryption key for upcoming segments\n                            _key = {\n                                method: entry.attributes.METHOD || \"AES-128\",\n                                uri: entry.attributes.URI\n                            };\n                            if (typeof entry.attributes.IV !== \"undefined\") {\n                                _key.iv = entry.attributes.IV;\n                            }\n                        },\n                        \"media-sequence\": function mediaSequence() {\n                            if (!isFinite(entry.number)) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring invalid media sequence: \" + entry.number\n                                });\n                                return;\n                            }\n                            this.manifest.mediaSequence = entry.number;\n                        },\n                        \"discontinuity-sequence\": function discontinuitySequence() {\n                            if (!isFinite(entry.number)) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring invalid discontinuity sequence: \" + entry.number\n                                });\n                                return;\n                            }\n                            this.manifest.discontinuitySequence = entry.number;\n                            currentTimeline = entry.number;\n                        },\n                        \"playlist-type\": function playlistType() {\n                            if (!/VOD|EVENT/.test(entry.playlistType)) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring unknown playlist type: \" + entry.playlist\n                                });\n                                return;\n                            }\n                            this.manifest.playlistType = entry.playlistType;\n                        },\n                        map: function map() {\n                            currentMap = {};\n                            if (entry.uri) {\n                                currentMap.uri = entry.uri;\n                            }\n                            if (entry.byterange) {\n                                currentMap.byterange = entry.byterange;\n                            }\n                            if (_key) {\n                                currentMap.key = _key;\n                            }\n                        },\n                        \"stream-inf\": function streamInf() {\n                            this.manifest.playlists = uris;\n                            this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n                            if (!entry.attributes) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring empty stream-inf attributes\"\n                                });\n                                return;\n                            }\n                            if (!currentUri.attributes) {\n                                currentUri.attributes = {};\n                            }\n                            _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2___default()(currentUri.attributes, entry.attributes);\n                        },\n                        media: function media() {\n                            this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n                            if (!(entry.attributes && entry.attributes.TYPE && entry.attributes[\"GROUP-ID\"] && entry.attributes.NAME)) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring incomplete or missing media group\"\n                                });\n                                return;\n                            } // find the media group, creating defaults as necessary\n                            var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n                            mediaGroupType[entry.attributes[\"GROUP-ID\"]] = mediaGroupType[entry.attributes[\"GROUP-ID\"]] || {};\n                            mediaGroup = mediaGroupType[entry.attributes[\"GROUP-ID\"]]; // collect the rendition metadata\n                            rendition = {\n                                default: /yes/i.test(entry.attributes.DEFAULT)\n                            };\n                            if (rendition.default) {\n                                rendition.autoselect = true;\n                            } else {\n                                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n                            }\n                            if (entry.attributes.LANGUAGE) {\n                                rendition.language = entry.attributes.LANGUAGE;\n                            }\n                            if (entry.attributes.URI) {\n                                rendition.uri = entry.attributes.URI;\n                            }\n                            if (entry.attributes[\"INSTREAM-ID\"]) {\n                                rendition.instreamId = entry.attributes[\"INSTREAM-ID\"];\n                            }\n                            if (entry.attributes.CHARACTERISTICS) {\n                                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n                            }\n                            if (entry.attributes.FORCED) {\n                                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n                            } // insert the new rendition\n                            mediaGroup[entry.attributes.NAME] = rendition;\n                        },\n                        discontinuity: function discontinuity() {\n                            currentTimeline += 1;\n                            currentUri.discontinuity = true;\n                            this.manifest.discontinuityStarts.push(uris.length);\n                        },\n                        \"program-date-time\": function programDateTime() {\n                            if (typeof this.manifest.dateTimeString === \"undefined\") {\n                                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                                // to the manifest object\n                                // TODO: Consider removing this in future major version\n                                this.manifest.dateTimeString = entry.dateTimeString;\n                                this.manifest.dateTimeObject = entry.dateTimeObject;\n                            }\n                            currentUri.dateTimeString = entry.dateTimeString;\n                            currentUri.dateTimeObject = entry.dateTimeObject;\n                        },\n                        targetduration: function targetduration() {\n                            if (!isFinite(entry.duration) || entry.duration < 0) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring invalid target duration: \" + entry.duration\n                                });\n                                return;\n                            }\n                            this.manifest.targetDuration = entry.duration;\n                            setHoldBack.call(this, this.manifest);\n                        },\n                        start: function start() {\n                            if (!entry.attributes || isNaN(entry.attributes[\"TIME-OFFSET\"])) {\n                                this.trigger(\"warn\", {\n                                    message: \"ignoring start declaration without appropriate attribute list\"\n                                });\n                                return;\n                            }\n                            this.manifest.start = {\n                                timeOffset: entry.attributes[\"TIME-OFFSET\"],\n                                precise: entry.attributes.PRECISE\n                            };\n                        },\n                        \"cue-out\": function cueOut() {\n                            currentUri.cueOut = entry.data;\n                        },\n                        \"cue-out-cont\": function cueOutCont() {\n                            currentUri.cueOutCont = entry.data;\n                        },\n                        \"cue-in\": function cueIn() {\n                            currentUri.cueIn = entry.data;\n                        },\n                        \"skip\": function skip() {\n                            this.manifest.skip = camelCaseKeys(entry.attributes);\n                            this.warnOnMissingAttributes_(\"#EXT-X-SKIP\", entry.attributes, [\n                                \"SKIPPED-SEGMENTS\"\n                            ]);\n                        },\n                        \"part\": function part() {\n                            var _this2 = this;\n                            hasParts = true; // parts are always specifed before a segment\n                            var segmentIndex = this.manifest.segments.length;\n                            var part = camelCaseKeys(entry.attributes);\n                            currentUri.parts = currentUri.parts || [];\n                            currentUri.parts.push(part);\n                            if (part.byterange) {\n                                if (!part.byterange.hasOwnProperty(\"offset\")) {\n                                    part.byterange.offset = lastPartByterangeEnd;\n                                }\n                                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n                            }\n                            var partIndex = currentUri.parts.length - 1;\n                            this.warnOnMissingAttributes_(\"#EXT-X-PART #\" + partIndex + \" for segment #\" + segmentIndex, entry.attributes, [\n                                \"URI\",\n                                \"DURATION\"\n                            ]);\n                            if (this.manifest.renditionReports) {\n                                this.manifest.renditionReports.forEach(function(r, i) {\n                                    if (!r.hasOwnProperty(\"lastPart\")) {\n                                        _this2.trigger(\"warn\", {\n                                            message: \"#EXT-X-RENDITION-REPORT #\" + i + \" lacks required attribute(s): LAST-PART\"\n                                        });\n                                    }\n                                });\n                            }\n                        },\n                        \"server-control\": function serverControl() {\n                            var attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n                            if (!attrs.hasOwnProperty(\"canBlockReload\")) {\n                                attrs.canBlockReload = false;\n                                this.trigger(\"info\", {\n                                    message: \"#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false\"\n                                });\n                            }\n                            setHoldBack.call(this, this.manifest);\n                            if (attrs.canSkipDateranges && !attrs.hasOwnProperty(\"canSkipUntil\")) {\n                                this.trigger(\"warn\", {\n                                    message: \"#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set\"\n                                });\n                            }\n                        },\n                        \"preload-hint\": function preloadHint() {\n                            // parts are always specifed before a segment\n                            var segmentIndex = this.manifest.segments.length;\n                            var hint = camelCaseKeys(entry.attributes);\n                            var isPart = hint.type && hint.type === \"PART\";\n                            currentUri.preloadHints = currentUri.preloadHints || [];\n                            currentUri.preloadHints.push(hint);\n                            if (hint.byterange) {\n                                if (!hint.byterange.hasOwnProperty(\"offset\")) {\n                                    // use last part byterange end or zero if not a part.\n                                    hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n                                    if (isPart) {\n                                        lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                                    }\n                                }\n                            }\n                            var index = currentUri.preloadHints.length - 1;\n                            this.warnOnMissingAttributes_(\"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex, entry.attributes, [\n                                \"TYPE\",\n                                \"URI\"\n                            ]);\n                            if (!hint.type) {\n                                return;\n                            } // search through all preload hints except for the current one for\n                            // a duplicate type.\n                            for(var i = 0; i < currentUri.preloadHints.length - 1; i++){\n                                var otherHint = currentUri.preloadHints[i];\n                                if (!otherHint.type) {\n                                    continue;\n                                }\n                                if (otherHint.type === hint.type) {\n                                    this.trigger(\"warn\", {\n                                        message: \"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex + \" has the same TYPE \" + hint.type + \" as preload hint #\" + i\n                                    });\n                                }\n                            }\n                        },\n                        \"rendition-report\": function renditionReport() {\n                            var report = camelCaseKeys(entry.attributes);\n                            this.manifest.renditionReports = this.manifest.renditionReports || [];\n                            this.manifest.renditionReports.push(report);\n                            var index = this.manifest.renditionReports.length - 1;\n                            var required = [\n                                \"LAST-MSN\",\n                                \"URI\"\n                            ];\n                            if (hasParts) {\n                                required.push(\"LAST-PART\");\n                            }\n                            this.warnOnMissingAttributes_(\"#EXT-X-RENDITION-REPORT #\" + index, entry.attributes, required);\n                        },\n                        \"part-inf\": function partInf() {\n                            this.manifest.partInf = camelCaseKeys(entry.attributes);\n                            this.warnOnMissingAttributes_(\"#EXT-X-PART-INF\", entry.attributes, [\n                                \"PART-TARGET\"\n                            ]);\n                            if (this.manifest.partInf.partTarget) {\n                                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n                            }\n                            setHoldBack.call(this, this.manifest);\n                        }\n                    })[entry.tagType] || noop).call(self);\n                },\n                uri: function uri() {\n                    currentUri.uri = entry.uri;\n                    uris.push(currentUri); // if no explicit duration was declared, use the target duration\n                    if (this.manifest.targetDuration && !(\"duration\" in currentUri)) {\n                        this.trigger(\"warn\", {\n                            message: \"defaulting segment duration to the target duration\"\n                        });\n                        currentUri.duration = this.manifest.targetDuration;\n                    } // annotate with encryption information, if necessary\n                    if (_key) {\n                        currentUri.key = _key;\n                    }\n                    currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n                    if (currentMap) {\n                        currentUri.map = currentMap;\n                    } // reset the last byterange end as it needs to be 0 between parts\n                    lastPartByterangeEnd = 0; // prepare for the next URI\n                    currentUri = {};\n                },\n                comment: function comment() {},\n                custom: function custom() {\n                    // if this is segment-level data attach the output to the segment\n                    if (entry.segment) {\n                        currentUri.custom = currentUri.custom || {};\n                        currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n                    } else {\n                        this.manifest.custom = this.manifest.custom || {};\n                        this.manifest.custom[entry.customType] = entry.data;\n                    }\n                }\n            })[entry.type].call(self);\n        });\n        return _this;\n    }\n    var _proto = Parser.prototype;\n    _proto.warnOnMissingAttributes_ = function warnOnMissingAttributes_(identifier, attributes, required) {\n        var missing = [];\n        required.forEach(function(key) {\n            if (!attributes.hasOwnProperty(key)) {\n                missing.push(key);\n            }\n        });\n        if (missing.length) {\n            this.trigger(\"warn\", {\n                message: identifier + \" lacks required attribute(s): \" + missing.join(\", \")\n            });\n        }\n    } /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */ ;\n    _proto.push = function push(chunk) {\n        this.lineStream.push(chunk);\n    } /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */ ;\n    _proto.end = function end() {\n        // flush any buffered input\n        this.lineStream.push(\"\\n\");\n        this.trigger(\"end\");\n    } /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */ ;\n    _proto.addParser = function addParser(options) {\n        this.parseStream.addParser(options);\n    } /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */ ;\n    _proto.addTagMapper = function addTagMapper(options) {\n        this.parseStream.addTagMapper(options);\n    };\n    return Parser;\n}(_videojs_vhs_utils_es_stream_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/m3u8-parser/dist/m3u8-parser.es.js\n");

/***/ })

};
;