"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/videojs-vtt.js";
exports.ids = ["vendor-chunks/videojs-vtt.js"];
exports.modules = {

/***/ "(ssr)/../node_modules/videojs-vtt.js/lib/browser-index.js":
/*!***********************************************************!*\
  !*** ../node_modules/videojs-vtt.js/lib/browser-index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ // Default exports for Node. Export the extended versions of VTTCue and\n// VTTRegion in Node since we likely want the capability to convert back and\n// forth between JSON. If we don't then it's not that big of a deal since we're\n// off browser.\n\nvar window = __webpack_require__(/*! global/window */ \"(ssr)/../node_modules/global/window.js\");\nvar vttjs = module.exports = {\n    WebVTT: __webpack_require__(/*! ./vtt.js */ \"(ssr)/../node_modules/videojs-vtt.js/lib/vtt.js\"),\n    VTTCue: __webpack_require__(/*! ./vttcue.js */ \"(ssr)/../node_modules/videojs-vtt.js/lib/vttcue.js\"),\n    VTTRegion: __webpack_require__(/*! ./vttregion.js */ \"(ssr)/../node_modules/videojs-vtt.js/lib/vttregion.js\")\n};\nwindow.vttjs = vttjs;\nwindow.WebVTT = vttjs.WebVTT;\nvar cueShim = vttjs.VTTCue;\nvar regionShim = vttjs.VTTRegion;\nvar nativeVTTCue = window.VTTCue;\nvar nativeVTTRegion = window.VTTRegion;\nvttjs.shim = function() {\n    window.VTTCue = cueShim;\n    window.VTTRegion = regionShim;\n};\nvttjs.restore = function() {\n    window.VTTCue = nativeVTTCue;\n    window.VTTRegion = nativeVTTRegion;\n};\nif (!window.VTTCue) {\n    vttjs.shim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3ZpZGVvanMtdnR0LmpzL2xpYi9icm93c2VyLWluZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBRUQsdUVBQXVFO0FBQ3ZFLDRFQUE0RTtBQUM1RSwrRUFBK0U7QUFDL0UsZUFBZTs7QUFFZixJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQixJQUFJQyxRQUFRQyxPQUFPQyxPQUFPLEdBQUc7SUFDM0JDLFFBQVFKLG1CQUFPQSxDQUFDLGlFQUFVO0lBQzFCSyxRQUFRTCxtQkFBT0EsQ0FBQyx1RUFBYTtJQUM3Qk0sV0FBV04sbUJBQU9BLENBQUMsNkVBQWdCO0FBQ3JDO0FBRUFELE9BQU9FLEtBQUssR0FBR0E7QUFDZkYsT0FBT0ssTUFBTSxHQUFHSCxNQUFNRyxNQUFNO0FBRTVCLElBQUlHLFVBQVVOLE1BQU1JLE1BQU07QUFDMUIsSUFBSUcsYUFBYVAsTUFBTUssU0FBUztBQUNoQyxJQUFJRyxlQUFlVixPQUFPTSxNQUFNO0FBQ2hDLElBQUlLLGtCQUFrQlgsT0FBT08sU0FBUztBQUV0Q0wsTUFBTVUsSUFBSSxHQUFHO0lBQ1haLE9BQU9NLE1BQU0sR0FBR0U7SUFDaEJSLE9BQU9PLFNBQVMsR0FBR0U7QUFDckI7QUFFQVAsTUFBTVcsT0FBTyxHQUFHO0lBQ2RiLE9BQU9NLE1BQU0sR0FBR0k7SUFDaEJWLE9BQU9PLFNBQVMsR0FBR0k7QUFDckI7QUFFQSxJQUFJLENBQUNYLE9BQU9NLE1BQU0sRUFBRTtJQUNsQkosTUFBTVUsSUFBSTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJlZXplLW5leHQvLi4vbm9kZV9tb2R1bGVzL3ZpZGVvanMtdnR0LmpzL2xpYi9icm93c2VyLWluZGV4LmpzP2I2MjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyB2dHQuanMgQ29udHJpYnV0b3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBEZWZhdWx0IGV4cG9ydHMgZm9yIE5vZGUuIEV4cG9ydCB0aGUgZXh0ZW5kZWQgdmVyc2lvbnMgb2YgVlRUQ3VlIGFuZFxuLy8gVlRUUmVnaW9uIGluIE5vZGUgc2luY2Ugd2UgbGlrZWx5IHdhbnQgdGhlIGNhcGFiaWxpdHkgdG8gY29udmVydCBiYWNrIGFuZFxuLy8gZm9ydGggYmV0d2VlbiBKU09OLiBJZiB3ZSBkb24ndCB0aGVuIGl0J3Mgbm90IHRoYXQgYmlnIG9mIGEgZGVhbCBzaW5jZSB3ZSdyZVxuLy8gb2ZmIGJyb3dzZXIuXG5cbnZhciB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93Jyk7XG5cbnZhciB2dHRqcyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBXZWJWVFQ6IHJlcXVpcmUoXCIuL3Z0dC5qc1wiKSxcbiAgVlRUQ3VlOiByZXF1aXJlKFwiLi92dHRjdWUuanNcIiksXG4gIFZUVFJlZ2lvbjogcmVxdWlyZShcIi4vdnR0cmVnaW9uLmpzXCIpXG59O1xuXG53aW5kb3cudnR0anMgPSB2dHRqcztcbndpbmRvdy5XZWJWVFQgPSB2dHRqcy5XZWJWVFQ7XG5cbnZhciBjdWVTaGltID0gdnR0anMuVlRUQ3VlO1xudmFyIHJlZ2lvblNoaW0gPSB2dHRqcy5WVFRSZWdpb247XG52YXIgbmF0aXZlVlRUQ3VlID0gd2luZG93LlZUVEN1ZTtcbnZhciBuYXRpdmVWVFRSZWdpb24gPSB3aW5kb3cuVlRUUmVnaW9uO1xuXG52dHRqcy5zaGltID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5WVFRDdWUgPSBjdWVTaGltO1xuICB3aW5kb3cuVlRUUmVnaW9uID0gcmVnaW9uU2hpbTtcbn07XG5cbnZ0dGpzLnJlc3RvcmUgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LlZUVEN1ZSA9IG5hdGl2ZVZUVEN1ZTtcbiAgd2luZG93LlZUVFJlZ2lvbiA9IG5hdGl2ZVZUVFJlZ2lvbjtcbn07XG5cbmlmICghd2luZG93LlZUVEN1ZSkge1xuICB2dHRqcy5zaGltKCk7XG59XG4iXSwibmFtZXMiOlsid2luZG93IiwicmVxdWlyZSIsInZ0dGpzIiwibW9kdWxlIiwiZXhwb3J0cyIsIldlYlZUVCIsIlZUVEN1ZSIsIlZUVFJlZ2lvbiIsImN1ZVNoaW0iLCJyZWdpb25TaGltIiwibmF0aXZlVlRUQ3VlIiwibmF0aXZlVlRUUmVnaW9uIiwic2hpbSIsInJlc3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/videojs-vtt.js/lib/browser-index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/videojs-vtt.js/lib/vtt.js":
/*!*************************************************!*\
  !*** ../node_modules/videojs-vtt.js/lib/vtt.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */ /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */ \nvar document = __webpack_require__(/*! global/document */ \"(ssr)/../node_modules/global/document.js\");\nvar _objCreate = Object.create || function() {\n    function F() {}\n    return function(o) {\n        if (arguments.length !== 1) {\n            throw new Error(\"Object.create shim only accepts one parameter.\");\n        }\n        F.prototype = o;\n        return new F();\n    };\n}();\n// Creates a new ParserError object from an errorData object. The errorData\n// object should have default code and message properties. The default message\n// property can be overriden by passing in a message parameter.\n// See ParsingError.Errors below for acceptable errors.\nfunction ParsingError(errorData, message) {\n    this.name = \"ParsingError\";\n    this.code = errorData.code;\n    this.message = message || errorData.message;\n}\nParsingError.prototype = _objCreate(Error.prototype);\nParsingError.prototype.constructor = ParsingError;\n// ParsingError metadata for acceptable ParsingErrors.\nParsingError.Errors = {\n    BadSignature: {\n        code: 0,\n        message: \"Malformed WebVTT signature.\"\n    },\n    BadTimeStamp: {\n        code: 1,\n        message: \"Malformed time stamp.\"\n    }\n};\n// Try to parse input as a time stamp.\nfunction parseTimeStamp(input) {\n    function computeSeconds(h, m, s, f) {\n        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\n    }\n    var m = input.match(/^(\\d+):(\\d{1,2})(:\\d{1,2})?\\.(\\d{3})/);\n    if (!m) {\n        return null;\n    }\n    if (m[3]) {\n        // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\n        return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\n    } else if (m[1] > 59) {\n        // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n        // First position is hours as it's over 59.\n        return computeSeconds(m[1], m[2], 0, m[4]);\n    } else {\n        // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\n        return computeSeconds(0, m[1], m[2], m[4]);\n    }\n}\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nfunction Settings() {\n    this.values = _objCreate(null);\n}\nSettings.prototype = {\n    // Only accept the first assignment to any key.\n    set: function(k, v) {\n        if (!this.get(k) && v !== \"\") {\n            this.values[k] = v;\n        }\n    },\n    // Return the value for a key, or a default value.\n    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n    // a number of possible default values as properties where 'defaultKey' is\n    // the key of the property that will be chosen; otherwise it's assumed to be\n    // a single value.\n    get: function(k, dflt, defaultKey) {\n        if (defaultKey) {\n            return this.has(k) ? this.values[k] : dflt[defaultKey];\n        }\n        return this.has(k) ? this.values[k] : dflt;\n    },\n    // Check whether we have a value for a key.\n    has: function(k) {\n        return k in this.values;\n    },\n    // Accept a setting if its one of the given alternatives.\n    alt: function(k, v, a) {\n        for(var n = 0; n < a.length; ++n){\n            if (v === a[n]) {\n                this.set(k, v);\n                break;\n            }\n        }\n    },\n    // Accept a setting if its a valid (signed) integer.\n    integer: function(k, v) {\n        if (/^-?\\d+$/.test(v)) {\n            this.set(k, parseInt(v, 10));\n        }\n    },\n    // Accept a setting if its a valid percentage.\n    percent: function(k, v) {\n        var m;\n        if (m = v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/)) {\n            v = parseFloat(v);\n            if (v >= 0 && v <= 100) {\n                this.set(k, v);\n                return true;\n            }\n        }\n        return false;\n    }\n};\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interprete each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(input, callback, keyValueDelim, groupDelim) {\n    var groups = groupDelim ? input.split(groupDelim) : [\n        input\n    ];\n    for(var i in groups){\n        if (typeof groups[i] !== \"string\") {\n            continue;\n        }\n        var kv = groups[i].split(keyValueDelim);\n        if (kv.length !== 2) {\n            continue;\n        }\n        var k = kv[0].trim();\n        var v = kv[1].trim();\n        callback(k, v);\n    }\n}\nfunction parseCue(input, cue, regionList) {\n    // Remember the original input if we need to throw an error.\n    var oInput = input;\n    // 4.1 WebVTT timestamp\n    function consumeTimeStamp() {\n        var ts = parseTimeStamp(input);\n        if (ts === null) {\n            throw new ParsingError(ParsingError.Errors.BadTimeStamp, \"Malformed timestamp: \" + oInput);\n        }\n        // Remove time stamp from input.\n        input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\n        return ts;\n    }\n    // 4.4.2 WebVTT cue settings\n    function consumeCueSettings(input, cue) {\n        var settings = new Settings();\n        parseOptions(input, function(k, v) {\n            switch(k){\n                case \"region\":\n                    // Find the last region we parsed with the same region id.\n                    for(var i = regionList.length - 1; i >= 0; i--){\n                        if (regionList[i].id === v) {\n                            settings.set(k, regionList[i].region);\n                            break;\n                        }\n                    }\n                    break;\n                case \"vertical\":\n                    settings.alt(k, v, [\n                        \"rl\",\n                        \"lr\"\n                    ]);\n                    break;\n                case \"line\":\n                    var vals = v.split(\",\"), vals0 = vals[0];\n                    settings.integer(k, vals0);\n                    settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\n                    settings.alt(k, vals0, [\n                        \"auto\"\n                    ]);\n                    if (vals.length === 2) {\n                        settings.alt(\"lineAlign\", vals[1], [\n                            \"start\",\n                            \"center\",\n                            \"end\"\n                        ]);\n                    }\n                    break;\n                case \"position\":\n                    vals = v.split(\",\");\n                    settings.percent(k, vals[0]);\n                    if (vals.length === 2) {\n                        settings.alt(\"positionAlign\", vals[1], [\n                            \"start\",\n                            \"center\",\n                            \"end\"\n                        ]);\n                    }\n                    break;\n                case \"size\":\n                    settings.percent(k, v);\n                    break;\n                case \"align\":\n                    settings.alt(k, v, [\n                        \"start\",\n                        \"center\",\n                        \"end\",\n                        \"left\",\n                        \"right\"\n                    ]);\n                    break;\n            }\n        }, /:/, /\\s/);\n        // Apply default values for any missing fields.\n        cue.region = settings.get(\"region\", null);\n        cue.vertical = settings.get(\"vertical\", \"\");\n        try {\n            cue.line = settings.get(\"line\", \"auto\");\n        } catch (e) {}\n        cue.lineAlign = settings.get(\"lineAlign\", \"start\");\n        cue.snapToLines = settings.get(\"snapToLines\", true);\n        cue.size = settings.get(\"size\", 100);\n        // Safari still uses the old middle value and won't accept center\n        try {\n            cue.align = settings.get(\"align\", \"center\");\n        } catch (e) {\n            cue.align = settings.get(\"align\", \"middle\");\n        }\n        try {\n            cue.position = settings.get(\"position\", \"auto\");\n        } catch (e) {\n            cue.position = settings.get(\"position\", {\n                start: 0,\n                left: 0,\n                center: 50,\n                middle: 50,\n                end: 100,\n                right: 100\n            }, cue.align);\n        }\n        cue.positionAlign = settings.get(\"positionAlign\", {\n            start: \"start\",\n            left: \"start\",\n            center: \"center\",\n            middle: \"center\",\n            end: \"end\",\n            right: \"end\"\n        }, cue.align);\n    }\n    function skipWhitespace() {\n        input = input.replace(/^\\s+/, \"\");\n    }\n    // 4.1 WebVTT cue timings.\n    skipWhitespace();\n    cue.startTime = consumeTimeStamp(); // (1) collect cue start time\n    skipWhitespace();\n    if (input.substr(0, 3) !== \"-->\") {\n        throw new ParsingError(ParsingError.Errors.BadTimeStamp, \"Malformed time stamp (time stamps must be separated by '-->'): \" + oInput);\n    }\n    input = input.substr(3);\n    skipWhitespace();\n    cue.endTime = consumeTimeStamp(); // (5) collect cue end time\n    // 4.1 WebVTT cue settings list.\n    skipWhitespace();\n    consumeCueSettings(input, cue);\n}\n// When evaluating this file as part of a Webpack bundle for server\n// side rendering, `document` is an empty object.\nvar TEXTAREA_ELEMENT = document.createElement && document.createElement(\"textarea\");\nvar TAG_NAME = {\n    c: \"span\",\n    i: \"i\",\n    b: \"b\",\n    u: \"u\",\n    ruby: \"ruby\",\n    rt: \"rt\",\n    v: \"span\",\n    lang: \"span\"\n};\n// 5.1 default text color\n// 5.2 default text background color is equivalent to text color with bg_ prefix\nvar DEFAULT_COLOR_CLASS = {\n    white: \"rgba(255,255,255,1)\",\n    lime: \"rgba(0,255,0,1)\",\n    cyan: \"rgba(0,255,255,1)\",\n    red: \"rgba(255,0,0,1)\",\n    yellow: \"rgba(255,255,0,1)\",\n    magenta: \"rgba(255,0,255,1)\",\n    blue: \"rgba(0,0,255,1)\",\n    black: \"rgba(0,0,0,1)\"\n};\nvar TAG_ANNOTATION = {\n    v: \"title\",\n    lang: \"lang\"\n};\nvar NEEDS_PARENT = {\n    rt: \"ruby\"\n};\n// Parse content into a document fragment.\nfunction parseContent(window, input) {\n    function nextToken() {\n        // Check for end-of-string.\n        if (!input) {\n            return null;\n        }\n        // Consume 'n' characters from the input.\n        function consume(result) {\n            input = input.substr(result.length);\n            return result;\n        }\n        var m = input.match(/^([^<]*)(<[^>]*>?)?/);\n        // If there is some text before the next tag, return it, otherwise return\n        // the tag.\n        return consume(m[1] ? m[1] : m[2]);\n    }\n    function unescape(s) {\n        TEXTAREA_ELEMENT.innerHTML = s;\n        s = TEXTAREA_ELEMENT.textContent;\n        TEXTAREA_ELEMENT.textContent = \"\";\n        return s;\n    }\n    function shouldAdd(current, element) {\n        return !NEEDS_PARENT[element.localName] || NEEDS_PARENT[element.localName] === current.localName;\n    }\n    // Create an element for this tag.\n    function createElement(type, annotation) {\n        var tagName = TAG_NAME[type];\n        if (!tagName) {\n            return null;\n        }\n        var element = window.document.createElement(tagName);\n        var name = TAG_ANNOTATION[type];\n        if (name && annotation) {\n            element[name] = annotation.trim();\n        }\n        return element;\n    }\n    var rootDiv = window.document.createElement(\"div\"), current = rootDiv, t, tagStack = [];\n    while((t = nextToken()) !== null){\n        if (t[0] === \"<\") {\n            if (t[1] === \"/\") {\n                // If the closing tag matches, move back up to the parent node.\n                if (tagStack.length && tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\n                    tagStack.pop();\n                    current = current.parentNode;\n                }\n                continue;\n            }\n            var ts = parseTimeStamp(t.substr(1, t.length - 2));\n            var node;\n            if (ts) {\n                // Timestamps are lead nodes as well.\n                node = window.document.createProcessingInstruction(\"timestamp\", ts);\n                current.appendChild(node);\n                continue;\n            }\n            var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\n            // If we can't parse the tag, skip to the next tag.\n            if (!m) {\n                continue;\n            }\n            // Try to construct an element, and ignore the tag if we couldn't.\n            node = createElement(m[1], m[3]);\n            if (!node) {\n                continue;\n            }\n            // Determine if the tag should be added based on the context of where it\n            // is placed in the cuetext.\n            if (!shouldAdd(current, node)) {\n                continue;\n            }\n            // Set the class list (as a list of classes, separated by space).\n            if (m[2]) {\n                var classes = m[2].split(\".\");\n                classes.forEach(function(cl) {\n                    var bgColor = /^bg_/.test(cl);\n                    // slice out `bg_` if it's a background color\n                    var colorName = bgColor ? cl.slice(3) : cl;\n                    if (DEFAULT_COLOR_CLASS.hasOwnProperty(colorName)) {\n                        var propName = bgColor ? \"background-color\" : \"color\";\n                        var propValue = DEFAULT_COLOR_CLASS[colorName];\n                        node.style[propName] = propValue;\n                    }\n                });\n                node.className = classes.join(\" \");\n            }\n            // Append the node to the current node, and enter the scope of the new\n            // node.\n            tagStack.push(m[1]);\n            current.appendChild(node);\n            current = node;\n            continue;\n        }\n        // Text nodes are leaf nodes.\n        current.appendChild(window.document.createTextNode(unescape(t)));\n    }\n    return rootDiv;\n}\n// This is a list of all the Unicode characters that have a strong\n// right-to-left category. What this means is that these characters are\n// written right-to-left for sure. It was generated by pulling all the strong\n// right-to-left characters out of the Unicode data table. That table can\n// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\nvar strongRTLRanges = [\n    [\n        0x5be,\n        0x5be\n    ],\n    [\n        0x5c0,\n        0x5c0\n    ],\n    [\n        0x5c3,\n        0x5c3\n    ],\n    [\n        0x5c6,\n        0x5c6\n    ],\n    [\n        0x5d0,\n        0x5ea\n    ],\n    [\n        0x5f0,\n        0x5f4\n    ],\n    [\n        0x608,\n        0x608\n    ],\n    [\n        0x60b,\n        0x60b\n    ],\n    [\n        0x60d,\n        0x60d\n    ],\n    [\n        0x61b,\n        0x61b\n    ],\n    [\n        0x61e,\n        0x64a\n    ],\n    [\n        0x66d,\n        0x66f\n    ],\n    [\n        0x671,\n        0x6d5\n    ],\n    [\n        0x6e5,\n        0x6e6\n    ],\n    [\n        0x6ee,\n        0x6ef\n    ],\n    [\n        0x6fa,\n        0x70d\n    ],\n    [\n        0x70f,\n        0x710\n    ],\n    [\n        0x712,\n        0x72f\n    ],\n    [\n        0x74d,\n        0x7a5\n    ],\n    [\n        0x7b1,\n        0x7b1\n    ],\n    [\n        0x7c0,\n        0x7ea\n    ],\n    [\n        0x7f4,\n        0x7f5\n    ],\n    [\n        0x7fa,\n        0x7fa\n    ],\n    [\n        0x800,\n        0x815\n    ],\n    [\n        0x81a,\n        0x81a\n    ],\n    [\n        0x824,\n        0x824\n    ],\n    [\n        0x828,\n        0x828\n    ],\n    [\n        0x830,\n        0x83e\n    ],\n    [\n        0x840,\n        0x858\n    ],\n    [\n        0x85e,\n        0x85e\n    ],\n    [\n        0x8a0,\n        0x8a0\n    ],\n    [\n        0x8a2,\n        0x8ac\n    ],\n    [\n        0x200f,\n        0x200f\n    ],\n    [\n        0xfb1d,\n        0xfb1d\n    ],\n    [\n        0xfb1f,\n        0xfb28\n    ],\n    [\n        0xfb2a,\n        0xfb36\n    ],\n    [\n        0xfb38,\n        0xfb3c\n    ],\n    [\n        0xfb3e,\n        0xfb3e\n    ],\n    [\n        0xfb40,\n        0xfb41\n    ],\n    [\n        0xfb43,\n        0xfb44\n    ],\n    [\n        0xfb46,\n        0xfbc1\n    ],\n    [\n        0xfbd3,\n        0xfd3d\n    ],\n    [\n        0xfd50,\n        0xfd8f\n    ],\n    [\n        0xfd92,\n        0xfdc7\n    ],\n    [\n        0xfdf0,\n        0xfdfc\n    ],\n    [\n        0xfe70,\n        0xfe74\n    ],\n    [\n        0xfe76,\n        0xfefc\n    ],\n    [\n        0x10800,\n        0x10805\n    ],\n    [\n        0x10808,\n        0x10808\n    ],\n    [\n        0x1080a,\n        0x10835\n    ],\n    [\n        0x10837,\n        0x10838\n    ],\n    [\n        0x1083c,\n        0x1083c\n    ],\n    [\n        0x1083f,\n        0x10855\n    ],\n    [\n        0x10857,\n        0x1085f\n    ],\n    [\n        0x10900,\n        0x1091b\n    ],\n    [\n        0x10920,\n        0x10939\n    ],\n    [\n        0x1093f,\n        0x1093f\n    ],\n    [\n        0x10980,\n        0x109b7\n    ],\n    [\n        0x109be,\n        0x109bf\n    ],\n    [\n        0x10a00,\n        0x10a00\n    ],\n    [\n        0x10a10,\n        0x10a13\n    ],\n    [\n        0x10a15,\n        0x10a17\n    ],\n    [\n        0x10a19,\n        0x10a33\n    ],\n    [\n        0x10a40,\n        0x10a47\n    ],\n    [\n        0x10a50,\n        0x10a58\n    ],\n    [\n        0x10a60,\n        0x10a7f\n    ],\n    [\n        0x10b00,\n        0x10b35\n    ],\n    [\n        0x10b40,\n        0x10b55\n    ],\n    [\n        0x10b58,\n        0x10b72\n    ],\n    [\n        0x10b78,\n        0x10b7f\n    ],\n    [\n        0x10c00,\n        0x10c48\n    ],\n    [\n        0x1ee00,\n        0x1ee03\n    ],\n    [\n        0x1ee05,\n        0x1ee1f\n    ],\n    [\n        0x1ee21,\n        0x1ee22\n    ],\n    [\n        0x1ee24,\n        0x1ee24\n    ],\n    [\n        0x1ee27,\n        0x1ee27\n    ],\n    [\n        0x1ee29,\n        0x1ee32\n    ],\n    [\n        0x1ee34,\n        0x1ee37\n    ],\n    [\n        0x1ee39,\n        0x1ee39\n    ],\n    [\n        0x1ee3b,\n        0x1ee3b\n    ],\n    [\n        0x1ee42,\n        0x1ee42\n    ],\n    [\n        0x1ee47,\n        0x1ee47\n    ],\n    [\n        0x1ee49,\n        0x1ee49\n    ],\n    [\n        0x1ee4b,\n        0x1ee4b\n    ],\n    [\n        0x1ee4d,\n        0x1ee4f\n    ],\n    [\n        0x1ee51,\n        0x1ee52\n    ],\n    [\n        0x1ee54,\n        0x1ee54\n    ],\n    [\n        0x1ee57,\n        0x1ee57\n    ],\n    [\n        0x1ee59,\n        0x1ee59\n    ],\n    [\n        0x1ee5b,\n        0x1ee5b\n    ],\n    [\n        0x1ee5d,\n        0x1ee5d\n    ],\n    [\n        0x1ee5f,\n        0x1ee5f\n    ],\n    [\n        0x1ee61,\n        0x1ee62\n    ],\n    [\n        0x1ee64,\n        0x1ee64\n    ],\n    [\n        0x1ee67,\n        0x1ee6a\n    ],\n    [\n        0x1ee6c,\n        0x1ee72\n    ],\n    [\n        0x1ee74,\n        0x1ee77\n    ],\n    [\n        0x1ee79,\n        0x1ee7c\n    ],\n    [\n        0x1ee7e,\n        0x1ee7e\n    ],\n    [\n        0x1ee80,\n        0x1ee89\n    ],\n    [\n        0x1ee8b,\n        0x1ee9b\n    ],\n    [\n        0x1eea1,\n        0x1eea3\n    ],\n    [\n        0x1eea5,\n        0x1eea9\n    ],\n    [\n        0x1eeab,\n        0x1eebb\n    ],\n    [\n        0x10fffd,\n        0x10fffd\n    ]\n];\nfunction isStrongRTLChar(charCode) {\n    for(var i = 0; i < strongRTLRanges.length; i++){\n        var currentRange = strongRTLRanges[i];\n        if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction determineBidi(cueDiv) {\n    var nodeStack = [], text = \"\", charCode;\n    if (!cueDiv || !cueDiv.childNodes) {\n        return \"ltr\";\n    }\n    function pushNodes(nodeStack, node) {\n        for(var i = node.childNodes.length - 1; i >= 0; i--){\n            nodeStack.push(node.childNodes[i]);\n        }\n    }\n    function nextTextNode(nodeStack) {\n        if (!nodeStack || !nodeStack.length) {\n            return null;\n        }\n        var node = nodeStack.pop(), text = node.textContent || node.innerText;\n        if (text) {\n            // TODO: This should match all unicode type B characters (paragraph\n            // separator characters). See issue #115.\n            var m = text.match(/^.*(\\n|\\r)/);\n            if (m) {\n                nodeStack.length = 0;\n                return m[0];\n            }\n            return text;\n        }\n        if (node.tagName === \"ruby\") {\n            return nextTextNode(nodeStack);\n        }\n        if (node.childNodes) {\n            pushNodes(nodeStack, node);\n            return nextTextNode(nodeStack);\n        }\n    }\n    pushNodes(nodeStack, cueDiv);\n    while(text = nextTextNode(nodeStack)){\n        for(var i = 0; i < text.length; i++){\n            charCode = text.charCodeAt(i);\n            if (isStrongRTLChar(charCode)) {\n                return \"rtl\";\n            }\n        }\n    }\n    return \"ltr\";\n}\nfunction computeLinePos(cue) {\n    if (typeof cue.line === \"number\" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) {\n        return cue.line;\n    }\n    if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) {\n        return -1;\n    }\n    var track = cue.track, trackList = track.textTrackList, count = 0;\n    for(var i = 0; i < trackList.length && trackList[i] !== track; i++){\n        if (trackList[i].mode === \"showing\") {\n            count++;\n        }\n    }\n    return ++count * -1;\n}\nfunction StyleBox() {}\n// Apply styles to a div. If there is no div passed then it defaults to the\n// div on 'this'.\nStyleBox.prototype.applyStyles = function(styles, div) {\n    div = div || this.div;\n    for(var prop in styles){\n        if (styles.hasOwnProperty(prop)) {\n            div.style[prop] = styles[prop];\n        }\n    }\n};\nStyleBox.prototype.formatStyle = function(val, unit) {\n    return val === 0 ? 0 : val + unit;\n};\n// Constructs the computed display state of the cue (a div). Places the div\n// into the overlay which should be a block level element (usually a div).\nfunction CueStyleBox(window, cue, styleOptions) {\n    StyleBox.call(this);\n    this.cue = cue;\n    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\n    // have inline positioning and will function as the cue background box.\n    this.cueDiv = parseContent(window, cue.text);\n    var styles = {\n        color: \"rgba(255, 255, 255, 1)\",\n        backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n        position: \"relative\",\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        display: \"inline\",\n        writingMode: cue.vertical === \"\" ? \"horizontal-tb\" : cue.vertical === \"lr\" ? \"vertical-lr\" : \"vertical-rl\",\n        unicodeBidi: \"plaintext\"\n    };\n    this.applyStyles(styles, this.cueDiv);\n    // Create an absolutely positioned div that will be used to position the cue\n    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\n    // mirrors of them except middle instead of center on Safari.\n    this.div = window.document.createElement(\"div\");\n    styles = {\n        direction: determineBidi(this.cueDiv),\n        writingMode: cue.vertical === \"\" ? \"horizontal-tb\" : cue.vertical === \"lr\" ? \"vertical-lr\" : \"vertical-rl\",\n        unicodeBidi: \"plaintext\",\n        textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\n        font: styleOptions.font,\n        whiteSpace: \"pre-line\",\n        position: \"absolute\"\n    };\n    this.applyStyles(styles);\n    this.div.appendChild(this.cueDiv);\n    // Calculate the distance from the reference edge of the viewport to the text\n    // position of the cue box. The reference edge will be resolved later when\n    // the box orientation styles are applied.\n    var textPos = 0;\n    switch(cue.positionAlign){\n        case \"start\":\n        case \"line-left\":\n            textPos = cue.position;\n            break;\n        case \"center\":\n            textPos = cue.position - cue.size / 2;\n            break;\n        case \"end\":\n        case \"line-right\":\n            textPos = cue.position - cue.size;\n            break;\n    }\n    // Horizontal box orientation; textPos is the distance from the left edge of the\n    // area to the left edge of the box and cue.size is the distance extending to\n    // the right from there.\n    if (cue.vertical === \"\") {\n        this.applyStyles({\n            left: this.formatStyle(textPos, \"%\"),\n            width: this.formatStyle(cue.size, \"%\")\n        });\n    // Vertical box orientation; textPos is the distance from the top edge of the\n    // area to the top edge of the box and cue.size is the height extending\n    // downwards from there.\n    } else {\n        this.applyStyles({\n            top: this.formatStyle(textPos, \"%\"),\n            height: this.formatStyle(cue.size, \"%\")\n        });\n    }\n    this.move = function(box) {\n        this.applyStyles({\n            top: this.formatStyle(box.top, \"px\"),\n            bottom: this.formatStyle(box.bottom, \"px\"),\n            left: this.formatStyle(box.left, \"px\"),\n            right: this.formatStyle(box.right, \"px\"),\n            height: this.formatStyle(box.height, \"px\"),\n            width: this.formatStyle(box.width, \"px\")\n        });\n    };\n}\nCueStyleBox.prototype = _objCreate(StyleBox.prototype);\nCueStyleBox.prototype.constructor = CueStyleBox;\n// Represents the co-ordinates of an Element in a way that we can easily\n// compute things with such as if it overlaps or intersects with another Element.\n// Can initialize it with either a StyleBox or another BoxPosition.\nfunction BoxPosition(obj) {\n    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\n    // was passed in and we need to copy the results of 'getBoundingClientRect'\n    // as the object returned is readonly. All co-ordinate values are in reference\n    // to the viewport origin (top left).\n    var lh, height, width, top;\n    if (obj.div) {\n        height = obj.div.offsetHeight;\n        width = obj.div.offsetWidth;\n        top = obj.div.offsetTop;\n        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();\n        obj = obj.div.getBoundingClientRect();\n        // In certain cases the outter div will be slightly larger then the sum of\n        // the inner div's lines. This could be due to bold text, etc, on some platforms.\n        // In this case we should get the average line height and use that. This will\n        // result in the desired behaviour.\n        lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0;\n    }\n    this.left = obj.left;\n    this.right = obj.right;\n    this.top = obj.top || top;\n    this.height = obj.height || height;\n    this.bottom = obj.bottom || top + (obj.height || height);\n    this.width = obj.width || width;\n    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\n}\n// Move the box along a particular axis. Optionally pass in an amount to move\n// the box. If no amount is passed then the default is the line height of the\n// box.\nBoxPosition.prototype.move = function(axis, toMove) {\n    toMove = toMove !== undefined ? toMove : this.lineHeight;\n    switch(axis){\n        case \"+x\":\n            this.left += toMove;\n            this.right += toMove;\n            break;\n        case \"-x\":\n            this.left -= toMove;\n            this.right -= toMove;\n            break;\n        case \"+y\":\n            this.top += toMove;\n            this.bottom += toMove;\n            break;\n        case \"-y\":\n            this.top -= toMove;\n            this.bottom -= toMove;\n            break;\n    }\n};\n// Check if this box overlaps another box, b2.\nBoxPosition.prototype.overlaps = function(b2) {\n    return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top;\n};\n// Check if this box overlaps any other boxes in boxes.\nBoxPosition.prototype.overlapsAny = function(boxes) {\n    for(var i = 0; i < boxes.length; i++){\n        if (this.overlaps(boxes[i])) {\n            return true;\n        }\n    }\n    return false;\n};\n// Check if this box is within another box.\nBoxPosition.prototype.within = function(container) {\n    return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right;\n};\n// Check if this box is entirely within the container or it is overlapping\n// on the edge opposite of the axis direction passed. For example, if \"+x\" is\n// passed and the box is overlapping on the left edge of the container, then\n// return true.\nBoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {\n    switch(axis){\n        case \"+x\":\n            return this.left < container.left;\n        case \"-x\":\n            return this.right > container.right;\n        case \"+y\":\n            return this.top < container.top;\n        case \"-y\":\n            return this.bottom > container.bottom;\n    }\n};\n// Find the percentage of the area that this box is overlapping with another\n// box.\nBoxPosition.prototype.intersectPercentage = function(b2) {\n    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)), y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)), intersectArea = x * y;\n    return intersectArea / (this.height * this.width);\n};\n// Convert the positions from this box to CSS compatible positions using\n// the reference container's positions. This has to be done because this\n// box's positions are in reference to the viewport origin, whereas, CSS\n// values are in referecne to their respective edges.\nBoxPosition.prototype.toCSSCompatValues = function(reference) {\n    return {\n        top: this.top - reference.top,\n        bottom: reference.bottom - this.bottom,\n        left: this.left - reference.left,\n        right: reference.right - this.right,\n        height: this.height,\n        width: this.width\n    };\n};\n// Get an object that represents the box's position without anything extra.\n// Can pass a StyleBox, HTMLElement, or another BoxPositon.\nBoxPosition.getSimpleBoxPosition = function(obj) {\n    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\n    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\n    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\n    obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;\n    var ret = {\n        left: obj.left,\n        right: obj.right,\n        top: obj.top || top,\n        height: obj.height || height,\n        bottom: obj.bottom || top + (obj.height || height),\n        width: obj.width || width\n    };\n    return ret;\n};\n// Move a StyleBox to its specified, or next best, position. The containerBox\n// is the box that contains the StyleBox, such as a div. boxPositions are\n// a list of other boxes that the styleBox can't overlap with.\nfunction moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\n    // Find the best position for a cue box, b, on the video. The axis parameter\n    // is a list of axis, the order of which, it will move the box along. For example:\n    // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\n    // direction. If it doesn't find a good position for it there it will then move\n    // it along the x axis in the negative direction.\n    function findBestPosition(b, axis) {\n        var bestPosition, specifiedPosition = new BoxPosition(b), percentage = 1; // Highest possible so the first thing we get is better.\n        for(var i = 0; i < axis.length; i++){\n            while(b.overlapsOppositeAxis(containerBox, axis[i]) || b.within(containerBox) && b.overlapsAny(boxPositions)){\n                b.move(axis[i]);\n            }\n            // We found a spot where we aren't overlapping anything. This is our\n            // best position.\n            if (b.within(containerBox)) {\n                return b;\n            }\n            var p = b.intersectPercentage(containerBox);\n            // If we're outside the container box less then we were on our last try\n            // then remember this position as the best position.\n            if (percentage > p) {\n                bestPosition = new BoxPosition(b);\n                percentage = p;\n            }\n            // Reset the box position to the specified position.\n            b = new BoxPosition(specifiedPosition);\n        }\n        return bestPosition || specifiedPosition;\n    }\n    var boxPosition = new BoxPosition(styleBox), cue = styleBox.cue, linePos = computeLinePos(cue), axis = [];\n    // If we have a line number to align the cue to.\n    if (cue.snapToLines) {\n        var size;\n        switch(cue.vertical){\n            case \"\":\n                axis = [\n                    \"+y\",\n                    \"-y\"\n                ];\n                size = \"height\";\n                break;\n            case \"rl\":\n                axis = [\n                    \"+x\",\n                    \"-x\"\n                ];\n                size = \"width\";\n                break;\n            case \"lr\":\n                axis = [\n                    \"-x\",\n                    \"+x\"\n                ];\n                size = \"width\";\n                break;\n        }\n        var step = boxPosition.lineHeight, position = step * Math.round(linePos), maxPosition = containerBox[size] + step, initialAxis = axis[0];\n        // If the specified intial position is greater then the max position then\n        // clamp the box to the amount of steps it would take for the box to\n        // reach the max position.\n        if (Math.abs(position) > maxPosition) {\n            position = position < 0 ? -1 : 1;\n            position *= Math.ceil(maxPosition / step) * step;\n        }\n        // If computed line position returns negative then line numbers are\n        // relative to the bottom of the video instead of the top. Therefore, we\n        // need to increase our initial position by the length or width of the\n        // video, depending on the writing direction, and reverse our axis directions.\n        if (linePos < 0) {\n            position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\n            axis = axis.reverse();\n        }\n        // Move the box to the specified position. This may not be its best\n        // position.\n        boxPosition.move(initialAxis, position);\n    } else {\n        // If we have a percentage line value for the cue.\n        var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;\n        switch(cue.lineAlign){\n            case \"center\":\n                linePos -= calculatedPercentage / 2;\n                break;\n            case \"end\":\n                linePos -= calculatedPercentage;\n                break;\n        }\n        // Apply initial line position to the cue box.\n        switch(cue.vertical){\n            case \"\":\n                styleBox.applyStyles({\n                    top: styleBox.formatStyle(linePos, \"%\")\n                });\n                break;\n            case \"rl\":\n                styleBox.applyStyles({\n                    left: styleBox.formatStyle(linePos, \"%\")\n                });\n                break;\n            case \"lr\":\n                styleBox.applyStyles({\n                    right: styleBox.formatStyle(linePos, \"%\")\n                });\n                break;\n        }\n        axis = [\n            \"+y\",\n            \"-x\",\n            \"+x\",\n            \"-y\"\n        ];\n        // Get the box position again after we've applied the specified positioning\n        // to it.\n        boxPosition = new BoxPosition(styleBox);\n    }\n    var bestPosition = findBestPosition(boxPosition, axis);\n    styleBox.move(bestPosition.toCSSCompatValues(containerBox));\n}\nfunction WebVTT() {\n// Nothing\n}\n// Helper to allow strings to be decoded instead of the default binary utf8 data.\nWebVTT.StringDecoder = function() {\n    return {\n        decode: function(data) {\n            if (!data) {\n                return \"\";\n            }\n            if (typeof data !== \"string\") {\n                throw new Error(\"Error - expected string data.\");\n            }\n            return decodeURIComponent(encodeURIComponent(data));\n        }\n    };\n};\nWebVTT.convertCueToDOMTree = function(window, cuetext) {\n    if (!window || !cuetext) {\n        return null;\n    }\n    return parseContent(window, cuetext);\n};\nvar FONT_SIZE_PERCENT = 0.05;\nvar FONT_STYLE = \"sans-serif\";\nvar CUE_BACKGROUND_PADDING = \"1.5%\";\n// Runs the processing model over the cues and regions passed to it.\n// @param overlay A block level element (usually a div) that the computed cues\n//                and regions will be placed into.\nWebVTT.processCues = function(window, cues, overlay) {\n    if (!window || !cues || !overlay) {\n        return null;\n    }\n    // Remove all previous children.\n    while(overlay.firstChild){\n        overlay.removeChild(overlay.firstChild);\n    }\n    var paddedOverlay = window.document.createElement(\"div\");\n    paddedOverlay.style.position = \"absolute\";\n    paddedOverlay.style.left = \"0\";\n    paddedOverlay.style.right = \"0\";\n    paddedOverlay.style.top = \"0\";\n    paddedOverlay.style.bottom = \"0\";\n    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\n    overlay.appendChild(paddedOverlay);\n    // Determine if we need to compute the display states of the cues. This could\n    // be the case if a cue's state has been changed since the last computation or\n    // if it has not been computed yet.\n    function shouldCompute(cues) {\n        for(var i = 0; i < cues.length; i++){\n            if (cues[i].hasBeenReset || !cues[i].displayState) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // We don't need to recompute the cues' display states. Just reuse them.\n    if (!shouldCompute(cues)) {\n        for(var i = 0; i < cues.length; i++){\n            paddedOverlay.appendChild(cues[i].displayState);\n        }\n        return;\n    }\n    var boxPositions = [], containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay), fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\n    var styleOptions = {\n        font: fontSize + \"px \" + FONT_STYLE\n    };\n    (function() {\n        var styleBox, cue;\n        for(var i = 0; i < cues.length; i++){\n            cue = cues[i];\n            // Compute the intial position and styles of the cue div.\n            styleBox = new CueStyleBox(window, cue, styleOptions);\n            paddedOverlay.appendChild(styleBox.div);\n            // Move the cue div to it's correct line position.\n            moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\n            // Remember the computed div so that we don't have to recompute it later\n            // if we don't have too.\n            cue.displayState = styleBox.div;\n            boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\n        }\n    })();\n};\nWebVTT.Parser = function(window, vttjs, decoder) {\n    if (!decoder) {\n        decoder = vttjs;\n        vttjs = {};\n    }\n    if (!vttjs) {\n        vttjs = {};\n    }\n    this.window = window;\n    this.vttjs = vttjs;\n    this.state = \"INITIAL\";\n    this.buffer = \"\";\n    this.decoder = decoder || new TextDecoder(\"utf8\");\n    this.regionList = [];\n};\nWebVTT.Parser.prototype = {\n    // If the error is a ParsingError then report it to the consumer if\n    // possible. If it's not a ParsingError then throw it like normal.\n    reportOrThrowError: function(e) {\n        if (e instanceof ParsingError) {\n            this.onparsingerror && this.onparsingerror(e);\n        } else {\n            throw e;\n        }\n    },\n    parse: function(data) {\n        var self = this;\n        // If there is no data then we won't decode it, but will just try to parse\n        // whatever is in buffer already. This may occur in circumstances, for\n        // example when flush() is called.\n        if (data) {\n            // Try to decode the data that we received.\n            self.buffer += self.decoder.decode(data, {\n                stream: true\n            });\n        }\n        function collectNextLine() {\n            var buffer = self.buffer;\n            var pos = 0;\n            while(pos < buffer.length && buffer[pos] !== \"\\r\" && buffer[pos] !== \"\\n\"){\n                ++pos;\n            }\n            var line = buffer.substr(0, pos);\n            // Advance the buffer early in case we fail below.\n            if (buffer[pos] === \"\\r\") {\n                ++pos;\n            }\n            if (buffer[pos] === \"\\n\") {\n                ++pos;\n            }\n            self.buffer = buffer.substr(pos);\n            return line;\n        }\n        // 3.4 WebVTT region and WebVTT region settings syntax\n        function parseRegion(input) {\n            var settings = new Settings();\n            parseOptions(input, function(k, v) {\n                switch(k){\n                    case \"id\":\n                        settings.set(k, v);\n                        break;\n                    case \"width\":\n                        settings.percent(k, v);\n                        break;\n                    case \"lines\":\n                        settings.integer(k, v);\n                        break;\n                    case \"regionanchor\":\n                    case \"viewportanchor\":\n                        var xy = v.split(\",\");\n                        if (xy.length !== 2) {\n                            break;\n                        }\n                        // We have to make sure both x and y parse, so use a temporary\n                        // settings object here.\n                        var anchor = new Settings();\n                        anchor.percent(\"x\", xy[0]);\n                        anchor.percent(\"y\", xy[1]);\n                        if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\n                            break;\n                        }\n                        settings.set(k + \"X\", anchor.get(\"x\"));\n                        settings.set(k + \"Y\", anchor.get(\"y\"));\n                        break;\n                    case \"scroll\":\n                        settings.alt(k, v, [\n                            \"up\"\n                        ]);\n                        break;\n                }\n            }, /=/, /\\s/);\n            // Create the region, using default values for any values that were not\n            // specified.\n            if (settings.has(\"id\")) {\n                var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\n                region.width = settings.get(\"width\", 100);\n                region.lines = settings.get(\"lines\", 3);\n                region.regionAnchorX = settings.get(\"regionanchorX\", 0);\n                region.regionAnchorY = settings.get(\"regionanchorY\", 100);\n                region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\n                region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\n                region.scroll = settings.get(\"scroll\", \"\");\n                // Register the region.\n                self.onregion && self.onregion(region);\n                // Remember the VTTRegion for later in case we parse any VTTCues that\n                // reference it.\n                self.regionList.push({\n                    id: settings.get(\"id\"),\n                    region: region\n                });\n            }\n        }\n        // draft-pantos-http-live-streaming-20\n        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\n        // 3.5 WebVTT\n        function parseTimestampMap(input) {\n            var settings = new Settings();\n            parseOptions(input, function(k, v) {\n                switch(k){\n                    case \"MPEGT\":\n                        settings.integer(k + \"S\", v);\n                        break;\n                    case \"LOCA\":\n                        settings.set(k + \"L\", parseTimeStamp(v));\n                        break;\n                }\n            }, /[^\\d]:/, /,/);\n            self.ontimestampmap && self.ontimestampmap({\n                \"MPEGTS\": settings.get(\"MPEGTS\"),\n                \"LOCAL\": settings.get(\"LOCAL\")\n            });\n        }\n        // 3.2 WebVTT metadata header syntax\n        function parseHeader(input) {\n            if (input.match(/X-TIMESTAMP-MAP/)) {\n                // This line contains HLS X-TIMESTAMP-MAP metadata\n                parseOptions(input, function(k, v) {\n                    switch(k){\n                        case \"X-TIMESTAMP-MAP\":\n                            parseTimestampMap(v);\n                            break;\n                    }\n                }, /=/);\n            } else {\n                parseOptions(input, function(k, v) {\n                    switch(k){\n                        case \"Region\":\n                            // 3.3 WebVTT region metadata header syntax\n                            parseRegion(v);\n                            break;\n                    }\n                }, /:/);\n            }\n        }\n        // 5.1 WebVTT file parsing.\n        try {\n            var line;\n            if (self.state === \"INITIAL\") {\n                // We can't start parsing until we have the first line.\n                if (!/\\r\\n|\\n/.test(self.buffer)) {\n                    return this;\n                }\n                line = collectNextLine();\n                var m = line.match(/^WEBVTT([ \\t].*)?$/);\n                if (!m || !m[0]) {\n                    throw new ParsingError(ParsingError.Errors.BadSignature);\n                }\n                self.state = \"HEADER\";\n            }\n            var alreadyCollectedLine = false;\n            while(self.buffer){\n                // We can't parse a line until we have the full line.\n                if (!/\\r\\n|\\n/.test(self.buffer)) {\n                    return this;\n                }\n                if (!alreadyCollectedLine) {\n                    line = collectNextLine();\n                } else {\n                    alreadyCollectedLine = false;\n                }\n                switch(self.state){\n                    case \"HEADER\":\n                        // 13-18 - Allow a header (metadata) under the WEBVTT line.\n                        if (/:/.test(line)) {\n                            parseHeader(line);\n                        } else if (!line) {\n                            // An empty line terminates the header and starts the body (cues).\n                            self.state = \"ID\";\n                        }\n                        continue;\n                    case \"NOTE\":\n                        // Ignore NOTE blocks.\n                        if (!line) {\n                            self.state = \"ID\";\n                        }\n                        continue;\n                    case \"ID\":\n                        // Check for the start of NOTE blocks.\n                        if (/^NOTE($|[ \\t])/.test(line)) {\n                            self.state = \"NOTE\";\n                            break;\n                        }\n                        // 19-29 - Allow any number of line terminators, then initialize new cue values.\n                        if (!line) {\n                            continue;\n                        }\n                        self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\n                        // Safari still uses the old middle value and won't accept center\n                        try {\n                            self.cue.align = \"center\";\n                        } catch (e) {\n                            self.cue.align = \"middle\";\n                        }\n                        self.state = \"CUE\";\n                        // 30-39 - Check if self line contains an optional identifier or timing data.\n                        if (line.indexOf(\"-->\") === -1) {\n                            self.cue.id = line;\n                            continue;\n                        }\n                    // Process line as start of a cue.\n                    /*falls through*/ case \"CUE\":\n                        // 40 - Collect cue timings and settings.\n                        try {\n                            parseCue(line, self.cue, self.regionList);\n                        } catch (e) {\n                            self.reportOrThrowError(e);\n                            // In case of an error ignore rest of the cue.\n                            self.cue = null;\n                            self.state = \"BADCUE\";\n                            continue;\n                        }\n                        self.state = \"CUETEXT\";\n                        continue;\n                    case \"CUETEXT\":\n                        var hasSubstring = line.indexOf(\"-->\") !== -1;\n                        // 34 - If we have an empty line then report the cue.\n                        // 35 - If we have the special substring '-->' then report the cue,\n                        // but do not collect the line as we need to process the current\n                        // one as a new cue.\n                        if (!line || hasSubstring && (alreadyCollectedLine = true)) {\n                            // We are done parsing self cue.\n                            self.oncue && self.oncue(self.cue);\n                            self.cue = null;\n                            self.state = \"ID\";\n                            continue;\n                        }\n                        if (self.cue.text) {\n                            self.cue.text += \"\\n\";\n                        }\n                        self.cue.text += line.replace(/\\u2028/g, \"\\n\").replace(/u2029/g, \"\\n\");\n                        continue;\n                    case \"BADCUE\":\n                        // 54-62 - Collect and discard the remaining cue.\n                        if (!line) {\n                            self.state = \"ID\";\n                        }\n                        continue;\n                }\n            }\n        } catch (e) {\n            self.reportOrThrowError(e);\n            // If we are currently parsing a cue, report what we have.\n            if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\n                self.oncue(self.cue);\n            }\n            self.cue = null;\n            // Enter BADWEBVTT state if header was not parsed correctly otherwise\n            // another exception occurred so enter BADCUE state.\n            self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\n        }\n        return this;\n    },\n    flush: function() {\n        var self = this;\n        try {\n            // Finish decoding the stream.\n            self.buffer += self.decoder.decode();\n            // Synthesize the end of the current cue or region.\n            if (self.cue || self.state === \"HEADER\") {\n                self.buffer += \"\\n\\n\";\n                self.parse();\n            }\n            // If we've flushed, parsed, and we're still on the INITIAL state then\n            // that means we don't have enough of the stream to parse the first\n            // line.\n            if (self.state === \"INITIAL\") {\n                throw new ParsingError(ParsingError.Errors.BadSignature);\n            }\n        } catch (e) {\n            self.reportOrThrowError(e);\n        }\n        self.onflush && self.onflush();\n        return this;\n    }\n};\nmodule.exports = WebVTT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/videojs-vtt.js/lib/vtt.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/videojs-vtt.js/lib/vttcue.js":
/*!****************************************************!*\
  !*** ../node_modules/videojs-vtt.js/lib/vttcue.js ***!
  \****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \nvar autoKeyword = \"auto\";\nvar directionSetting = {\n    \"\": 1,\n    \"lr\": 1,\n    \"rl\": 1\n};\nvar alignSetting = {\n    \"start\": 1,\n    \"center\": 1,\n    \"end\": 1,\n    \"left\": 1,\n    \"right\": 1,\n    \"auto\": 1,\n    \"line-left\": 1,\n    \"line-right\": 1\n};\nfunction findDirectionSetting(value) {\n    if (typeof value !== \"string\") {\n        return false;\n    }\n    var dir = directionSetting[value.toLowerCase()];\n    return dir ? value.toLowerCase() : false;\n}\nfunction findAlignSetting(value) {\n    if (typeof value !== \"string\") {\n        return false;\n    }\n    var align = alignSetting[value.toLowerCase()];\n    return align ? value.toLowerCase() : false;\n}\nfunction VTTCue(startTime, endTime, text) {\n    /**\n   * Shim implementation specific properties. These properties are not in\n   * the spec.\n   */ // Lets us know when the VTTCue's data has changed in such a way that we need\n    // to recompute its display state. This lets us compute its display state\n    // lazily.\n    this.hasBeenReset = false;\n    /**\n   * VTTCue and TextTrackCue properties\n   * http://dev.w3.org/html5/webvtt/#vttcue-interface\n   */ var _id = \"\";\n    var _pauseOnExit = false;\n    var _startTime = startTime;\n    var _endTime = endTime;\n    var _text = text;\n    var _region = null;\n    var _vertical = \"\";\n    var _snapToLines = true;\n    var _line = \"auto\";\n    var _lineAlign = \"start\";\n    var _position = \"auto\";\n    var _positionAlign = \"auto\";\n    var _size = 100;\n    var _align = \"center\";\n    Object.defineProperties(this, {\n        \"id\": {\n            enumerable: true,\n            get: function() {\n                return _id;\n            },\n            set: function(value) {\n                _id = \"\" + value;\n            }\n        },\n        \"pauseOnExit\": {\n            enumerable: true,\n            get: function() {\n                return _pauseOnExit;\n            },\n            set: function(value) {\n                _pauseOnExit = !!value;\n            }\n        },\n        \"startTime\": {\n            enumerable: true,\n            get: function() {\n                return _startTime;\n            },\n            set: function(value) {\n                if (typeof value !== \"number\") {\n                    throw new TypeError(\"Start time must be set to a number.\");\n                }\n                _startTime = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"endTime\": {\n            enumerable: true,\n            get: function() {\n                return _endTime;\n            },\n            set: function(value) {\n                if (typeof value !== \"number\") {\n                    throw new TypeError(\"End time must be set to a number.\");\n                }\n                _endTime = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"text\": {\n            enumerable: true,\n            get: function() {\n                return _text;\n            },\n            set: function(value) {\n                _text = \"\" + value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"region\": {\n            enumerable: true,\n            get: function() {\n                return _region;\n            },\n            set: function(value) {\n                _region = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"vertical\": {\n            enumerable: true,\n            get: function() {\n                return _vertical;\n            },\n            set: function(value) {\n                var setting = findDirectionSetting(value);\n                // Have to check for false because the setting an be an empty string.\n                if (setting === false) {\n                    throw new SyntaxError(\"Vertical: an invalid or illegal direction string was specified.\");\n                }\n                _vertical = setting;\n                this.hasBeenReset = true;\n            }\n        },\n        \"snapToLines\": {\n            enumerable: true,\n            get: function() {\n                return _snapToLines;\n            },\n            set: function(value) {\n                _snapToLines = !!value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"line\": {\n            enumerable: true,\n            get: function() {\n                return _line;\n            },\n            set: function(value) {\n                if (typeof value !== \"number\" && value !== autoKeyword) {\n                    throw new SyntaxError(\"Line: an invalid number or illegal string was specified.\");\n                }\n                _line = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"lineAlign\": {\n            enumerable: true,\n            get: function() {\n                return _lineAlign;\n            },\n            set: function(value) {\n                var setting = findAlignSetting(value);\n                if (!setting) {\n                    console.warn(\"lineAlign: an invalid or illegal string was specified.\");\n                } else {\n                    _lineAlign = setting;\n                    this.hasBeenReset = true;\n                }\n            }\n        },\n        \"position\": {\n            enumerable: true,\n            get: function() {\n                return _position;\n            },\n            set: function(value) {\n                if (value < 0 || value > 100) {\n                    throw new Error(\"Position must be between 0 and 100.\");\n                }\n                _position = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"positionAlign\": {\n            enumerable: true,\n            get: function() {\n                return _positionAlign;\n            },\n            set: function(value) {\n                var setting = findAlignSetting(value);\n                if (!setting) {\n                    console.warn(\"positionAlign: an invalid or illegal string was specified.\");\n                } else {\n                    _positionAlign = setting;\n                    this.hasBeenReset = true;\n                }\n            }\n        },\n        \"size\": {\n            enumerable: true,\n            get: function() {\n                return _size;\n            },\n            set: function(value) {\n                if (value < 0 || value > 100) {\n                    throw new Error(\"Size must be between 0 and 100.\");\n                }\n                _size = value;\n                this.hasBeenReset = true;\n            }\n        },\n        \"align\": {\n            enumerable: true,\n            get: function() {\n                return _align;\n            },\n            set: function(value) {\n                var setting = findAlignSetting(value);\n                if (!setting) {\n                    throw new SyntaxError(\"align: an invalid or illegal alignment string was specified.\");\n                }\n                _align = setting;\n                this.hasBeenReset = true;\n            }\n        }\n    });\n    /**\n   * Other <track> spec defined properties\n   */ // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n    this.displayState = undefined;\n}\n/**\n * VTTCue methods\n */ VTTCue.prototype.getCueAsHTML = function() {\n    // Assume WebVTT.convertCueToDOMTree is on the global.\n    return WebVTT.convertCueToDOMTree(window, this.text);\n};\nmodule.exports = VTTCue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/videojs-vtt.js/lib/vttcue.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/videojs-vtt.js/lib/vttregion.js":
/*!*******************************************************!*\
  !*** ../node_modules/videojs-vtt.js/lib/vttregion.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ \nvar scrollSetting = {\n    \"\": true,\n    \"up\": true\n};\nfunction findScrollSetting(value) {\n    if (typeof value !== \"string\") {\n        return false;\n    }\n    var scroll = scrollSetting[value.toLowerCase()];\n    return scroll ? value.toLowerCase() : false;\n}\nfunction isValidPercentValue(value) {\n    return typeof value === \"number\" && value >= 0 && value <= 100;\n}\n// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\nfunction VTTRegion() {\n    var _width = 100;\n    var _lines = 3;\n    var _regionAnchorX = 0;\n    var _regionAnchorY = 100;\n    var _viewportAnchorX = 0;\n    var _viewportAnchorY = 100;\n    var _scroll = \"\";\n    Object.defineProperties(this, {\n        \"width\": {\n            enumerable: true,\n            get: function() {\n                return _width;\n            },\n            set: function(value) {\n                if (!isValidPercentValue(value)) {\n                    throw new Error(\"Width must be between 0 and 100.\");\n                }\n                _width = value;\n            }\n        },\n        \"lines\": {\n            enumerable: true,\n            get: function() {\n                return _lines;\n            },\n            set: function(value) {\n                if (typeof value !== \"number\") {\n                    throw new TypeError(\"Lines must be set to a number.\");\n                }\n                _lines = value;\n            }\n        },\n        \"regionAnchorY\": {\n            enumerable: true,\n            get: function() {\n                return _regionAnchorY;\n            },\n            set: function(value) {\n                if (!isValidPercentValue(value)) {\n                    throw new Error(\"RegionAnchorX must be between 0 and 100.\");\n                }\n                _regionAnchorY = value;\n            }\n        },\n        \"regionAnchorX\": {\n            enumerable: true,\n            get: function() {\n                return _regionAnchorX;\n            },\n            set: function(value) {\n                if (!isValidPercentValue(value)) {\n                    throw new Error(\"RegionAnchorY must be between 0 and 100.\");\n                }\n                _regionAnchorX = value;\n            }\n        },\n        \"viewportAnchorY\": {\n            enumerable: true,\n            get: function() {\n                return _viewportAnchorY;\n            },\n            set: function(value) {\n                if (!isValidPercentValue(value)) {\n                    throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\n                }\n                _viewportAnchorY = value;\n            }\n        },\n        \"viewportAnchorX\": {\n            enumerable: true,\n            get: function() {\n                return _viewportAnchorX;\n            },\n            set: function(value) {\n                if (!isValidPercentValue(value)) {\n                    throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\n                }\n                _viewportAnchorX = value;\n            }\n        },\n        \"scroll\": {\n            enumerable: true,\n            get: function() {\n                return _scroll;\n            },\n            set: function(value) {\n                var setting = findScrollSetting(value);\n                // Have to check for false as an empty string is a legal value.\n                if (setting === false) {\n                    console.warn(\"Scroll: an invalid or illegal string was specified.\");\n                } else {\n                    _scroll = setting;\n                }\n            }\n        }\n    });\n}\nmodule.exports = VTTRegion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3ZpZGVvanMtdnR0LmpzL2xpYi92dHRyZWdpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0NBY0M7QUFFRCxJQUFJQSxnQkFBZ0I7SUFDbEIsSUFBSTtJQUNKLE1BQU07QUFDUjtBQUVBLFNBQVNDLGtCQUFrQkMsS0FBSztJQUM5QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUM3QixPQUFPO0lBQ1Q7SUFDQSxJQUFJQyxTQUFTSCxhQUFhLENBQUNFLE1BQU1FLFdBQVcsR0FBRztJQUMvQyxPQUFPRCxTQUFTRCxNQUFNRSxXQUFXLEtBQUs7QUFDeEM7QUFFQSxTQUFTQyxvQkFBb0JILEtBQUs7SUFDaEMsT0FBTyxPQUFPQSxVQUFVLFlBQWFBLFNBQVMsS0FBS0EsU0FBUztBQUM5RDtBQUVBLHFFQUFxRTtBQUNyRSxTQUFTSTtJQUNQLElBQUlDLFNBQVM7SUFDYixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsaUJBQWlCO0lBQ3JCLElBQUlDLGlCQUFpQjtJQUNyQixJQUFJQyxtQkFBbUI7SUFDdkIsSUFBSUMsbUJBQW1CO0lBQ3ZCLElBQUlDLFVBQVU7SUFFZEMsT0FBT0MsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1FBQzVCLFNBQVM7WUFDUEMsWUFBWTtZQUNaQyxLQUFLO2dCQUNILE9BQU9WO1lBQ1Q7WUFDQVcsS0FBSyxTQUFTaEIsS0FBSztnQkFDakIsSUFBSSxDQUFDRyxvQkFBb0JILFFBQVE7b0JBQy9CLE1BQU0sSUFBSWlCLE1BQU07Z0JBQ2xCO2dCQUNBWixTQUFTTDtZQUNYO1FBQ0Y7UUFDQSxTQUFTO1lBQ1BjLFlBQVk7WUFDWkMsS0FBSztnQkFDSCxPQUFPVDtZQUNUO1lBQ0FVLEtBQUssU0FBU2hCLEtBQUs7Z0JBQ2pCLElBQUksT0FBT0EsVUFBVSxVQUFVO29CQUM3QixNQUFNLElBQUlrQixVQUFVO2dCQUN0QjtnQkFDQVosU0FBU047WUFDWDtRQUNGO1FBQ0EsaUJBQWlCO1lBQ2ZjLFlBQVk7WUFDWkMsS0FBSztnQkFDSCxPQUFPUDtZQUNUO1lBQ0FRLEtBQUssU0FBU2hCLEtBQUs7Z0JBQ2pCLElBQUksQ0FBQ0csb0JBQW9CSCxRQUFRO29CQUMvQixNQUFNLElBQUlpQixNQUFNO2dCQUNsQjtnQkFDQVQsaUJBQWlCUjtZQUNuQjtRQUNGO1FBQ0EsaUJBQWlCO1lBQ2ZjLFlBQVk7WUFDWkMsS0FBSztnQkFDSCxPQUFPUjtZQUNUO1lBQ0FTLEtBQUssU0FBU2hCLEtBQUs7Z0JBQ2pCLElBQUcsQ0FBQ0csb0JBQW9CSCxRQUFRO29CQUM5QixNQUFNLElBQUlpQixNQUFNO2dCQUNsQjtnQkFDQVYsaUJBQWlCUDtZQUNuQjtRQUNGO1FBQ0EsbUJBQW1CO1lBQ2pCYyxZQUFZO1lBQ1pDLEtBQUs7Z0JBQ0gsT0FBT0w7WUFDVDtZQUNBTSxLQUFLLFNBQVNoQixLQUFLO2dCQUNqQixJQUFJLENBQUNHLG9CQUFvQkgsUUFBUTtvQkFDL0IsTUFBTSxJQUFJaUIsTUFBTTtnQkFDbEI7Z0JBQ0FQLG1CQUFtQlY7WUFDckI7UUFDRjtRQUNBLG1CQUFtQjtZQUNqQmMsWUFBWTtZQUNaQyxLQUFLO2dCQUNILE9BQU9OO1lBQ1Q7WUFDQU8sS0FBSyxTQUFTaEIsS0FBSztnQkFDakIsSUFBSSxDQUFDRyxvQkFBb0JILFFBQVE7b0JBQy9CLE1BQU0sSUFBSWlCLE1BQU07Z0JBQ2xCO2dCQUNBUixtQkFBbUJUO1lBQ3JCO1FBQ0Y7UUFDQSxVQUFVO1lBQ1JjLFlBQVk7WUFDWkMsS0FBSztnQkFDSCxPQUFPSjtZQUNUO1lBQ0FLLEtBQUssU0FBU2hCLEtBQUs7Z0JBQ2pCLElBQUltQixVQUFVcEIsa0JBQWtCQztnQkFDaEMsK0RBQStEO2dCQUMvRCxJQUFJbUIsWUFBWSxPQUFPO29CQUNyQkMsUUFBUUMsSUFBSSxDQUFDO2dCQUNmLE9BQU87b0JBQ0xWLFVBQVVRO2dCQUNaO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQUcsT0FBT0MsT0FBTyxHQUFHbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvdmlkZW9qcy12dHQuanMvbGliL3Z0dHJlZ2lvbi5qcz83MWNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgdnR0LmpzIENvbnRyaWJ1dG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIHNjcm9sbFNldHRpbmcgPSB7XG4gIFwiXCI6IHRydWUsXG4gIFwidXBcIjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZmluZFNjcm9sbFNldHRpbmcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgc2Nyb2xsID0gc2Nyb2xsU2V0dGluZ1t2YWx1ZS50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIHNjcm9sbCA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDEwMCk7XG59XG5cbi8vIFZUVFJlZ2lvbiBzaGltIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3dlYnZ0dC8jdnR0cmVnaW9uLWludGVyZmFjZVxuZnVuY3Rpb24gVlRUUmVnaW9uKCkge1xuICB2YXIgX3dpZHRoID0gMTAwO1xuICB2YXIgX2xpbmVzID0gMztcbiAgdmFyIF9yZWdpb25BbmNob3JYID0gMDtcbiAgdmFyIF9yZWdpb25BbmNob3JZID0gMTAwO1xuICB2YXIgX3ZpZXdwb3J0QW5jaG9yWCA9IDA7XG4gIHZhciBfdmlld3BvcnRBbmNob3JZID0gMTAwO1xuICB2YXIgX3Njcm9sbCA9IFwiXCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIFwid2lkdGhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfd2lkdGg7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQZXJjZW50VmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2lkdGggbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3dpZHRoID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImxpbmVzXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2xpbmVzO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJMaW5lcyBtdXN0IGJlIHNldCB0byBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX2xpbmVzID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInJlZ2lvbkFuY2hvcllcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVnaW9uQW5jaG9yWTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWdpb25BbmNob3JYIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAxMDAuXCIpO1xuICAgICAgICB9XG4gICAgICAgIF9yZWdpb25BbmNob3JZID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInJlZ2lvbkFuY2hvclhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfcmVnaW9uQW5jaG9yWDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmKCFpc1ZhbGlkUGVyY2VudFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZ2lvbkFuY2hvclkgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3JlZ2lvbkFuY2hvclggPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwidmlld3BvcnRBbmNob3JZXCI6IHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3ZpZXdwb3J0QW5jaG9yWTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFBlcmNlbnRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWaWV3cG9ydEFuY2hvclkgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEwMC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgX3ZpZXdwb3J0QW5jaG9yWSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgXCJ2aWV3cG9ydEFuY2hvclhcIjoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdmlld3BvcnRBbmNob3JYO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkUGVyY2VudFZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZpZXdwb3J0QW5jaG9yWCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTAwLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBfdmlld3BvcnRBbmNob3JYID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBcInNjcm9sbFwiOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zY3JvbGw7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgc2V0dGluZyA9IGZpbmRTY3JvbGxTZXR0aW5nKHZhbHVlKTtcbiAgICAgICAgLy8gSGF2ZSB0byBjaGVjayBmb3IgZmFsc2UgYXMgYW4gZW1wdHkgc3RyaW5nIGlzIGEgbGVnYWwgdmFsdWUuXG4gICAgICAgIGlmIChzZXR0aW5nID09PSBmYWxzZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcm9sbDogYW4gaW52YWxpZCBvciBpbGxlZ2FsIHN0cmluZyB3YXMgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfc2Nyb2xsID0gc2V0dGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVlRUUmVnaW9uO1xuIl0sIm5hbWVzIjpbInNjcm9sbFNldHRpbmciLCJmaW5kU2Nyb2xsU2V0dGluZyIsInZhbHVlIiwic2Nyb2xsIiwidG9Mb3dlckNhc2UiLCJpc1ZhbGlkUGVyY2VudFZhbHVlIiwiVlRUUmVnaW9uIiwiX3dpZHRoIiwiX2xpbmVzIiwiX3JlZ2lvbkFuY2hvclgiLCJfcmVnaW9uQW5jaG9yWSIsIl92aWV3cG9ydEFuY2hvclgiLCJfdmlld3BvcnRBbmNob3JZIiwiX3Njcm9sbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiRXJyb3IiLCJUeXBlRXJyb3IiLCJzZXR0aW5nIiwiY29uc29sZSIsIndhcm4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/videojs-vtt.js/lib/vttregion.js\n");

/***/ })

};
;