/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pannellum-react";
exports.ids = ["vendor-chunks/pannellum-react"];
exports.modules = {

/***/ "(ssr)/../node_modules/pannellum-react/es/elements/Pannellum.js":
/*!****************************************************************!*\
  !*** ../node_modules/pannellum-react/es/elements/Pannellum.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prop-types */ \"(ssr)/../node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _pannellum_css_pannellum_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../pannellum/css/pannellum.css */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/css/pannellum.css\");\n/* harmony import */ var _pannellum_css_style_textInfo_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pannellum/css/style-textInfo.css */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/css/style-textInfo.css\");\n/* harmony import */ var _pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pannellum/js/libpannellum.js */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/libpannellum.js\");\n/* harmony import */ var _pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pannellum/js/pannellum.js */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/pannellum.js\");\n/* harmony import */ var _pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pannellum/js/RequestAnimationFrame */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/RequestAnimationFrame.js\");\n/* harmony import */ var _pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_5__);\nvar _class, _temp;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\n\n\nvar Pannellum = (_temp = _class = function(_PureComponent) {\n    _inherits(Pannellum, _PureComponent);\n    function Pannellum(props) {\n        _classCallCheck(this, Pannellum);\n        var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n        _this.renderImage = function(state) {\n            var children = _this.props.children;\n            // make the array of sub components, even if its one, it become array of one\n            var hotspots = [].concat(children);\n            var hotspotArray = [];\n            if (Array.isArray(hotspots)) {\n                hotspots.map(function(hotspot) {\n                    switch(hotspot.props.type){\n                        case \"info\":\n                            return hotspotArray.push({\n                                id: Math.random().toString(36).substr(2, 9),\n                                type: hotspot.props.type,\n                                pitch: hotspot.props.pitch ? hotspot.props.pitch : 10,\n                                yaw: hotspot.props.yaw ? hotspot.props.yaw : 10,\n                                text: hotspot.props.text ? hotspot.props.text : \"\",\n                                URL: hotspot.props.URL ? hotspot.props.URL : \"\"\n                            });\n                        case \"custom\":\n                            return hotspotArray.push({\n                                id: Math.random().toString(36).substr(2, 9),\n                                pitch: hotspot.props.pitch ? hotspot.props.pitch : 10,\n                                yaw: hotspot.props.yaw ? hotspot.props.yaw : 10,\n                                cssClass: hotspot.props.cssClass ? hotspot.props.cssClass : \"tooltipcss\",\n                                createTooltipFunc: hotspot.props.tooltip ? hotspot.props.tooltip : _this.hotspotTooltip,\n                                createTooltipArgs: hotspot.props.tooltipArg ? hotspot.props.tooltipArg : {},\n                                clickHandlerFunc: hotspot.props.handleClick ? hotspot.props.handleClick : _this.handleClickHotspot,\n                                clickHandlerArgs: hotspot.props.handleClickArg ? hotspot.props.handleClickArg : {\n                                    name: \"test\"\n                                }\n                            });\n                        default:\n                            return [];\n                    }\n                });\n            }\n            var jsonConfig = {\n                type: \"equirectangular\",\n                panorama: _this.props.image,\n                haov: _this.props.haov,\n                vaov: _this.props.vaov,\n                vOffset: _this.props.vOffset,\n                yaw: _this.props.yaw,\n                pitch: _this.props.pitch,\n                hfov: _this.props.hfov,\n                minHfov: _this.props.minHfov,\n                maxHfov: _this.props.maxHfov,\n                minPitch: _this.props.minPitch,\n                maxPitch: _this.props.maxPitch,\n                minYaw: _this.props.minYaw,\n                maxYaw: _this.props.maxYaw,\n                autoRotate: _this.props.autoRotate,\n                compass: _this.props.compass,\n                preview: _this.props.preview,\n                previewTitle: _this.props.previewTitle,\n                previewAuthor: _this.props.previewAuthor,\n                author: _this.props.author,\n                title: _this.props.title,\n                autoLoad: _this.props.autoLoad,\n                orientationOnByDefault: _this.props.orientationOnByDefault,\n                showZoomCtrl: _this.props.showZoomCtrl,\n                keyboardZoom: _this.props.keyboardZoom,\n                mouseZoom: _this.props.mouseZoom,\n                draggable: _this.props.draggable,\n                disableKeyboardCtrl: _this.props.disableKeyboardCtrl,\n                showFullscreenCtrl: _this.props.showFullscreenCtrl,\n                showControls: _this.props.showControls,\n                hotSpotDebug: _this.props.hotspotDebug,\n                hotSpots: hotspotArray,\n                onRender: _this.props.onRender\n            };\n            Object.keys(jsonConfig).forEach(function(key) {\n                return jsonConfig[key] === \"\" && delete jsonConfig[key];\n            });\n            // this.setState({ jsonConfig });\n            if (state === \"update\") {\n                _this.panorama.destroy();\n            }\n            _this.panorama = pannellum.viewer(_this.props.id ? _this.props.id : _this.state.id, jsonConfig);\n            _this.panorama.on(\"load\", _this.props.onLoad);\n            _this.panorama.on(\"scenechange\", _this.props.onScenechange);\n            _this.panorama.on(\"scenechangefadedone\", _this.props.onScenechangefadedone);\n            _this.panorama.on(\"error\", _this.props.onError);\n            _this.panorama.on(\"errorcleared\", _this.props.onErrorcleared);\n            _this.panorama.on(\"mousedown\", _this.props.onMousedown);\n            _this.panorama.on(\"mouseup\", _this.props.onMouseup);\n            _this.panorama.on(\"touchstart\", _this.props.onTouchstart);\n            _this.panorama.on(\"touchend\", _this.props.onTouchend);\n        };\n        _this.componentDidMount = function() {\n            _this.renderImage(\"mount\");\n        };\n        _this.handleClickHotspot = function(e, args) {\n            console.log(\"hotspot clicked\", args.name);\n        };\n        _this.hotspotTooltip = function(hotSpotDiv, args) {\n            hotSpotDiv.setAttribute(\"id\", \"textInfo\");\n            var hDiv = document.createElement(\"div\");\n            hDiv.classList.add(\"hotspot\");\n            var outDiv = document.createElement(\"div\");\n            outDiv.classList.add(\"out\");\n            var inDiv = document.createElement(\"div\");\n            inDiv.classList.add(\"in\");\n            var imageDiv = document.createElement(\"div\");\n            imageDiv.classList.add(\"image\");\n            hotSpotDiv.appendChild(hDiv);\n            hDiv.appendChild(inDiv);\n            hDiv.appendChild(outDiv);\n        };\n        _this.getViewer = function() {\n            return _this.panorama;\n        };\n        _this.forceRender = function() {\n            _this.renderImage(\"update\");\n        };\n        _this.state = {\n            id: Math.random().toString(36).substr(2, 9)\n        };\n        return _this;\n    }\n    Pannellum.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.image !== this.props.image || prevProps.width !== this.props.width || prevProps.height !== this.props.height || prevProps.compass !== this.props.compass || prevProps.title !== this.props.title || prevProps.author !== this.props.author || prevProps.preview !== this.props.preview || prevProps.previewTitle !== this.props.previewTitle || prevProps.previewAuthor !== this.props.previewAuthor || prevProps.showZoomCtrl !== this.props.showZoomCtrl || prevProps.showFullscreenCtrl !== this.props.showFullscreenCtrl || prevProps.showControls !== this.props.showControls || prevProps.children.length !== this.props.children.length) {\n            this.renderImage(\"update\");\n        }\n        if (prevProps.maxYaw !== this.props.maxYaw || prevProps.minYaw !== this.props.minYaw || prevProps.maxPitch !== this.props.maxPitch || prevProps.minPitch !== this.props.minPitch || prevProps.maxHfov !== this.props.maxHfov || prevProps.minHfov !== this.props.minHfov) {\n            this.panorama.setYawBounds([\n                this.props.minYaw,\n                this.props.maxYaw\n            ]);\n            this.panorama.setPitchBounds([\n                this.props.minPitch,\n                this.props.maxPitch\n            ]);\n            this.panorama.setHfovBounds([\n                this.props.minHfov,\n                this.props.maxHfov\n            ]);\n        }\n        if (prevProps.yaw !== this.props.yaw) {\n            this.panorama.setYaw(this.props.yaw);\n        }\n        if (prevProps.pitch !== this.props.pitch) {\n            this.panorama.setPitch(this.props.pitch);\n        }\n        if (prevProps.hfov !== this.props.hfov) {\n            this.panorama.setHfov(this.props.hfov);\n        }\n    };\n    Pannellum.prototype.render = function render() {\n        var _this2 = this;\n        var _props = this.props, width = _props.width, height = _props.height;\n        var divStyle = {\n            width: width,\n            height: height\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            id: this.props.id ? this.props.id : this.state.id,\n            style: divStyle,\n            ref: function ref(node) {\n                return _this2.imageNode = node;\n            }\n        });\n    };\n    return Pannellum;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent), _class.defaultProps = {\n    children: [],\n    width: \"100%\",\n    height: \"400px\",\n    image: \"\",\n    haov: 360,\n    vaov: 180,\n    vOffset: 0,\n    yaw: 0,\n    pitch: 0,\n    hfov: 100,\n    minHfov: 50,\n    maxHfov: 150,\n    minPitch: -90,\n    maxPitch: 90,\n    minYaw: -180,\n    maxYaw: 180,\n    autoRotate: 0,\n    compass: false,\n    preview: \"\",\n    previewTitle: \"\",\n    previewAuthor: \"\",\n    title: \"\",\n    author: \"\",\n    autoLoad: false,\n    orientationOnByDefault: false,\n    showZoomCtrl: true,\n    keyboardZoom: true,\n    mouseZoom: true,\n    draggable: true,\n    disableKeyboardCtrl: false,\n    showFullscreenCtrl: true,\n    showControls: true,\n    onLoad: function onLoad() {},\n    onScenechange: function onScenechange() {},\n    onScenechangefadedone: function onScenechangefadedone() {},\n    onError: function onError() {},\n    onErrorcleared: function onErrorcleared() {},\n    onMousedown: function onMousedown() {},\n    onMouseup: function onMouseup() {},\n    onTouchstart: function onTouchstart() {},\n    onTouchend: function onTouchend() {},\n    hotspotDebug: false,\n    onRender: null\n}, _temp);\nPannellum.propTypes =  true ? {\n    children: prop_types__WEBPACK_IMPORTED_MODULE_6___default().oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_6___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_6___default().node)),\n        (prop_types__WEBPACK_IMPORTED_MODULE_6___default().node)\n    ]),\n    id: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    width: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    height: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    image: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    haov: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    vaov: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    vOffset: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    yaw: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    pitch: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    hfov: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    minHfov: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    maxHfov: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    minPitch: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    maxPitch: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    minYaw: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    maxYaw: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    autoRotate: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().number),\n    compass: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    preview: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    previewTitle: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    previewAuthor: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    title: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    author: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    autoLoad: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    orientationOnByDefault: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    showZoomCtrl: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    keyboardZoom: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    mouseZoom: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    draggable: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    disableKeyboardCtrl: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    showFullscreenCtrl: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    showControls: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    onLoad: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onScenechange: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onScenechangefadedone: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onError: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onErrorcleared: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onMousedown: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onMouseup: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onTouchstart: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    onTouchend: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    hotspotDebug: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().bool),\n    tooltip: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    tooltipArg: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().object),\n    handleClick: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func),\n    handleClickArg: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().object),\n    cssClass: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().string),\n    onRender: (prop_types__WEBPACK_IMPORTED_MODULE_6___default().func)\n} : 0;\nPannellum.Hotspot = function() {};\nPannellum.Hotspot = function() {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Pannellum);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/elements/Pannellum.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/elements/PannellumVideo.js":
/*!*********************************************************************!*\
  !*** ../node_modules/pannellum-react/es/elements/PannellumVideo.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prop-types */ \"(ssr)/../node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! video.js */ \"(ssr)/../node_modules/video.js/dist/video.es.js\");\n/* harmony import */ var _pannellum_css_video_js_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../pannellum/css/video-js.css */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/css/video-js.css\");\n/* harmony import */ var _pannellum_css_pannellum_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../pannellum/css/pannellum.css */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/css/pannellum.css\");\n/* harmony import */ var _pannellum_css_style_textInfo_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pannellum/css/style-textInfo.css */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/css/style-textInfo.css\");\n/* harmony import */ var _pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../pannellum/js/libpannellum.js */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/libpannellum.js\");\n/* harmony import */ var _pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_libpannellum_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../pannellum/js/RequestAnimationFrame */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/RequestAnimationFrame.js\");\n/* harmony import */ var _pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_RequestAnimationFrame__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../pannellum/js/pannellum.js */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/pannellum.js\");\n/* harmony import */ var _pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_pannellum_js_pannellum_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _pannellum_js_videojs_pannellum_plugin__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../pannellum/js/videojs-pannellum-plugin */ \"(ssr)/../node_modules/pannellum-react/es/pannellum/js/videojs-pannellum-plugin.js\");\nvar _class, _temp;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n\n\n\n\n\n\n\n\n\nvar PannellumVideo = (_temp = _class = function(_Component) {\n    _inherits(PannellumVideo, _Component);\n    function PannellumVideo(props) {\n        _classCallCheck(this, PannellumVideo);\n        var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n        _this.renderVideo = function(state) {\n            var children = _this.props.children;\n            // make the array of sub components, even if its one, it become array of one \n            var hotspots = [].concat(children);\n            var hotspotArray = [];\n            if (Array.isArray(hotspots)) {\n                hotspots.map(function(hotspot) {\n                    switch(hotspot.props.type){\n                        case \"info\":\n                            return hotspotArray.push({\n                                \"id\": Math.random().toString(36).substr(2, 9),\n                                \"type\": hotspot.props.type,\n                                \"pitch\": hotspot.props.pitch ? hotspot.props.pitch : 10,\n                                \"yaw\": hotspot.props.yaw ? hotspot.props.yaw : 10,\n                                \"text\": hotspot.props.text ? hotspot.props.text : \"\",\n                                \"URL\": hotspot.props.URL ? hotspot.props.URL : \"\"\n                            });\n                        case \"custom\":\n                            return hotspotArray.push({\n                                \"id\": Math.random().toString(36).substr(2, 9),\n                                \"pitch\": hotspot.props.pitch ? hotspot.props.pitch : 10,\n                                \"yaw\": hotspot.props.yaw ? hotspot.props.yaw : 10,\n                                \"cssClass\": hotspot.props.cssClass ? hotspot.props.cssClass : \"tooltipcss\",\n                                \"createTooltipFunc\": hotspot.props.tooltip ? hotspot.props.tooltip : _this.hotspotTooltip,\n                                \"createTooltipArgs\": hotspot.props.tooltipArg ? hotspot.props.tooltipArg : {},\n                                \"clickHandlerFunc\": hotspot.props.handleClick ? hotspot.props.handleClick : _this.handleClickHotspot,\n                                \"clickHandlerArgs\": hotspot.props.handleClickArg ? hotspot.props.handleClickArg : {\n                                    name: \"test\"\n                                }\n                            });\n                        default:\n                            return [];\n                    }\n                });\n            }\n            if (state === \"update\") {\n                _this.video = (0,video_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this.videoNode);\n                var cuurentHS = [].concat(_this.video.pnlmViewer.getConfig().hotSpots);\n                _this.video.pnlmViewer.setYaw(_this.props.yaw);\n                _this.video.pnlmViewer.setPitch(_this.props.pitch);\n                _this.video.pnlmViewer.setHfov(_this.props.hfov);\n                _this.video.pnlmViewer.setHfovBounds([\n                    _this.props.minHfov,\n                    _this.props.maxHfov\n                ]);\n                //remove all hotspots\n                cuurentHS.map(function(hs) {\n                    return _this.video.pnlmViewer.removeHotSpot(hs.id);\n                });\n                // Adding new hotspots\n                hotspotArray.map(function(hs) {\n                    return _this.video.pnlmViewer.addHotSpot(hs);\n                });\n                // setting new video\n                _this.video.src({\n                    type: \"video/mp4\",\n                    src: _this.props.video\n                });\n                return _this.video.play();\n            } else {\n                _this.video = (0,video_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_this.videoNode, {\n                    loop: _this.props.loop,\n                    autoplay: _this.props.autoplay,\n                    controls: _this.props.controls,\n                    muted: _this.props.muted,\n                    plugins: {\n                        pannellum: {\n                            yaw: _this.props.yaw,\n                            pitch: _this.props.pitch,\n                            hfov: _this.props.hfov,\n                            minHfov: _this.props.minHfov,\n                            maxHfov: _this.props.maxHfov,\n                            minPitch: _this.props.minPitch,\n                            maxPitch: _this.props.maxPitch,\n                            minYaw: _this.props.minYaw,\n                            maxYaw: _this.props.maxYaw,\n                            hotSpotDebug: _this.props.hotspotDebug,\n                            autoRotate: _this.props.autoRotate,\n                            mouseZoom: _this.props.mouseZoom,\n                            hotSpots: hotspotArray\n                        }\n                    }\n                });\n                _this.video.src({\n                    type: \"video/mp4\",\n                    src: _this.props.video\n                });\n                _this.video.play();\n            }\n        };\n        _this.componentDidMount = function() {\n            _this.renderVideo(\"mount\");\n        };\n        _this.handleClickHotspot = function(e, args) {\n            console.log(\"hotspot clicked\", args.name);\n        };\n        _this.hotspotTooltip = function(hotSpotDiv, args) {\n            hotSpotDiv.setAttribute(\"id\", \"textInfo\");\n            var hDiv = document.createElement(\"div\");\n            hDiv.classList.add(\"hotspot\");\n            var outDiv = document.createElement(\"div\");\n            outDiv.classList.add(\"out\");\n            var inDiv = document.createElement(\"div\");\n            inDiv.classList.add(\"in\");\n            var imageDiv = document.createElement(\"div\");\n            imageDiv.classList.add(\"image\");\n            hotSpotDiv.appendChild(hDiv);\n            hDiv.appendChild(inDiv);\n            hDiv.appendChild(outDiv);\n        };\n        _this.getViewer = function() {\n            return _this.video.pnlmViewer;\n        };\n        _this.state = {\n            id: Math.random().toString(36).substr(2, 9)\n        };\n        return _this;\n    }\n    PannellumVideo.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n        // videojs(this.videoNode).dispose();\n        // this.videoNode.setAttribute(\"src\", this.props.video );\n        this.renderVideo(\"update\");\n    };\n    PannellumVideo.prototype.componentWillUnmount = function componentWillUnmount() {\n        (0,video_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.videoNode).dispose();\n    };\n    PannellumVideo.prototype.render = function render() {\n        var _this2 = this;\n        var _props = this.props, width = _props.width, height = _props.height, video = _props.video;\n        var divStyle = {\n            width: width,\n            height: height\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            \"data-vjs-player\": true\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"video\", {\n            id: this.props.id ? this.props.id : this.state.id,\n            className: \"video-js vjs-default-skin vjs-big-play-centered\",\n            ref: function ref(node) {\n                return _this2.videoNode = node;\n            },\n            preload: \"none\",\n            crossOrigin: \"anonymous\",\n            style: divStyle\n        }));\n    };\n    return PannellumVideo;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component), _class.defaultProps = {\n    children: [],\n    width: \"100%\",\n    height: \"400px\",\n    video: \"\",\n    yaw: 0,\n    pitch: 0,\n    hfov: 100,\n    minHfov: 50,\n    maxHfov: 150,\n    minPitch: -90,\n    maxPitch: 90,\n    minYaw: -180,\n    maxYaw: 180,\n    hotspotDebug: false,\n    autoRotate: 0,\n    mouseZoom: true,\n    loop: false,\n    autoplay: true,\n    controls: false,\n    muted: true\n}, _temp);\nPannellumVideo.propTypes =  true ? {\n    children: prop_types__WEBPACK_IMPORTED_MODULE_9___default().oneOfType([\n        prop_types__WEBPACK_IMPORTED_MODULE_9___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_9___default().node)),\n        (prop_types__WEBPACK_IMPORTED_MODULE_9___default().node)\n    ]),\n    id: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),\n    width: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),\n    height: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),\n    video: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string),\n    yaw: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    pitch: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    hfov: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    minHfov: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    maxHfov: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    minPitch: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    maxPitch: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    minYaw: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    maxYaw: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    hotspotDebug: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    autoRotate: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().number),\n    mouseZoom: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    loop: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    autoplay: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    controls: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    muted: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().bool),\n    tooltip: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().func),\n    tooltipArg: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object),\n    handleClick: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().func),\n    handleClickArg: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().object),\n    cssClass: (prop_types__WEBPACK_IMPORTED_MODULE_9___default().string)\n} : 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PannellumVideo);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/elements/PannellumVideo.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/index.js":
/*!***************************************************!*\
  !*** ../node_modules/pannellum-react/es/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pannellum: () => (/* reexport safe */ _elements_Pannellum__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   PannellumVideo: () => (/* reexport safe */ _elements_PannellumVideo__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _elements_Pannellum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./elements/Pannellum */ \"(ssr)/../node_modules/pannellum-react/es/elements/Pannellum.js\");\n/* harmony import */ var _elements_PannellumVideo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements/PannellumVideo */ \"(ssr)/../node_modules/pannellum-react/es/elements/PannellumVideo.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZDO0FBQ1U7QUFFbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvcGFubmVsbHVtLXJlYWN0L2VzL2luZGV4LmpzP2NkOTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhbm5lbGx1bSBmcm9tIFwiLi9lbGVtZW50cy9QYW5uZWxsdW1cIjtcbmltcG9ydCBQYW5uZWxsdW1WaWRlbyBmcm9tIFwiLi9lbGVtZW50cy9QYW5uZWxsdW1WaWRlb1wiO1xuXG5leHBvcnQgeyBQYW5uZWxsdW0sIFBhbm5lbGx1bVZpZGVvIH07Il0sIm5hbWVzIjpbIlBhbm5lbGx1bSIsIlBhbm5lbGx1bVZpZGVvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/js/RequestAnimationFrame.js":
/*!********************************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/js/RequestAnimationFrame.js ***!
  \********************************************************************************/
/***/ (() => {

eval("/**\n * Provides requestAnimationFrame in a cross browser way.\n * http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n */ if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function() {\n        return window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(/* function FrameRequestCallback */ callback, /* DOMElement Element */ element) {\n            window.setTimeout(callback, 1000 / 60);\n        };\n    }();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvcGFubmVsbHVtLXJlYWN0L2VzL3Bhbm5lbGx1bS9qcy9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUuanM/MTdlMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIHJlcXVlc3RBbmltYXRpb25GcmFtZSBpbiBhIGNyb3NzIGJyb3dzZXIgd2F5LlxuICogaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cbiAqL1xuXG5pZiAoIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgcmV0dXJuIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24gKCAvKiBmdW5jdGlvbiBGcmFtZVJlcXVlc3RDYWxsYmFjayAqL2NhbGxiYWNrLCAvKiBET01FbGVtZW50IEVsZW1lbnQgKi9lbGVtZW50KSB7XG5cbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICAgICAgICB9O1xuICAgIH0oKTtcbn0iXSwibmFtZXMiOlsid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJlbGVtZW50Iiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBRUQsSUFBSSxDQUFDQSxPQUFPQyxxQkFBcUIsRUFBRTtJQUUvQkQsT0FBT0MscUJBQXFCLEdBQUc7UUFFM0IsT0FBT0QsT0FBT0UsMkJBQTJCLElBQUlGLE9BQU9HLHdCQUF3QixJQUFJSCxPQUFPSSxzQkFBc0IsSUFBSUosT0FBT0ssdUJBQXVCLElBQUksU0FBVyxpQ0FBaUMsR0FBRUMsUUFBUSxFQUFFLHNCQUFzQixHQUFFQyxPQUFPO1lBRXRPUCxPQUFPUSxVQUFVLENBQUNGLFVBQVUsT0FBTztRQUN2QztJQUNKO0FBQ0oiLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vanMvUmVxdWVzdEFuaW1hdGlvbkZyYW1lLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/js/RequestAnimationFrame.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/js/libpannellum.js":
/*!***********************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/js/libpannellum.js ***!
  \***********************************************************************/
/***/ (() => {

eval("/*\n * libpannellum - A WebGL and CSS 3D transform based Panorama Renderer\n * Copyright (c) 2012-2018 Matthew Petroff\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */ window.libpannellum = function(window1, document1, undefined) {\n    /**\n  * Creates a new panorama renderer.\n  * @constructor\n  * @param {HTMLElement} container - The container element for the renderer.\n  */ function Renderer(container) {\n        var canvas = document1.createElement(\"canvas\");\n        canvas.style.width = canvas.style.height = \"100%\";\n        container.appendChild(canvas);\n        var program, gl, vs, fs;\n        var fallbackImgSize;\n        var world;\n        var vtmps;\n        var pose;\n        var image, imageType, dynamic;\n        var texCoordBuffer, cubeVertBuf, cubeVertTexCoordBuf, cubeVertIndBuf;\n        var globalParams;\n        /**\n     * Initialize renderer.\n     * @memberof Renderer\n     * @instance\n     * @param {Image|Array|Object} image - Input image; format varies based on\n     *      `imageType`. For `equirectangular`, this is an image; for\n     *      `cubemap`, this is an array of images for the cube faces in the\n     *      order [+z, +x, -z, -x, +y, -y]; for `multires`, this is a\n     *      configuration object.\n     * @param {string} imageType - The type of the image: `equirectangular`,\n     *      `cubemap`, or `multires`.\n     * @param {boolean} dynamic - Whether or not the image is dynamic (e.g. video).\n     * @param {number} haov - Initial horizontal angle of view.\n     * @param {number} vaov - Initial vertical angle of view.\n     * @param {number} voffset - Initial vertical offset angle.\n     * @param {function} callback - Load callback function.\n     * @param {Object} [params] - Other configuration parameters (`horizonPitch`, `horizonRoll`, `backgroundColor`).\n     */ this.init = function(_image, _imageType, _dynamic, haov, vaov, voffset, callback, params) {\n            // Default argument for image type\n            if (_imageType === undefined) {\n                _imageType = \"equirectangular\";\n            }\n            if (_imageType != \"equirectangular\" && _imageType != \"cubemap\" && _imageType != \"multires\") {\n                console.log(\"Error: invalid image type specified!\");\n                throw {\n                    type: \"config error\"\n                };\n            }\n            imageType = _imageType;\n            image = _image;\n            dynamic = _dynamic;\n            globalParams = params || {};\n            // Clear old data\n            if (program) {\n                if (vs) {\n                    gl.detachShader(program, vs);\n                    gl.deleteShader(vs);\n                }\n                if (fs) {\n                    gl.detachShader(program, fs);\n                    gl.deleteShader(fs);\n                }\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n                if (program.texture) {\n                    gl.deleteTexture(program.texture);\n                }\n                if (program.nodeCache) {\n                    for(var i = 0; i < program.nodeCache.length; i++){\n                        gl.deleteTexture(program.nodeCache[i].texture);\n                    }\n                }\n                gl.deleteProgram(program);\n                program = undefined;\n            }\n            pose = undefined;\n            var s;\n            var faceMissing = false;\n            var cubeImgWidth;\n            if (imageType == \"cubemap\") {\n                for(s = 0; s < 6; s++){\n                    if (image[s].width > 0) {\n                        if (cubeImgWidth === undefined) {\n                            cubeImgWidth = image[s].width;\n                        }\n                        if (cubeImgWidth != image[s].width) {\n                            console.log(\"Cube faces have inconsistent widths: \" + cubeImgWidth + \" vs. \" + image[s].width);\n                        }\n                    } else {\n                        faceMissing = true;\n                    }\n                }\n            }\n            function fillMissingFaces(imgSize) {\n                if (faceMissing) {\n                    // Fill any missing fallback/cubemap faces with background\n                    var nbytes = imgSize * imgSize * 4; // RGB, plus non-functional alpha\n                    var imageArray = new Uint8ClampedArray(nbytes);\n                    var rgb = params.backgroundColor ? params.backgroundColor : [\n                        0,\n                        0,\n                        0\n                    ];\n                    rgb[0] *= 255;\n                    rgb[1] *= 255;\n                    rgb[2] *= 255;\n                    // Maybe filling could be done faster, see e.g. https://stackoverflow.com/questions/1295584/most-efficient-way-to-create-a-zero-filled-javascript-array\n                    for(var i = 0; i < nbytes; i++){\n                        imageArray[i++] = rgb[0];\n                        imageArray[i++] = rgb[1];\n                        imageArray[i++] = rgb[2];\n                    }\n                    var backgroundSquare = new ImageData(imageArray, imgSize, imgSize);\n                    for(s = 0; s < 6; s++){\n                        if (image[s].width == 0) {\n                            image[s] = backgroundSquare;\n                        }\n                    }\n                }\n            }\n            // This awful browser specific test exists because iOS 8/9 and IE 11\n            // don't display non-power-of-two cubemap textures but also don't\n            // throw an error (tested on an iPhone 5c / iOS 8.1.3 / iOS 9.2 /\n            // iOS 10.3.1).\n            // Therefore, the WebGL context is never created for these browsers for\n            // NPOT cubemaps, and the CSS 3D transform fallback renderer is used\n            // instead.\n            if (!(imageType == \"cubemap\" && (cubeImgWidth & cubeImgWidth - 1) !== 0 && (navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 8_/) || navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 9_/) || navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 10_/) || navigator.userAgent.match(/Trident.*rv[ :]*11\\./)))) {\n                // Enable WebGL on canvas\n                if (!gl) {\n                    gl = canvas.getContext(\"experimental-webgl\", {\n                        alpha: false,\n                        depth: false\n                    });\n                }\n                if (gl && gl.getError() == 1286) {\n                    handleWebGLError1286();\n                }\n            }\n            // If there is no WebGL, fall back to CSS 3D transform renderer.\n            // This will discard the image loaded so far and load the fallback image.\n            // While browser specific tests are usually frowned upon, the\n            // fallback viewer only really works with WebKit/Blink and IE 10/11\n            // (it doesn't work properly in Firefox).\n            if (!gl && (imageType == \"multires\" && image.hasOwnProperty(\"fallbackPath\") || imageType == \"cubemap\") && (\"WebkitAppearance\" in document1.documentElement.style || navigator.userAgent.match(/Trident.*rv[ :]*11\\./) || navigator.appVersion.indexOf(\"MSIE 10\") !== -1)) {\n                // Remove old world if it exists\n                if (world) {\n                    container.removeChild(world);\n                }\n                // Initialize renderer\n                world = document1.createElement(\"div\");\n                world.className = \"pnlm-world\";\n                // Add images\n                var path;\n                if (image.basePath) {\n                    path = image.basePath + image.fallbackPath;\n                } else {\n                    path = image.fallbackPath;\n                }\n                var sides = [\n                    \"f\",\n                    \"r\",\n                    \"b\",\n                    \"l\",\n                    \"u\",\n                    \"d\"\n                ];\n                var loaded = 0;\n                var onLoad = function onLoad() {\n                    // Draw image on canvas\n                    var faceCanvas = document1.createElement(\"canvas\");\n                    faceCanvas.className = \"pnlm-face pnlm-\" + sides[this.side] + \"face\";\n                    world.appendChild(faceCanvas);\n                    var faceContext = faceCanvas.getContext(\"2d\");\n                    faceCanvas.style.width = this.width + 4 + \"px\";\n                    faceCanvas.style.height = this.height + 4 + \"px\";\n                    faceCanvas.width = this.width + 4;\n                    faceCanvas.height = this.height + 4;\n                    faceContext.drawImage(this, 2, 2);\n                    var imgData = faceContext.getImageData(0, 0, faceCanvas.width, faceCanvas.height);\n                    var data = imgData.data;\n                    // Duplicate edge pixels\n                    var i;\n                    var j;\n                    for(i = 2; i < faceCanvas.width - 2; i++){\n                        for(j = 0; j < 4; j++){\n                            data[(i + faceCanvas.width) * 4 + j] = data[(i + faceCanvas.width * 2) * 4 + j];\n                            data[(i + faceCanvas.width * (faceCanvas.height - 2)) * 4 + j] = data[(i + faceCanvas.width * (faceCanvas.height - 3)) * 4 + j];\n                        }\n                    }\n                    for(i = 2; i < faceCanvas.height - 2; i++){\n                        for(j = 0; j < 4; j++){\n                            data[(i * faceCanvas.width + 1) * 4 + j] = data[(i * faceCanvas.width + 2) * 4 + j];\n                            data[((i + 1) * faceCanvas.width - 2) * 4 + j] = data[((i + 1) * faceCanvas.width - 3) * 4 + j];\n                        }\n                    }\n                    for(j = 0; j < 4; j++){\n                        data[(faceCanvas.width + 1) * 4 + j] = data[(faceCanvas.width * 2 + 2) * 4 + j];\n                        data[(faceCanvas.width * 2 - 2) * 4 + j] = data[(faceCanvas.width * 3 - 3) * 4 + j];\n                        data[(faceCanvas.width * (faceCanvas.height - 2) + 1) * 4 + j] = data[(faceCanvas.width * (faceCanvas.height - 3) + 2) * 4 + j];\n                        data[(faceCanvas.width * (faceCanvas.height - 1) - 2) * 4 + j] = data[(faceCanvas.width * (faceCanvas.height - 2) - 3) * 4 + j];\n                    }\n                    for(i = 1; i < faceCanvas.width - 1; i++){\n                        for(j = 0; j < 4; j++){\n                            data[i * 4 + j] = data[(i + faceCanvas.width) * 4 + j];\n                            data[(i + faceCanvas.width * (faceCanvas.height - 1)) * 4 + j] = data[(i + faceCanvas.width * (faceCanvas.height - 2)) * 4 + j];\n                        }\n                    }\n                    for(i = 1; i < faceCanvas.height - 1; i++){\n                        for(j = 0; j < 4; j++){\n                            data[i * faceCanvas.width * 4 + j] = data[(i * faceCanvas.width + 1) * 4 + j];\n                            data[((i + 1) * faceCanvas.width - 1) * 4 + j] = data[((i + 1) * faceCanvas.width - 2) * 4 + j];\n                        }\n                    }\n                    for(j = 0; j < 4; j++){\n                        data[j] = data[(faceCanvas.width + 1) * 4 + j];\n                        data[(faceCanvas.width - 1) * 4 + j] = data[(faceCanvas.width * 2 - 2) * 4 + j];\n                        data[faceCanvas.width * (faceCanvas.height - 1) * 4 + j] = data[(faceCanvas.width * (faceCanvas.height - 2) + 1) * 4 + j];\n                        data[(faceCanvas.width * faceCanvas.height - 1) * 4 + j] = data[(faceCanvas.width * (faceCanvas.height - 1) - 2) * 4 + j];\n                    }\n                    // Draw image width duplicated edge pixels on canvas\n                    faceContext.putImageData(imgData, 0, 0);\n                    incLoaded.call(this);\n                };\n                var incLoaded = function incLoaded() {\n                    if (this.width > 0) {\n                        if (fallbackImgSize === undefined) {\n                            fallbackImgSize = this.width;\n                        }\n                        if (fallbackImgSize != this.width) {\n                            console.log(\"Fallback faces have inconsistent widths: \" + fallbackImgSize + \" vs. \" + this.width);\n                        }\n                    } else {\n                        faceMissing = true;\n                    }\n                    loaded++;\n                    if (loaded == 6) {\n                        fallbackImgSize = this.width;\n                        container.appendChild(world);\n                        callback();\n                    }\n                };\n                faceMissing = false;\n                for(s = 0; s < 6; s++){\n                    var faceImg = new Image();\n                    faceImg.crossOrigin = globalParams.crossOrigin ? globalParams.crossOrigin : \"anonymous\";\n                    faceImg.side = s;\n                    faceImg.onload = onLoad;\n                    faceImg.onerror = incLoaded; // ignore missing face to support partial fallback image\n                    if (imageType == \"multires\") {\n                        faceImg.src = encodeURI(path.replace(\"%s\", sides[s]) + \".\" + image.extension);\n                    } else {\n                        faceImg.src = encodeURI(image[s].src);\n                    }\n                }\n                fillMissingFaces(fallbackImgSize);\n                return;\n            } else if (!gl) {\n                console.log(\"Error: no WebGL support detected!\");\n                throw {\n                    type: \"no webgl\"\n                };\n            }\n            if (imageType == \"cubemap\") {\n                fillMissingFaces(cubeImgWidth);\n            }\n            if (image.basePath) {\n                image.fullpath = image.basePath + image.path;\n            } else {\n                image.fullpath = image.path;\n            }\n            image.invTileResolution = 1 / image.tileResolution;\n            var vertices = createCube();\n            vtmps = [];\n            for(s = 0; s < 6; s++){\n                vtmps[s] = vertices.slice(s * 12, s * 12 + 12);\n                vertices = createCube();\n            }\n            // Make sure image isn't too big\n            var width = 0, maxWidth = 0;\n            if (imageType == \"equirectangular\") {\n                width = Math.max(image.width, image.height);\n                maxWidth = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n            } else if (imageType == \"cubemap\") {\n                width = cubeImgWidth;\n                maxWidth = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n            }\n            if (width > maxWidth) {\n                console.log(\"Error: The image is too big; it's \" + width + \"px wide, \" + \"but this device's maximum supported size is \" + maxWidth + \"px.\");\n                throw {\n                    type: \"webgl size error\",\n                    width: width,\n                    maxWidth: maxWidth\n                };\n            }\n            // Store horizon pitch and roll if applicable\n            if (params !== undefined && (params.horizonPitch !== undefined || params.horizonRoll !== undefined)) {\n                pose = [\n                    params.horizonPitch == undefined ? 0 : params.horizonPitch,\n                    params.horizonRoll == undefined ? 0 : params.horizonRoll\n                ];\n            }\n            // Set 2d texture binding\n            var glBindType = gl.TEXTURE_2D;\n            // Create viewport for entire canvas\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            // Create vertex shader\n            vs = gl.createShader(gl.VERTEX_SHADER);\n            var vertexSrc = v;\n            if (imageType == \"multires\") {\n                vertexSrc = vMulti;\n            }\n            gl.shaderSource(vs, vertexSrc);\n            gl.compileShader(vs);\n            // Create fragment shader\n            fs = gl.createShader(gl.FRAGMENT_SHADER);\n            var fragmentSrc = fragEquirectangular;\n            if (imageType == \"cubemap\") {\n                glBindType = gl.TEXTURE_CUBE_MAP;\n                fragmentSrc = fragCube;\n            } else if (imageType == \"multires\") {\n                fragmentSrc = fragMulti;\n            }\n            gl.shaderSource(fs, fragmentSrc);\n            gl.compileShader(fs);\n            // Link WebGL program\n            program = gl.createProgram();\n            gl.attachShader(program, vs);\n            gl.attachShader(program, fs);\n            gl.linkProgram(program);\n            // Log errors\n            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n                console.log(gl.getShaderInfoLog(vs));\n            }\n            if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n                console.log(gl.getShaderInfoLog(fs));\n            }\n            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n                console.log(gl.getProgramInfoLog(program));\n            }\n            // Use WebGL program\n            gl.useProgram(program);\n            program.drawInProgress = false;\n            // Set background clear color (does not apply to cubemap/fallback image)\n            var color = params.backgroundColor ? params.backgroundColor : [\n                0,\n                0,\n                0\n            ];\n            gl.clearColor(color[0], color[1], color[2], 1.0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            // Look up texture coordinates location\n            program.texCoordLocation = gl.getAttribLocation(program, \"a_texCoord\");\n            gl.enableVertexAttribArray(program.texCoordLocation);\n            if (imageType != \"multires\") {\n                // Provide texture coordinates for rectangle\n                if (!texCoordBuffer) {\n                    texCoordBuffer = gl.createBuffer();\n                }\n                gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n                    -1,\n                    1,\n                    1,\n                    1,\n                    1,\n                    -1,\n                    -1,\n                    1,\n                    1,\n                    -1,\n                    -1,\n                    -1\n                ]), gl.STATIC_DRAW);\n                gl.vertexAttribPointer(program.texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n                // Pass aspect ratio\n                program.aspectRatio = gl.getUniformLocation(program, \"u_aspectRatio\");\n                gl.uniform1f(program.aspectRatio, gl.drawingBufferWidth / gl.drawingBufferHeight);\n                // Locate psi, theta, focal length, horizontal extent, vertical extent, and vertical offset\n                program.psi = gl.getUniformLocation(program, \"u_psi\");\n                program.theta = gl.getUniformLocation(program, \"u_theta\");\n                program.f = gl.getUniformLocation(program, \"u_f\");\n                program.h = gl.getUniformLocation(program, \"u_h\");\n                program.v = gl.getUniformLocation(program, \"u_v\");\n                program.vo = gl.getUniformLocation(program, \"u_vo\");\n                program.rot = gl.getUniformLocation(program, \"u_rot\");\n                // Pass horizontal extent, vertical extent, and vertical offset\n                gl.uniform1f(program.h, haov / (Math.PI * 2.0));\n                gl.uniform1f(program.v, vaov / Math.PI);\n                gl.uniform1f(program.vo, voffset / Math.PI * 2);\n                // Set background color\n                if (imageType == \"equirectangular\") {\n                    program.backgroundColor = gl.getUniformLocation(program, \"u_backgroundColor\");\n                    gl.uniform4fv(program.backgroundColor, color.concat([\n                        1\n                    ]));\n                }\n                // Create texture\n                program.texture = gl.createTexture();\n                gl.bindTexture(glBindType, program.texture);\n                // Upload images to texture depending on type\n                if (imageType == \"cubemap\") {\n                    // Load all six sides of the cube map\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[1]);\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[3]);\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[4]);\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[5]);\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[0]);\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image[2]);\n                } else {\n                    // Upload image to the texture\n                    gl.texImage2D(glBindType, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n                }\n                // Set parameters for rendering any size\n                gl.texParameteri(glBindType, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(glBindType, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(glBindType, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(glBindType, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            } else {\n                // Look up vertex coordinates location\n                program.vertPosLocation = gl.getAttribLocation(program, \"a_vertCoord\");\n                gl.enableVertexAttribArray(program.vertPosLocation);\n                // Create buffers\n                if (!cubeVertBuf) {\n                    cubeVertBuf = gl.createBuffer();\n                }\n                if (!cubeVertTexCoordBuf) {\n                    cubeVertTexCoordBuf = gl.createBuffer();\n                }\n                if (!cubeVertIndBuf) {\n                    cubeVertIndBuf = gl.createBuffer();\n                }\n                // Bind texture coordinate buffer and pass coordinates to WebGL\n                gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertTexCoordBuf);\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n                    0,\n                    0,\n                    1,\n                    0,\n                    1,\n                    1,\n                    0,\n                    1\n                ]), gl.STATIC_DRAW);\n                // Bind square index buffer and pass indicies to WebGL\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertIndBuf);\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([\n                    0,\n                    1,\n                    2,\n                    0,\n                    2,\n                    3\n                ]), gl.STATIC_DRAW);\n                // Find uniforms\n                program.perspUniform = gl.getUniformLocation(program, \"u_perspMatrix\");\n                program.cubeUniform = gl.getUniformLocation(program, \"u_cubeMatrix\");\n                //program.colorUniform = gl.getUniformLocation(program, 'u_color');\n                program.level = -1;\n                program.currentNodes = [];\n                program.nodeCache = [];\n                program.nodeCacheTimestamp = 0;\n            }\n            // Check if there was an error\n            var err = gl.getError();\n            if (err !== 0) {\n                console.log(\"Error: Something went wrong with WebGL!\", err);\n                throw {\n                    type: \"webgl error\"\n                };\n            }\n            callback();\n        };\n        /**\n     * Destroy renderer.\n     * @memberof Renderer\n     * @instance\n     */ this.destroy = function() {\n            if (container !== undefined) {\n                if (canvas !== undefined && container.contains(canvas)) {\n                    container.removeChild(canvas);\n                }\n                if (world !== undefined && container.contains(world)) {\n                    container.removeChild(world);\n                }\n            }\n            if (gl) {\n                // The spec says this is only supposed to simulate losing the WebGL\n                // context, but in practice it tends to actually free the memory.\n                var extension = gl.getExtension(\"WEBGL_lose_context\");\n                if (extension) {\n                    extension.loseContext();\n                }\n            }\n        };\n        /**\n     * Resize renderer (call after resizing container).\n     * @memberof Renderer\n     * @instance\n     */ this.resize = function() {\n            var pixelRatio = window1.devicePixelRatio || 1;\n            canvas.width = canvas.clientWidth * pixelRatio;\n            canvas.height = canvas.clientHeight * pixelRatio;\n            if (gl) {\n                if (gl.getError() == 1286) {\n                    handleWebGLError1286();\n                }\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n                if (imageType != \"multires\") {\n                    gl.uniform1f(program.aspectRatio, canvas.clientWidth / canvas.clientHeight);\n                }\n            }\n        };\n        // Initialize canvas size\n        this.resize();\n        /**\n     * Set renderer horizon pitch and roll.\n     * @memberof Renderer\n     * @instance\n     */ this.setPose = function(horizonPitch, horizonRoll) {\n            pose = [\n                horizonPitch,\n                horizonRoll\n            ];\n        };\n        /**\n     * Render new view of panorama.\n     * @memberof Renderer\n     * @instance\n     * @param {number} pitch - Pitch to render at (in radians).\n     * @param {number} yaw - Yaw to render at (in radians).\n     * @param {number} hfov - Horizontal field of view to render with (in radians).\n     * @param {Object} [params] - Extra configuration parameters. \n     * @param {number} [params.roll] - Camera roll (in radians).\n     * @param {boolean} [params.returnImage] - Return rendered image?\n     */ this.render = function(pitch, yaw, hfov, params) {\n            var focal, i, s, roll = 0;\n            if (params === undefined) {\n                params = {};\n            }\n            if (params.roll) {\n                roll = params.roll;\n            }\n            // Apply pitch and roll transformation if applicable\n            if (pose !== undefined) {\n                var horizonPitch = pose[0], horizonRoll = pose[1];\n                // Calculate new pitch and yaw\n                var orig_pitch = pitch, orig_yaw = yaw, x = Math.cos(horizonRoll) * Math.sin(pitch) * Math.sin(horizonPitch) + Math.cos(pitch) * (Math.cos(horizonPitch) * Math.cos(yaw) + Math.sin(horizonRoll) * Math.sin(horizonPitch) * Math.sin(yaw)), y = -Math.sin(pitch) * Math.sin(horizonRoll) + Math.cos(pitch) * Math.cos(horizonRoll) * Math.sin(yaw), z = Math.cos(horizonRoll) * Math.cos(horizonPitch) * Math.sin(pitch) + Math.cos(pitch) * (-Math.cos(yaw) * Math.sin(horizonPitch) + Math.cos(horizonPitch) * Math.sin(horizonRoll) * Math.sin(yaw));\n                pitch = Math.asin(Math.max(Math.min(z, 1), -1));\n                yaw = Math.atan2(y, x);\n                // Calculate roll\n                var v = [\n                    Math.cos(orig_pitch) * (Math.sin(horizonRoll) * Math.sin(horizonPitch) * Math.cos(orig_yaw) - Math.cos(horizonPitch) * Math.sin(orig_yaw)),\n                    Math.cos(orig_pitch) * Math.cos(horizonRoll) * Math.cos(orig_yaw),\n                    Math.cos(orig_pitch) * (Math.cos(horizonPitch) * Math.sin(horizonRoll) * Math.cos(orig_yaw) + Math.sin(orig_yaw) * Math.sin(horizonPitch))\n                ], w = [\n                    -Math.cos(pitch) * Math.sin(yaw),\n                    Math.cos(pitch) * Math.cos(yaw)\n                ];\n                var roll_adj = Math.acos(Math.max(Math.min((v[0] * w[0] + v[1] * w[1]) / (Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]) * Math.sqrt(w[0] * w[0] + w[1] * w[1])), 1), -1));\n                if (v[2] < 0) {\n                    roll_adj = 2 * Math.PI - roll_adj;\n                }\n                roll += roll_adj;\n            }\n            // If no WebGL\n            if (!gl && (imageType == \"multires\" || imageType == \"cubemap\")) {\n                // Determine face transforms\n                s = fallbackImgSize / 2;\n                var transforms = {\n                    f: \"translate3d(-\" + (s + 2) + \"px, -\" + (s + 2) + \"px, -\" + s + \"px)\",\n                    b: \"translate3d(\" + (s + 2) + \"px, -\" + (s + 2) + \"px, \" + s + \"px) rotateX(180deg) rotateZ(180deg)\",\n                    u: \"translate3d(-\" + (s + 2) + \"px, -\" + s + \"px, \" + (s + 2) + \"px) rotateX(270deg)\",\n                    d: \"translate3d(-\" + (s + 2) + \"px, \" + s + \"px, -\" + (s + 2) + \"px) rotateX(90deg)\",\n                    l: \"translate3d(-\" + s + \"px, -\" + (s + 2) + \"px, \" + (s + 2) + \"px) rotateX(180deg) rotateY(90deg) rotateZ(180deg)\",\n                    r: \"translate3d(\" + s + \"px, -\" + (s + 2) + \"px, -\" + (s + 2) + \"px) rotateY(270deg)\"\n                };\n                focal = 1 / Math.tan(hfov / 2);\n                var zoom = focal * canvas.clientWidth / 2 + \"px\";\n                var transform = \"perspective(\" + zoom + \") translateZ(\" + zoom + \") rotateX(\" + pitch + \"rad) rotateY(\" + yaw + \"rad) \";\n                // Apply face transforms\n                var faces = Object.keys(transforms);\n                for(i = 0; i < 6; i++){\n                    var face = world.querySelector(\".pnlm-\" + faces[i] + \"face\");\n                    if (!face) {\n                        continue;\n                    } // ignore missing face to support partial cubemap/fallback image\n                    face.style.webkitTransform = transform + transforms[faces[i]];\n                    face.style.transform = transform + transforms[faces[i]];\n                }\n                return;\n            }\n            if (imageType != \"multires\") {\n                // Calculate focal length from vertical field of view\n                var vfov = 2 * Math.atan(Math.tan(hfov * 0.5) / (gl.drawingBufferWidth / gl.drawingBufferHeight));\n                focal = 1 / Math.tan(vfov * 0.5);\n                // Pass psi, theta, roll, and focal length\n                gl.uniform1f(program.psi, yaw);\n                gl.uniform1f(program.theta, pitch);\n                gl.uniform1f(program.rot, roll);\n                gl.uniform1f(program.f, focal);\n                if (dynamic === true) {\n                    // Update texture if dynamic\n                    if (imageType == \"equirectangular\") {\n                        gl.bindTexture(gl.TEXTURE_2D, program.texture);\n                        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n                    }\n                }\n                // Draw using current buffer\n                gl.drawArrays(gl.TRIANGLES, 0, 6);\n            } else {\n                // Create perspective matrix\n                var perspMatrix = makePersp(hfov, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 100.0);\n                // Find correct zoom level\n                checkZoom(hfov);\n                // Create rotation matrix\n                var matrix = identityMatrix3();\n                matrix = rotateMatrix(matrix, -roll, \"z\");\n                matrix = rotateMatrix(matrix, -pitch, \"x\");\n                matrix = rotateMatrix(matrix, yaw, \"y\");\n                matrix = makeMatrix4(matrix);\n                // Set matrix uniforms\n                gl.uniformMatrix4fv(program.perspUniform, false, new Float32Array(transposeMatrix4(perspMatrix)));\n                gl.uniformMatrix4fv(program.cubeUniform, false, new Float32Array(transposeMatrix4(matrix)));\n                // Find current nodes\n                var rotPersp = rotatePersp(perspMatrix, matrix);\n                program.nodeCache.sort(multiresNodeSort);\n                if (program.nodeCache.length > 200 && program.nodeCache.length > program.currentNodes.length + 50) {\n                    // Remove older nodes from cache\n                    var removed = program.nodeCache.splice(200, program.nodeCache.length - 200);\n                    for(var i = 0; i < removed.length; i++){\n                        // Explicitly delete textures\n                        gl.deleteTexture(removed[i].texture);\n                    }\n                }\n                program.currentNodes = [];\n                var sides = [\n                    \"f\",\n                    \"b\",\n                    \"u\",\n                    \"d\",\n                    \"l\",\n                    \"r\"\n                ];\n                for(s = 0; s < 6; s++){\n                    var ntmp = new MultiresNode(vtmps[s], sides[s], 1, 0, 0, image.fullpath);\n                    testMultiresNode(rotPersp, ntmp, pitch, yaw, hfov);\n                }\n                program.currentNodes.sort(multiresNodeRenderSort);\n                // Unqueue any pending requests for nodes that are no longer visible\n                for(i = pendingTextureRequests.length - 1; i >= 0; i--){\n                    if (program.currentNodes.indexOf(pendingTextureRequests[i].node) === -1) {\n                        pendingTextureRequests[i].node.textureLoad = false;\n                        pendingTextureRequests.splice(i, 1);\n                    }\n                }\n                // Allow one request to be pending, so that we can create a texture buffer for that in advance of loading actually beginning\n                if (pendingTextureRequests.length === 0) {\n                    for(i = 0; i < program.currentNodes.length; i++){\n                        var node = program.currentNodes[i];\n                        if (!node.texture && !node.textureLoad) {\n                            node.textureLoad = true;\n                            setTimeout(processNextTile, 0, node);\n                            break;\n                        }\n                    }\n                }\n                // Draw tiles\n                multiresDraw();\n            }\n            if (params.returnImage !== undefined) {\n                return canvas.toDataURL(\"image/png\");\n            }\n        };\n        /**\n     * Check if images are loading.\n     * @memberof Renderer\n     * @instance\n     * @returns {boolean} Whether or not images are loading.\n     */ this.isLoading = function() {\n            if (gl && imageType == \"multires\") {\n                for(var i = 0; i < program.currentNodes.length; i++){\n                    if (!program.currentNodes[i].textureLoaded) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        /**\n     * Retrieve renderer's canvas.\n     * @memberof Renderer\n     * @instance\n     * @returns {HTMLElement} Renderer's canvas.\n     */ this.getCanvas = function() {\n            return canvas;\n        };\n        /**\n     * Sorting method for multires nodes.\n     * @private\n     * @param {MultiresNode} a - First node.\n     * @param {MultiresNode} b - Second node.\n     * @returns {number} Base tiles first, then higher timestamp first.\n     */ function multiresNodeSort(a, b) {\n            // Base tiles are always first\n            if (a.level == 1 && b.level != 1) {\n                return -1;\n            }\n            if (b.level == 1 && a.level != 1) {\n                return 1;\n            }\n            // Higher timestamp first\n            return b.timestamp - a.timestamp;\n        }\n        /**\n     * Sorting method for multires node rendering.\n     * @private\n     * @param {MultiresNode} a - First node.\n     * @param {MultiresNode} b - Second node.\n     * @returns {number} Lower zoom levels first, then closest to center first.\n     */ function multiresNodeRenderSort(a, b) {\n            // Lower zoom levels first\n            if (a.level != b.level) {\n                return a.level - b.level;\n            }\n            // Lower distance from center first\n            return a.diff - b.diff;\n        }\n        /**\n     * Draws multires nodes.\n     * @private\n     */ function multiresDraw() {\n            if (!program.drawInProgress) {\n                program.drawInProgress = true;\n                gl.clear(gl.COLOR_BUFFER_BIT);\n                for(var i = 0; i < program.currentNodes.length; i++){\n                    if (program.currentNodes[i].textureLoaded > 1) {\n                        //var color = program.currentNodes[i].color;\n                        //gl.uniform4f(program.colorUniform, color[0], color[1], color[2], 1.0);\n                        // Bind vertex buffer and pass vertices to WebGL\n                        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertBuf);\n                        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(program.currentNodes[i].vertices), gl.STATIC_DRAW);\n                        gl.vertexAttribPointer(program.vertPosLocation, 3, gl.FLOAT, false, 0, 0);\n                        // Prep for texture\n                        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertTexCoordBuf);\n                        gl.vertexAttribPointer(program.texCoordLocation, 2, gl.FLOAT, false, 0, 0);\n                        // Bind texture and draw tile\n                        gl.bindTexture(gl.TEXTURE_2D, program.currentNodes[i].texture); // Bind program.currentNodes[i].texture to TEXTURE0\n                        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n                    }\n                }\n                program.drawInProgress = false;\n            }\n        }\n        /**\n     * Creates new multires node.\n     * @constructor\n     * @private\n     * @param {number[]} vertices - Node's verticies.\n     * @param {string} side - Node's cube face.\n     * @param {number} level - Node's zoom level.\n     * @param {number} x - Node's x position.\n     * @param {number} y - Node's y position.\n     * @param {string} path - Node's path.\n     */ function MultiresNode(vertices, side, level, x, y, path) {\n            this.vertices = vertices;\n            this.side = side;\n            this.level = level;\n            this.x = x;\n            this.y = y;\n            this.path = path.replace(\"%s\", side).replace(\"%l\", level).replace(\"%x\", x).replace(\"%y\", y);\n        }\n        /**\n     * Test if multires node is visible. If it is, add it to current nodes,\n     * load its texture, and load appropriate child nodes.\n     * @private\n     * @param {number[]} rotPersp - Rotated perspective matrix.\n     * @param {MultiresNode} node - Multires node to check.\n     * @param {number} pitch - Pitch to check at.\n     * @param {number} yaw - Yaw to check at.\n     * @param {number} hfov - Horizontal field of view to check at.\n     */ function testMultiresNode(rotPersp, node, pitch, yaw, hfov) {\n            if (checkSquareInView(rotPersp, node.vertices)) {\n                // Calculate central angle between center of view and center of tile\n                var v = node.vertices;\n                var x = v[0] + v[3] + v[6] + v[9];\n                var y = v[1] + v[4] + v[7] + v[10];\n                var z = v[2] + v[5] + v[8] + v[11];\n                var r = Math.sqrt(x * x + y * y + z * z);\n                var theta = Math.asin(z / r);\n                var phi = Math.atan2(y, x);\n                var ydiff = phi - yaw;\n                ydiff += ydiff > Math.PI ? -2 * Math.PI : ydiff < -Math.PI ? 2 * Math.PI : 0;\n                ydiff = Math.abs(ydiff);\n                node.diff = Math.acos(Math.sin(pitch) * Math.sin(theta) + Math.cos(pitch) * Math.cos(theta) * Math.cos(ydiff));\n                // Add node to current nodes and load texture if needed\n                var inCurrent = false;\n                for(var k = 0; k < program.nodeCache.length; k++){\n                    if (program.nodeCache[k].path == node.path) {\n                        inCurrent = true;\n                        program.nodeCache[k].timestamp = program.nodeCacheTimestamp++;\n                        program.nodeCache[k].diff = node.diff;\n                        program.currentNodes.push(program.nodeCache[k]);\n                        break;\n                    }\n                }\n                if (!inCurrent) {\n                    //node.color = [Math.random(), Math.random(), Math.random()];\n                    node.timestamp = program.nodeCacheTimestamp++;\n                    program.currentNodes.push(node);\n                    program.nodeCache.push(node);\n                }\n                // TODO: Test error\n                // Create child nodes\n                if (node.level < program.level) {\n                    var cubeSize = image.cubeResolution * Math.pow(2, node.level - image.maxLevel);\n                    var numTiles = Math.ceil(cubeSize * image.invTileResolution) - 1;\n                    var doubleTileSize = cubeSize % image.tileResolution * 2;\n                    var lastTileSize = cubeSize * 2 % image.tileResolution;\n                    if (lastTileSize === 0) {\n                        lastTileSize = image.tileResolution;\n                    }\n                    if (doubleTileSize === 0) {\n                        doubleTileSize = image.tileResolution * 2;\n                    }\n                    var f = 0.5;\n                    if (node.x == numTiles || node.y == numTiles) {\n                        f = 1.0 - image.tileResolution / (image.tileResolution + lastTileSize);\n                    }\n                    var i = 1.0 - f;\n                    var children = [];\n                    var vtmp, ntmp;\n                    var f1 = f, f2 = f, f3 = f, i1 = i, i2 = i, i3 = i;\n                    // Handle non-symmetric tiles\n                    if (lastTileSize < image.tileResolution) {\n                        if (node.x == numTiles && node.y != numTiles) {\n                            f2 = 0.5;\n                            i2 = 0.5;\n                            if (node.side == \"d\" || node.side == \"u\") {\n                                f3 = 0.5;\n                                i3 = 0.5;\n                            }\n                        } else if (node.x != numTiles && node.y == numTiles) {\n                            f1 = 0.5;\n                            i1 = 0.5;\n                            if (node.side == \"l\" || node.side == \"r\") {\n                                f3 = 0.5;\n                                i3 = 0.5;\n                            }\n                        }\n                    }\n                    // Handle small tiles that have fewer than four children\n                    if (doubleTileSize <= image.tileResolution) {\n                        if (node.x == numTiles) {\n                            f1 = 0;\n                            i1 = 1;\n                            if (node.side == \"l\" || node.side == \"r\") {\n                                f3 = 0;\n                                i3 = 1;\n                            }\n                        }\n                        if (node.y == numTiles) {\n                            f2 = 0;\n                            i2 = 1;\n                            if (node.side == \"d\" || node.side == \"u\") {\n                                f3 = 0;\n                                i3 = 1;\n                            }\n                        }\n                    }\n                    vtmp = [\n                        v[0],\n                        v[1],\n                        v[2],\n                        v[0] * f1 + v[3] * i1,\n                        v[1] * f + v[4] * i,\n                        v[2] * f3 + v[5] * i3,\n                        v[0] * f1 + v[6] * i1,\n                        v[1] * f2 + v[7] * i2,\n                        v[2] * f3 + v[8] * i3,\n                        v[0] * f + v[9] * i,\n                        v[1] * f2 + v[10] * i2,\n                        v[2] * f3 + v[11] * i3\n                    ];\n                    ntmp = new MultiresNode(vtmp, node.side, node.level + 1, node.x * 2, node.y * 2, image.fullpath);\n                    children.push(ntmp);\n                    if (!(node.x == numTiles && doubleTileSize <= image.tileResolution)) {\n                        vtmp = [\n                            v[0] * f1 + v[3] * i1,\n                            v[1] * f + v[4] * i,\n                            v[2] * f3 + v[5] * i3,\n                            v[3],\n                            v[4],\n                            v[5],\n                            v[3] * f + v[6] * i,\n                            v[4] * f2 + v[7] * i2,\n                            v[5] * f3 + v[8] * i3,\n                            v[0] * f1 + v[6] * i1,\n                            v[1] * f2 + v[7] * i2,\n                            v[2] * f3 + v[8] * i3\n                        ];\n                        ntmp = new MultiresNode(vtmp, node.side, node.level + 1, node.x * 2 + 1, node.y * 2, image.fullpath);\n                        children.push(ntmp);\n                    }\n                    if (!(node.x == numTiles && doubleTileSize <= image.tileResolution) && !(node.y == numTiles && doubleTileSize <= image.tileResolution)) {\n                        vtmp = [\n                            v[0] * f1 + v[6] * i1,\n                            v[1] * f2 + v[7] * i2,\n                            v[2] * f3 + v[8] * i3,\n                            v[3] * f + v[6] * i,\n                            v[4] * f2 + v[7] * i2,\n                            v[5] * f3 + v[8] * i3,\n                            v[6],\n                            v[7],\n                            v[8],\n                            v[9] * f1 + v[6] * i1,\n                            v[10] * f + v[7] * i,\n                            v[11] * f3 + v[8] * i3\n                        ];\n                        ntmp = new MultiresNode(vtmp, node.side, node.level + 1, node.x * 2 + 1, node.y * 2 + 1, image.fullpath);\n                        children.push(ntmp);\n                    }\n                    if (!(node.y == numTiles && doubleTileSize <= image.tileResolution)) {\n                        vtmp = [\n                            v[0] * f + v[9] * i,\n                            v[1] * f2 + v[10] * i2,\n                            v[2] * f3 + v[11] * i3,\n                            v[0] * f1 + v[6] * i1,\n                            v[1] * f2 + v[7] * i2,\n                            v[2] * f3 + v[8] * i3,\n                            v[9] * f1 + v[6] * i1,\n                            v[10] * f + v[7] * i,\n                            v[11] * f3 + v[8] * i3,\n                            v[9],\n                            v[10],\n                            v[11]\n                        ];\n                        ntmp = new MultiresNode(vtmp, node.side, node.level + 1, node.x * 2, node.y * 2 + 1, image.fullpath);\n                        children.push(ntmp);\n                    }\n                    for(var j = 0; j < children.length; j++){\n                        testMultiresNode(rotPersp, children[j], pitch, yaw, hfov);\n                    }\n                }\n            }\n        }\n        /**\n     * Creates cube vertex array.\n     * @private\n     * @returns {number[]} Cube vertex array.\n     */ function createCube() {\n            return [\n                -1,\n                1,\n                -1,\n                1,\n                1,\n                -1,\n                1,\n                -1,\n                -1,\n                -1,\n                -1,\n                -1,\n                1,\n                1,\n                1,\n                -1,\n                1,\n                1,\n                -1,\n                -1,\n                1,\n                1,\n                -1,\n                1,\n                -1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                -1,\n                -1,\n                1,\n                -1,\n                -1,\n                -1,\n                -1,\n                1,\n                -1,\n                -1,\n                1,\n                -1,\n                1,\n                -1,\n                -1,\n                1,\n                -1,\n                1,\n                1,\n                -1,\n                1,\n                -1,\n                -1,\n                -1,\n                -1,\n                -1,\n                -1,\n                1,\n                1,\n                1,\n                -1,\n                1,\n                1,\n                1,\n                1,\n                -1,\n                1,\n                1,\n                -1,\n                -1 // Right face\n            ];\n        }\n        /**\n     * Creates 3x3 identity matrix.\n     * @private\n     * @returns {number[]} Identity matrix.\n     */ function identityMatrix3() {\n            return [\n                1,\n                0,\n                0,\n                0,\n                1,\n                0,\n                0,\n                0,\n                1\n            ];\n        }\n        /**\n     * Rotates a 3x3 matrix.\n     * @private\n     * @param {number[]} m - Matrix to rotate.\n     * @param {number[]} angle - Angle to rotate by in radians.\n     * @param {string} axis - Axis to rotate about (`x`, `y`, or `z`).\n     * @returns {number[]} Rotated matrix.\n     */ function rotateMatrix(m, angle, axis) {\n            var s = Math.sin(angle);\n            var c = Math.cos(angle);\n            if (axis == \"x\") {\n                return [\n                    m[0],\n                    c * m[1] + s * m[2],\n                    c * m[2] - s * m[1],\n                    m[3],\n                    c * m[4] + s * m[5],\n                    c * m[5] - s * m[4],\n                    m[6],\n                    c * m[7] + s * m[8],\n                    c * m[8] - s * m[7]\n                ];\n            }\n            if (axis == \"y\") {\n                return [\n                    c * m[0] - s * m[2],\n                    m[1],\n                    c * m[2] + s * m[0],\n                    c * m[3] - s * m[5],\n                    m[4],\n                    c * m[5] + s * m[3],\n                    c * m[6] - s * m[8],\n                    m[7],\n                    c * m[8] + s * m[6]\n                ];\n            }\n            if (axis == \"z\") {\n                return [\n                    c * m[0] + s * m[1],\n                    c * m[1] - s * m[0],\n                    m[2],\n                    c * m[3] + s * m[4],\n                    c * m[4] - s * m[3],\n                    m[5],\n                    c * m[6] + s * m[7],\n                    c * m[7] - s * m[6],\n                    m[8]\n                ];\n            }\n        }\n        /**\n     * Turns a 3x3 matrix into a 4x4 matrix.\n     * @private\n     * @param {number[]} m - Input matrix.\n     * @returns {number[]} Expanded matrix.\n     */ function makeMatrix4(m) {\n            return [\n                m[0],\n                m[1],\n                m[2],\n                0,\n                m[3],\n                m[4],\n                m[5],\n                0,\n                m[6],\n                m[7],\n                m[8],\n                0,\n                0,\n                0,\n                0,\n                1\n            ];\n        }\n        /**\n     * Transposes a 4x4 matrix.\n     * @private\n     * @param {number[]} m - Input matrix.\n     * @returns {number[]} Transposed matrix.\n     */ function transposeMatrix4(m) {\n            return [\n                m[0],\n                m[4],\n                m[8],\n                m[12],\n                m[1],\n                m[5],\n                m[9],\n                m[13],\n                m[2],\n                m[6],\n                m[10],\n                m[14],\n                m[3],\n                m[7],\n                m[11],\n                m[15]\n            ];\n        }\n        /**\n     * Creates a perspective matrix.\n     * @private\n     * @param {number} hfov - Desired horizontal field of view.\n     * @param {number} aspect - Desired aspect ratio.\n     * @param {number} znear - Near distance.\n     * @param {number} zfar - Far distance.\n     * @returns {number[]} Generated perspective matrix.\n     */ function makePersp(hfov, aspect, znear, zfar) {\n            var fovy = 2 * Math.atan(Math.tan(hfov / 2) * gl.drawingBufferHeight / gl.drawingBufferWidth);\n            var f = 1 / Math.tan(fovy / 2);\n            return [\n                f / aspect,\n                0,\n                0,\n                0,\n                0,\n                f,\n                0,\n                0,\n                0,\n                0,\n                (zfar + znear) / (znear - zfar),\n                2 * zfar * znear / (znear - zfar),\n                0,\n                0,\n                -1,\n                0\n            ];\n        }\n        /**\n     * Processes a loaded texture image into a WebGL texture.\n     * @private\n     * @param {Image} img - Input image.\n     * @param {WebGLTexture} tex - Texture to bind image to.\n     */ function processLoadedTexture(img, tex) {\n            gl.bindTexture(gl.TEXTURE_2D, tex);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, img);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n        }\n        var pendingTextureRequests = [];\n        // Based on http://blog.tojicode.com/2012/03/javascript-memory-optimization-and.html\n        var loadTexture = function() {\n            var cacheTop = 4; // Maximum number of concurrents loads\n            var textureImageCache = {};\n            var crossOrigin;\n            function TextureImageLoader() {\n                var self = this;\n                this.texture = this.callback = null;\n                this.image = new Image();\n                this.image.crossOrigin = crossOrigin ? crossOrigin : \"anonymous\";\n                var loadFn = function loadFn() {\n                    if (self.image.width > 0 && self.image.height > 0) {\n                        // ignore missing tile to supporting partial image\n                        processLoadedTexture(self.image, self.texture);\n                        self.callback(self.texture, true);\n                    } else {\n                        self.callback(self.texture, false);\n                    }\n                    releaseTextureImageLoader(self);\n                };\n                this.image.addEventListener(\"load\", loadFn);\n                this.image.addEventListener(\"error\", loadFn); // ignore missing tile file to support partial image, otherwise retry loop causes high CPU load\n            }\n            ;\n            TextureImageLoader.prototype.loadTexture = function(src, texture, callback) {\n                this.texture = texture;\n                this.callback = callback;\n                this.image.src = src;\n            };\n            function PendingTextureRequest(node, src, texture, callback) {\n                this.node = node;\n                this.src = src;\n                this.texture = texture;\n                this.callback = callback;\n            }\n            ;\n            function releaseTextureImageLoader(til) {\n                if (pendingTextureRequests.length) {\n                    var req = pendingTextureRequests.shift();\n                    til.loadTexture(req.src, req.texture, req.callback);\n                } else {\n                    textureImageCache[cacheTop++] = til;\n                }\n            }\n            for(var i = 0; i < cacheTop; i++){\n                textureImageCache[i] = new TextureImageLoader();\n            }\n            return function(node, src, callback, _crossOrigin) {\n                crossOrigin = _crossOrigin;\n                var texture = gl.createTexture();\n                if (cacheTop) {\n                    textureImageCache[--cacheTop].loadTexture(src, texture, callback);\n                } else {\n                    pendingTextureRequests.push(new PendingTextureRequest(node, src, texture, callback));\n                }\n                return texture;\n            };\n        }();\n        /**\n     * Loads image and creates texture for a multires node / tile.\n     * @private\n     * @param {MultiresNode} node - Input node.\n     */ function processNextTile(node) {\n            loadTexture(node, encodeURI(node.path + \".\" + image.extension), function(texture, loaded) {\n                node.texture = texture;\n                node.textureLoaded = loaded ? 2 : 1;\n            }, globalParams.crossOrigin);\n        }\n        /**\n     * Finds and applies optimal multires zoom level.\n     * @private\n     * @param {number} hfov - Horizontal field of view to check at.\n     */ function checkZoom(hfov) {\n            // Find optimal level\n            var newLevel = 1;\n            while(newLevel < image.maxLevel && gl.drawingBufferWidth > image.tileResolution * Math.pow(2, newLevel - 1) * Math.tan(hfov / 2) * 0.707){\n                newLevel++;\n            }\n            // Apply change\n            program.level = newLevel;\n        }\n        /**\n     * Rotates perspective matrix.\n     * @private\n     * @param {number[]} p - Perspective matrix.\n     * @param {number[]} r - Rotation matrix.\n     * @returns {number[]} Rotated matrix.\n     */ function rotatePersp(p, r) {\n            return [\n                p[0] * r[0],\n                p[0] * r[1],\n                p[0] * r[2],\n                0,\n                p[5] * r[4],\n                p[5] * r[5],\n                p[5] * r[6],\n                0,\n                p[10] * r[8],\n                p[10] * r[9],\n                p[10] * r[10],\n                p[11],\n                -r[8],\n                -r[9],\n                -r[10],\n                0\n            ];\n        }\n        /**\n     * Applies rotated perspective matrix to a 3-vector\n     * (last element is inverted).\n     * @private\n     * @param {number[]} m - Rotated perspective matrix.\n     * @param {number[]} v - Input 3-vector.\n     * @returns {number[]} Resulting 4-vector.\n     */ function applyRotPerspToVec(m, v) {\n            return [\n                m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n                m[4] * v[0] + m[5] * v[1] + m[6] * v[2],\n                m[11] + m[8] * v[0] + m[9] * v[1] + m[10] * v[2],\n                1 / (m[12] * v[0] + m[13] * v[1] + m[14] * v[2])\n            ];\n        }\n        /**\n     * Checks if a vertex is visible.\n     * @private\n     * @param {number[]} m - Rotated perspective matrix.\n     * @param {number[]} v - Input vertex.\n     * @returns {number} 1 or -1 if the vertex is or is not visible,\n     *      respectively.\n     */ function checkInView(m, v) {\n            var vpp = applyRotPerspToVec(m, v);\n            var winX = vpp[0] * vpp[3];\n            var winY = vpp[1] * vpp[3];\n            var winZ = vpp[2] * vpp[3];\n            var ret = [\n                0,\n                0,\n                0\n            ];\n            if (winX < -1) {\n                ret[0] = -1;\n            }\n            if (winX > 1) {\n                ret[0] = 1;\n            }\n            if (winY < -1) {\n                ret[1] = -1;\n            }\n            if (winY > 1) {\n                ret[1] = 1;\n            }\n            if (winZ < -1 || winZ > 1) {\n                ret[2] = 1;\n            }\n            return ret;\n        }\n        /**\n     * Checks if a square (tile) is visible.\n     * @private\n     * @param {number[]} m - Rotated perspective matrix.\n     * @param {number[]} v - Square's vertex array.\n     * @returns {boolean} Whether or not the square is visible.\n     */ function checkSquareInView(m, v) {\n            var check1 = checkInView(m, v.slice(0, 3));\n            var check2 = checkInView(m, v.slice(3, 6));\n            var check3 = checkInView(m, v.slice(6, 9));\n            var check4 = checkInView(m, v.slice(9, 12));\n            var testX = check1[0] + check2[0] + check3[0] + check4[0];\n            if (testX == -4 || testX == 4) {\n                return false;\n            }\n            var testY = check1[1] + check2[1] + check3[1] + check4[1];\n            if (testY == -4 || testY == 4) {\n                return false;\n            }\n            var testZ = check1[2] + check2[2] + check3[2] + check4[2];\n            return testZ != 4;\n        }\n        /**\n     * On iOS (iPhone 5c, iOS 10.3), this WebGL error occurs when the canvas is\n     * too big. Unfortuately, there's no way to test for this beforehand, so we\n     * reduce the canvas size if this error is thrown.\n     * @private\n     */ function handleWebGLError1286() {\n            console.log(\"Reducing canvas size due to error 1286!\");\n            canvas.width = Math.round(canvas.width / 2);\n            canvas.height = Math.round(canvas.height / 2);\n        }\n    }\n    // Vertex shader for equirectangular and cube\n    var v = [\n        \"attribute vec2 a_texCoord;\",\n        \"varying vec2 v_texCoord;\",\n        \"void main() {\",\n        // Set position\n        \"gl_Position = vec4(a_texCoord, 0.0, 1.0);\",\n        // Pass the coordinates to the fragment shader\n        \"v_texCoord = a_texCoord;\",\n        \"}\"\n    ].join(\"\");\n    // Vertex shader for multires\n    var vMulti = [\n        \"attribute vec3 a_vertCoord;\",\n        \"attribute vec2 a_texCoord;\",\n        \"uniform mat4 u_cubeMatrix;\",\n        \"uniform mat4 u_perspMatrix;\",\n        \"varying mediump vec2 v_texCoord;\",\n        \"void main(void) {\",\n        // Set position\n        \"gl_Position = u_perspMatrix * u_cubeMatrix * vec4(a_vertCoord, 1.0);\",\n        // Pass the coordinates to the fragment shader\n        \"v_texCoord = a_texCoord;\",\n        \"}\"\n    ].join(\"\");\n    // Fragment shader\n    var fragEquiCubeBase = [\n        \"precision mediump float;\",\n        \"uniform float u_aspectRatio;\",\n        \"uniform float u_psi;\",\n        \"uniform float u_theta;\",\n        \"uniform float u_f;\",\n        \"uniform float u_h;\",\n        \"uniform float u_v;\",\n        \"uniform float u_vo;\",\n        \"uniform float u_rot;\",\n        \"const float PI = 3.14159265358979323846264;\",\n        // Texture\n        \"uniform sampler2D u_image;\",\n        \"uniform samplerCube u_imageCube;\",\n        // Coordinates passed in from vertex shader\n        \"varying vec2 v_texCoord;\",\n        // Background color (display for partial panoramas)\n        \"uniform vec4 u_backgroundColor;\",\n        \"void main() {\",\n        // Map canvas/camera to sphere\n        \"float x = v_texCoord.x * u_aspectRatio;\",\n        \"float y = v_texCoord.y;\",\n        \"float sinrot = sin(u_rot);\",\n        \"float cosrot = cos(u_rot);\",\n        \"float rot_x = x * cosrot - y * sinrot;\",\n        \"float rot_y = x * sinrot + y * cosrot;\",\n        \"float sintheta = sin(u_theta);\",\n        \"float costheta = cos(u_theta);\",\n        \"float a = u_f * costheta - rot_y * sintheta;\",\n        \"float root = sqrt(rot_x * rot_x + a * a);\",\n        \"float lambda = atan(rot_x / root, a / root) + u_psi;\",\n        \"float phi = atan((rot_y * costheta + u_f * sintheta) / root);\"\n    ].join(\"\\n\");\n    // Fragment shader\n    var fragCube = fragEquiCubeBase + [\n        // Look up color from texture\n        \"float cosphi = cos(phi);\",\n        \"gl_FragColor = textureCube(u_imageCube, vec3(cosphi*sin(lambda), sin(phi), cosphi*cos(lambda)));\",\n        \"}\"\n    ].join(\"\\n\");\n    // Fragment shader\n    var fragEquirectangular = fragEquiCubeBase + [\n        // Wrap image\n        \"lambda = mod(lambda + PI, PI * 2.0) - PI;\",\n        // Map texture to sphere\n        \"vec2 coord = vec2(lambda / PI, phi / (PI / 2.0));\",\n        // Look up color from texture\n        // Map from [-1,1] to [0,1] and flip y-axis\n        \"if(coord.x < -u_h || coord.x > u_h || coord.y < -u_v + u_vo || coord.y > u_v + u_vo)\",\n        \"gl_FragColor = u_backgroundColor;\",\n        \"else\",\n        \"gl_FragColor = texture2D(u_image, vec2((coord.x + u_h) / (u_h * 2.0), (-coord.y + u_v + u_vo) / (u_v * 2.0)));\",\n        \"}\"\n    ].join(\"\\n\");\n    // Fragment shader\n    var fragMulti = [\n        \"varying mediump vec2 v_texCoord;\",\n        \"uniform sampler2D u_sampler;\",\n        //'uniform mediump vec4 u_color;',\n        \"void main(void) {\",\n        // Look up color from texture\n        \"gl_FragColor = texture2D(u_sampler, v_texCoord);\",\n        //    'gl_FragColor = u_color;',\n        \"}\"\n    ].join(\"\");\n    return {\n        renderer: function renderer(container, image, imagetype, dynamic) {\n            return new Renderer(container, image, imagetype, dynamic);\n        }\n    };\n}(window, document);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/js/libpannellum.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/js/pannellum.js":
/*!********************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/js/pannellum.js ***!
  \********************************************************************/
/***/ (() => {

eval("/*\n * Pannellum - An HTML5 based Panorama Viewer\n * Copyright (c) 2011-2018 Matthew Petroff\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */ window.pannellum = function(window1, document1, undefined) {\n    /**\n  * Creates a new panorama viewer.\n  * @constructor\n  * @param {HTMLElement|string} container - The container (div) element for the\n  *      viewer, or its ID.\n  * @param {Object} initialConfig - Inital configuration for viewer.\n  */ function Viewer(container, initialConfig) {\n        var _this = this;\n        // Declare variables\n        var config, renderer, preview, isUserInteracting = false, latestInteraction = Date.now(), onPointerDownPointerX = 0, onPointerDownPointerY = 0, onPointerDownPointerDist = -1, onPointerDownYaw = 0, onPointerDownPitch = 0, keysDown = new Array(10), fullscreenActive = false, loaded, error = false, isTimedOut = false, listenersAdded = false, panoImage, prevTime, speed = {\n            \"yaw\": 0,\n            \"pitch\": 0,\n            \"hfov\": 0\n        }, animating = false, orientation = false, orientationYawOffset = 0, autoRotateStart, autoRotateSpeed = 0, origHfov, origPitch, animatedMove = {}, externalEventListeners = {}, specifiedPhotoSphereExcludes = [], update = false, // Should we update when still to render dynamic content\n        hotspotsCreated = false;\n        var defaultConfig = {\n            hfov: 100,\n            minHfov: 50,\n            maxHfov: 120,\n            pitch: 0,\n            minPitch: undefined,\n            maxPitch: undefined,\n            yaw: 0,\n            minYaw: -180,\n            maxYaw: 180,\n            roll: 0,\n            haov: 360,\n            vaov: 180,\n            vOffset: 0,\n            autoRotate: false,\n            autoRotateInactivityDelay: -1,\n            autoRotateStopDelay: undefined,\n            type: \"equirectangular\",\n            northOffset: 0,\n            showFullscreenCtrl: true,\n            dynamic: false,\n            doubleClickZoom: true,\n            keyboardZoom: true,\n            mouseZoom: true,\n            showZoomCtrl: true,\n            autoLoad: false,\n            showControls: true,\n            orientationOnByDefault: false,\n            hotSpotDebug: false,\n            backgroundColor: [\n                0,\n                0,\n                0\n            ],\n            avoidShowingBackground: false,\n            animationTimingFunction: timingFunction,\n            draggable: true,\n            disableKeyboardCtrl: false,\n            crossOrigin: \"anonymous\",\n            touchPanSpeedCoeffFactor: 1,\n            capturedKeyNumbers: [\n                16,\n                17,\n                27,\n                37,\n                38,\n                39,\n                40,\n                61,\n                65,\n                68,\n                83,\n                87,\n                107,\n                109,\n                173,\n                187,\n                189\n            ]\n        };\n        // Translatable / configurable strings\n        // Some strings contain '%s', which is a placeholder for inserted values\n        // When setting strings in external configuration, `\\n` should be used instead of `<br>` to insert line breaks\n        defaultConfig.strings = {\n            // Labels\n            loadButtonLabel: \"Click to<br>Load<br>Panorama\",\n            loadingLabel: \"Loading...\",\n            bylineLabel: \"by %s\",\n            // Errors\n            noPanoramaError: \"No panorama image was specified.\",\n            fileAccessError: \"The file %s could not be accessed.\",\n            malformedURLError: \"There is something wrong with the panorama URL.\",\n            iOS8WebGLError: \"Due to iOS 8's broken WebGL implementation, only \" + \"progressive encoded JPEGs work for your device (this \" + \"panorama uses standard encoding).\",\n            genericWebGLError: \"Your browser does not have the necessary WebGL support to display this panorama.\",\n            textureSizeError: \"This panorama is too big for your device! It's \" + \"%spx wide, but your device only supports images up to \" + \"%spx wide. Try another device.\" + \" (If you're the author, try scaling down the image.)\",\n            unknownError: \"Unknown error. Check developer console.\"\n        };\n        // Initialize container\n        container = typeof container === \"string\" ? document1.getElementById(container) : container;\n        container.classList.add(\"pnlm-container\");\n        container.tabIndex = 0;\n        // Create container for ui\n        var uiContainer = document1.createElement(\"div\");\n        uiContainer.className = \"pnlm-ui\";\n        container.appendChild(uiContainer);\n        // Create container for renderer\n        var renderContainer = document1.createElement(\"div\");\n        renderContainer.className = \"pnlm-render-container\";\n        container.appendChild(renderContainer);\n        var dragFix = document1.createElement(\"div\");\n        dragFix.className = \"pnlm-dragfix\";\n        uiContainer.appendChild(dragFix);\n        // Display about information on right click\n        var aboutMsg = document1.createElement(\"span\");\n        aboutMsg.className = \"pnlm-about-msg\";\n        aboutMsg.innerHTML = '<a href=\"https://pannellum.org/\" target=\"_blank\">Pannellum</a>';\n        uiContainer.appendChild(aboutMsg);\n        dragFix.addEventListener(\"contextmenu\", aboutMessage);\n        // Create info display\n        var infoDisplay = {};\n        // Hot spot debug indicator\n        var hotSpotDebugIndicator = document1.createElement(\"div\");\n        hotSpotDebugIndicator.className = \"pnlm-sprite pnlm-hot-spot-debug-indicator\";\n        uiContainer.appendChild(hotSpotDebugIndicator);\n        // Panorama info\n        infoDisplay.container = document1.createElement(\"div\");\n        infoDisplay.container.className = \"pnlm-panorama-info\";\n        infoDisplay.title = document1.createElement(\"div\");\n        infoDisplay.title.className = \"pnlm-title-box\";\n        infoDisplay.container.appendChild(infoDisplay.title);\n        infoDisplay.author = document1.createElement(\"div\");\n        infoDisplay.author.className = \"pnlm-author-box\";\n        infoDisplay.container.appendChild(infoDisplay.author);\n        uiContainer.appendChild(infoDisplay.container);\n        // Load box\n        infoDisplay.load = {};\n        infoDisplay.load.box = document1.createElement(\"div\");\n        infoDisplay.load.box.className = \"pnlm-load-box\";\n        infoDisplay.load.boxp = document1.createElement(\"p\");\n        infoDisplay.load.box.appendChild(infoDisplay.load.boxp);\n        infoDisplay.load.lbox = document1.createElement(\"div\");\n        infoDisplay.load.lbox.className = \"pnlm-lbox\";\n        infoDisplay.load.lbox.innerHTML = '<div class=\"pnlm-loading\"></div>';\n        infoDisplay.load.box.appendChild(infoDisplay.load.lbox);\n        infoDisplay.load.lbar = document1.createElement(\"div\");\n        infoDisplay.load.lbar.className = \"pnlm-lbar\";\n        infoDisplay.load.lbarFill = document1.createElement(\"div\");\n        infoDisplay.load.lbarFill.className = \"pnlm-lbar-fill\";\n        infoDisplay.load.lbar.appendChild(infoDisplay.load.lbarFill);\n        infoDisplay.load.box.appendChild(infoDisplay.load.lbar);\n        infoDisplay.load.msg = document1.createElement(\"p\");\n        infoDisplay.load.msg.className = \"pnlm-lmsg\";\n        infoDisplay.load.box.appendChild(infoDisplay.load.msg);\n        uiContainer.appendChild(infoDisplay.load.box);\n        // Error message\n        infoDisplay.errorMsg = document1.createElement(\"div\");\n        infoDisplay.errorMsg.className = \"pnlm-error-msg pnlm-info-box\";\n        uiContainer.appendChild(infoDisplay.errorMsg);\n        // Create controls\n        var controls = {};\n        controls.container = document1.createElement(\"div\");\n        controls.container.className = \"pnlm-controls-container\";\n        uiContainer.appendChild(controls.container);\n        // Load button\n        controls.load = document1.createElement(\"div\");\n        controls.load.className = \"pnlm-load-button\";\n        controls.load.addEventListener(\"click\", function() {\n            processOptions();\n            load();\n        });\n        uiContainer.appendChild(controls.load);\n        // Zoom controls\n        controls.zoom = document1.createElement(\"div\");\n        controls.zoom.className = \"pnlm-zoom-controls pnlm-controls\";\n        controls.zoomIn = document1.createElement(\"div\");\n        controls.zoomIn.className = \"pnlm-zoom-in pnlm-sprite pnlm-control\";\n        controls.zoomIn.addEventListener(\"click\", zoomIn);\n        controls.zoom.appendChild(controls.zoomIn);\n        controls.zoomOut = document1.createElement(\"div\");\n        controls.zoomOut.className = \"pnlm-zoom-out pnlm-sprite pnlm-control\";\n        controls.zoomOut.addEventListener(\"click\", zoomOut);\n        controls.zoom.appendChild(controls.zoomOut);\n        controls.container.appendChild(controls.zoom);\n        // Fullscreen toggle\n        controls.fullscreen = document1.createElement(\"div\");\n        controls.fullscreen.addEventListener(\"click\", toggleFullscreen);\n        controls.fullscreen.className = \"pnlm-fullscreen-toggle-button pnlm-sprite pnlm-fullscreen-toggle-button-inactive pnlm-controls pnlm-control\";\n        if (document1.fullscreenEnabled || document1.mozFullScreenEnabled || document1.webkitFullscreenEnabled || document1.msFullscreenEnabled) {\n            controls.container.appendChild(controls.fullscreen);\n        }\n        // Device orientation toggle\n        controls.orientation = document1.createElement(\"div\");\n        controls.orientation.addEventListener(\"click\", function(e) {\n            if (orientation) {\n                stopOrientation();\n            } else {\n                startOrientation();\n            }\n        });\n        controls.orientation.addEventListener(\"mousedown\", function(e) {\n            e.stopPropagation();\n        });\n        controls.orientation.addEventListener(\"touchstart\", function(e) {\n            e.stopPropagation();\n        });\n        controls.orientation.addEventListener(\"pointerdown\", function(e) {\n            e.stopPropagation();\n        });\n        controls.orientation.className = \"pnlm-orientation-button pnlm-orientation-button-inactive pnlm-sprite pnlm-controls pnlm-control\";\n        var orientationSupport, startOrientationIfSupported = false;\n        function deviceOrientationTest(e) {\n            window1.removeEventListener(\"deviceorientation\", deviceOrientationTest);\n            if (e && e.alpha !== null && e.beta !== null && e.gamma !== null) {\n                controls.container.appendChild(controls.orientation);\n                orientationSupport = true;\n                if (startOrientationIfSupported) {\n                    startOrientation();\n                }\n            } else {\n                orientationSupport = false;\n            }\n        }\n        if (window1.DeviceOrientationEvent) {\n            window1.addEventListener(\"deviceorientation\", deviceOrientationTest);\n        } else {\n            orientationSupport = false;\n        }\n        // Compass\n        var compass = document1.createElement(\"div\");\n        compass.className = \"pnlm-compass pnlm-controls pnlm-control\";\n        uiContainer.appendChild(compass);\n        // Load and process configuration\n        if (initialConfig.firstScene) {\n            // Activate first scene if specified in URL\n            mergeConfig(initialConfig.firstScene);\n        } else if (initialConfig.default && initialConfig.default.firstScene) {\n            // Activate first scene if specified in file\n            mergeConfig(initialConfig.default.firstScene);\n        } else {\n            mergeConfig(null);\n        }\n        processOptions(true);\n        /**\n    * Initializes viewer.\n    * @private\n    */ function init() {\n            // Display an error for IE 9 as it doesn't work but also doesn't otherwise\n            // show an error (older versions don't work at all)\n            // Based on: http://stackoverflow.com/a/10965203\n            var div = document1.createElement(\"div\");\n            div.innerHTML = \"<!--[if lte IE 9]><i></i><![endif]-->\";\n            if (div.getElementsByTagName(\"i\").length == 1) {\n                anError();\n                return;\n            }\n            origHfov = config.hfov;\n            origPitch = config.pitch;\n            var i, p;\n            if (config.type == \"cubemap\") {\n                panoImage = [];\n                for(i = 0; i < 6; i++){\n                    panoImage.push(new Image());\n                    panoImage[i].crossOrigin = config.crossOrigin;\n                }\n                infoDisplay.load.lbox.style.display = \"block\";\n                infoDisplay.load.lbar.style.display = \"none\";\n            } else if (config.type == \"multires\") {\n                var c = JSON.parse(JSON.stringify(config.multiRes)); // Deep copy\n                // Avoid \"undefined\" in path, check (optional) multiRes.basePath, too\n                // Use only multiRes.basePath if it's an absolute URL\n                if (config.basePath && config.multiRes.basePath && !/^(?:[a-z]+:)?\\/\\//i.test(config.multiRes.basePath)) {\n                    c.basePath = config.basePath + config.multiRes.basePath;\n                } else if (config.multiRes.basePath) {\n                    c.basePath = config.multiRes.basePath;\n                } else if (config.basePath) {\n                    c.basePath = config.basePath;\n                }\n                panoImage = c;\n            } else {\n                if (config.dynamic === true) {\n                    panoImage = config.panorama;\n                } else {\n                    if (config.panorama === undefined) {\n                        anError(config.strings.noPanoramaError);\n                        return;\n                    }\n                    panoImage = new Image();\n                }\n            }\n            // Configure image loading\n            if (config.type == \"cubemap\") {\n                // Quick loading counter for synchronous loading\n                var itemsToLoad = 6;\n                var onLoad = function onLoad() {\n                    itemsToLoad--;\n                    if (itemsToLoad === 0) {\n                        onImageLoad();\n                    }\n                };\n                var onError = function onError(e) {\n                    var a = document1.createElement(\"a\");\n                    a.href = e.target.src;\n                    a.textContent = a.href;\n                    anError(config.strings.fileAccessError.replace(\"%s\", a.outerHTML));\n                };\n                for(i = 0; i < panoImage.length; i++){\n                    p = config.cubeMap[i];\n                    if (p == \"null\") {\n                        // support partial cubemap image with explicitly empty faces\n                        console.log(\"Will use background instead of missing cubemap face \" + i);\n                        onLoad();\n                    } else {\n                        if (config.basePath && !absoluteURL(p)) {\n                            p = config.basePath + p;\n                        }\n                        panoImage[i].onload = onLoad;\n                        panoImage[i].onerror = onError;\n                        panoImage[i].src = sanitizeURL(p);\n                    }\n                }\n            } else if (config.type == \"multires\") {\n                onImageLoad();\n            } else {\n                p = \"\";\n                if (config.basePath) {\n                    p = config.basePath;\n                }\n                if (config.dynamic !== true) {\n                    // Still image\n                    p = absoluteURL(config.panorama) ? config.panorama : p + config.panorama;\n                    panoImage.onload = function() {\n                        window1.URL.revokeObjectURL(this.src); // Clean up\n                        onImageLoad();\n                    };\n                    var xhr = new XMLHttpRequest();\n                    xhr.onloadend = function() {\n                        if (xhr.status != 200) {\n                            // Display error if image can't be loaded\n                            var a = document1.createElement(\"a\");\n                            a.href = p;\n                            a.textContent = a.href;\n                            anError(config.strings.fileAccessError.replace(\"%s\", a.outerHTML));\n                        }\n                        var img = this.response;\n                        parseGPanoXMP(img);\n                        infoDisplay.load.msg.innerHTML = \"\";\n                    };\n                    xhr.onprogress = function(e) {\n                        if (e.lengthComputable) {\n                            // Display progress\n                            var percent = e.loaded / e.total * 100;\n                            infoDisplay.load.lbarFill.style.width = percent + \"%\";\n                            var unit, numerator, denominator;\n                            if (e.total > 1e6) {\n                                unit = \"MB\";\n                                numerator = (e.loaded / 1e6).toFixed(2);\n                                denominator = (e.total / 1e6).toFixed(2);\n                            } else if (e.total > 1e3) {\n                                unit = \"kB\";\n                                numerator = (e.loaded / 1e3).toFixed(1);\n                                denominator = (e.total / 1e3).toFixed(1);\n                            } else {\n                                unit = \"B\";\n                                numerator = e.loaded;\n                                denominator = e.total;\n                            }\n                            infoDisplay.load.msg.innerHTML = numerator + \" / \" + denominator + \" \" + unit;\n                        } else {\n                            // Display loading spinner\n                            infoDisplay.load.lbox.style.display = \"block\";\n                            infoDisplay.load.lbar.style.display = \"none\";\n                        }\n                    };\n                    try {\n                        xhr.open(\"GET\", p, true);\n                    } catch (e) {\n                        // Malformed URL\n                        anError(config.strings.malformedURLError);\n                    }\n                    xhr.responseType = \"blob\";\n                    xhr.setRequestHeader(\"Accept\", \"image/*,*/*;q=0.9\");\n                    xhr.withCredentials = config.crossOrigin === \"use-credentials\";\n                    xhr.send();\n                }\n            }\n            if (config.draggable) {\n                uiContainer.classList.add(\"pnlm-grab\");\n            }\n            uiContainer.classList.remove(\"pnlm-grabbing\");\n        }\n        /**\n    * Test if URL is absolute or relative.\n    * @private\n    * @param {string} url - URL to test\n    * @returns {boolean} True if absolute, else false\n    */ function absoluteURL(url) {\n            // From http://stackoverflow.com/a/19709846\n            return new RegExp(\"^(?:[a-z]+:)?//\", \"i\").test(url) || url[0] == \"/\" || url.slice(0, 5) == \"blob:\";\n        }\n        ;\n        /**\n    * Create renderer and initialize event listeners once image is loaded.\n    * @private\n    */ function onImageLoad() {\n            if (!renderer) {\n                renderer = new libpannellum.renderer(renderContainer);\n            }\n            // Only add event listeners once\n            if (!listenersAdded) {\n                listenersAdded = true;\n                dragFix.addEventListener(\"mousedown\", onDocumentMouseDown, false);\n                document1.addEventListener(\"mousemove\", onDocumentMouseMove, false);\n                document1.addEventListener(\"mouseup\", onDocumentMouseUp, false);\n                if (config.mouseZoom) {\n                    uiContainer.addEventListener(\"mousewheel\", onDocumentMouseWheel, false);\n                    uiContainer.addEventListener(\"DOMMouseScroll\", onDocumentMouseWheel, false);\n                }\n                if (config.doubleClickZoom) {\n                    dragFix.addEventListener(\"dblclick\", onDocumentDoubleClick, false);\n                }\n                uiContainer.addEventListener(\"mozfullscreenchange\", onFullScreenChange, false);\n                uiContainer.addEventListener(\"webkitfullscreenchange\", onFullScreenChange, false);\n                uiContainer.addEventListener(\"msfullscreenchange\", onFullScreenChange, false);\n                uiContainer.addEventListener(\"fullscreenchange\", onFullScreenChange, false);\n                window1.addEventListener(\"resize\", onDocumentResize, false);\n                window1.addEventListener(\"orientationchange\", onDocumentResize, false);\n                if (!config.disableKeyboardCtrl) {\n                    container.addEventListener(\"keydown\", onDocumentKeyPress, false);\n                    container.addEventListener(\"keyup\", onDocumentKeyUp, false);\n                    container.addEventListener(\"blur\", clearKeys, false);\n                }\n                document1.addEventListener(\"mouseleave\", onDocumentMouseUp, false);\n                if (document1.documentElement.style.pointerAction === \"\" && document1.documentElement.style.touchAction === \"\") {\n                    dragFix.addEventListener(\"pointerdown\", onDocumentPointerDown, false);\n                    dragFix.addEventListener(\"pointermove\", onDocumentPointerMove, false);\n                    dragFix.addEventListener(\"pointerup\", onDocumentPointerUp, false);\n                    dragFix.addEventListener(\"pointerleave\", onDocumentPointerUp, false);\n                } else {\n                    dragFix.addEventListener(\"touchstart\", onDocumentTouchStart, false);\n                    dragFix.addEventListener(\"touchmove\", onDocumentTouchMove, false);\n                    dragFix.addEventListener(\"touchend\", onDocumentTouchEnd, false);\n                }\n                // Deal with MS pointer events\n                if (window1.navigator.pointerEnabled) {\n                    container.style.touchAction = \"none\";\n                }\n            }\n            renderInit();\n            setHfov(config.hfov); // possibly adapt hfov after configuration and canvas is complete; prevents empty space on top or bottom by zomming out too much\n            setTimeout(function() {\n                isTimedOut = true;\n            }, 500);\n        }\n        /**\n    * Parses Google Photo Sphere XMP Metadata.\n    * https://developers.google.com/photo-sphere/metadata/\n    * @private\n    * @param {Image} image - Image to read XMP metadata from.\n    */ function parseGPanoXMP(image) {\n            var reader = new FileReader();\n            reader.addEventListener(\"loadend\", function() {\n                var img = reader.result;\n                // This awful browser specific test exists because iOS 8 does not work\n                // with non-progressive encoded JPEGs.\n                if (navigator.userAgent.toLowerCase().match(/(iphone|ipod|ipad).* os 8_/)) {\n                    var flagIndex = img.indexOf(\"\\xff\\xc2\");\n                    if (flagIndex < 0 || flagIndex > 65536) {\n                        anError(config.strings.iOS8WebGLError);\n                    }\n                }\n                var start = img.indexOf(\"<x:xmpmeta\");\n                if (start > -1 && config.ignoreGPanoXMP !== true) {\n                    var xmpData = img.substring(start, img.indexOf(\"</x:xmpmeta>\") + 12);\n                    // Extract the requested tag from the XMP data\n                    var getTag = function getTag(tag) {\n                        var result;\n                        if (xmpData.indexOf(tag + '=\"') >= 0) {\n                            result = xmpData.substring(xmpData.indexOf(tag + '=\"') + tag.length + 2);\n                            result = result.substring(0, result.indexOf('\"'));\n                        } else if (xmpData.indexOf(tag + \">\") >= 0) {\n                            result = xmpData.substring(xmpData.indexOf(tag + \">\") + tag.length + 1);\n                            result = result.substring(0, result.indexOf(\"<\"));\n                        }\n                        if (result !== undefined) {\n                            return Number(result);\n                        }\n                        return null;\n                    };\n                    // Relevant XMP data\n                    var xmp = {\n                        fullWidth: getTag(\"GPano:FullPanoWidthPixels\"),\n                        croppedWidth: getTag(\"GPano:CroppedAreaImageWidthPixels\"),\n                        fullHeight: getTag(\"GPano:FullPanoHeightPixels\"),\n                        croppedHeight: getTag(\"GPano:CroppedAreaImageHeightPixels\"),\n                        topPixels: getTag(\"GPano:CroppedAreaTopPixels\"),\n                        heading: getTag(\"GPano:PoseHeadingDegrees\"),\n                        horizonPitch: getTag(\"GPano:PosePitchDegrees\"),\n                        horizonRoll: getTag(\"GPano:PoseRollDegrees\")\n                    };\n                    if (xmp.fullWidth !== null && xmp.croppedWidth !== null && xmp.fullHeight !== null && xmp.croppedHeight !== null && xmp.topPixels !== null) {\n                        // Set up viewer using GPano XMP data\n                        if (specifiedPhotoSphereExcludes.indexOf(\"haov\") < 0) {\n                            config.haov = xmp.croppedWidth / xmp.fullWidth * 360;\n                        }\n                        if (specifiedPhotoSphereExcludes.indexOf(\"vaov\") < 0) {\n                            config.vaov = xmp.croppedHeight / xmp.fullHeight * 180;\n                        }\n                        if (specifiedPhotoSphereExcludes.indexOf(\"vOffset\") < 0) {\n                            config.vOffset = ((xmp.topPixels + xmp.croppedHeight / 2) / xmp.fullHeight - 0.5) * -180;\n                        }\n                        if (xmp.heading !== null && specifiedPhotoSphereExcludes.indexOf(\"northOffset\") < 0) {\n                            // TODO: make sure this works correctly for partial panoramas\n                            config.northOffset = xmp.heading;\n                            if (config.compass !== false) {\n                                config.compass = true;\n                            }\n                        }\n                        if (xmp.horizonPitch !== null && xmp.horizonRoll !== null) {\n                            if (specifiedPhotoSphereExcludes.indexOf(\"horizonPitch\") < 0) {\n                                config.horizonPitch = xmp.horizonPitch;\n                            }\n                            if (specifiedPhotoSphereExcludes.indexOf(\"horizonRoll\") < 0) {\n                                config.horizonRoll = xmp.horizonRoll;\n                            }\n                        }\n                    // TODO: add support for initial view settings\n                    }\n                }\n                // Load panorama\n                panoImage.src = window1.URL.createObjectURL(image);\n            });\n            if (reader.readAsBinaryString !== undefined) {\n                reader.readAsBinaryString(image);\n            } else {\n                reader.readAsText(image);\n            }\n        }\n        /**\n    * Displays an error message.\n    * @private\n    * @param {string} errorMsg - Error message to display. If not specified, a\n    *      generic WebGL error is displayed.\n    */ function anError(errorMsg) {\n            if (errorMsg === undefined) {\n                errorMsg = config.strings.genericWebGLError;\n            }\n            infoDisplay.errorMsg.innerHTML = \"<p>\" + errorMsg + \"</p>\";\n            controls.load.style.display = \"none\";\n            infoDisplay.load.box.style.display = \"none\";\n            infoDisplay.errorMsg.style.display = \"table\";\n            error = true;\n            renderContainer.style.display = \"none\";\n            fireEvent(\"error\", errorMsg);\n        }\n        /**\n    * Hides error message display.\n    * @private\n    */ function clearError() {\n            if (error) {\n                infoDisplay.load.box.style.display = \"none\";\n                infoDisplay.errorMsg.style.display = \"none\";\n                error = false;\n                fireEvent(\"errorcleared\");\n            }\n        }\n        /**\n    * Displays about message.\n    * @private\n    * @param {MouseEvent} event - Right click location\n    */ function aboutMessage(event1) {\n            var pos = mousePosition(event1);\n            aboutMsg.style.left = pos.x + \"px\";\n            aboutMsg.style.top = pos.y + \"px\";\n            clearTimeout(aboutMessage.t1);\n            clearTimeout(aboutMessage.t2);\n            aboutMsg.style.display = \"block\";\n            aboutMsg.style.opacity = 1;\n            aboutMessage.t1 = setTimeout(function() {\n                aboutMsg.style.opacity = 0;\n            }, 2000);\n            aboutMessage.t2 = setTimeout(function() {\n                aboutMsg.style.display = \"none\";\n            }, 2500);\n            event1.preventDefault();\n        }\n        /**\n    * Calculate mouse position relative to top left of viewer container.\n    * @private\n    * @param {MouseEvent} event - Mouse event to use in calculation\n    * @returns {Object} Calculated X and Y coordinates\n    */ function mousePosition(event1) {\n            var bounds = container.getBoundingClientRect();\n            var pos = {};\n            pos.x = event1.clientX - bounds.left;\n            pos.y = event1.clientY - bounds.top;\n            return pos;\n        }\n        /**\n    * Event handler for mouse clicks. Initializes panning. Prints center and click\n    * location coordinates when hot spot debugging is enabled.\n    * @private\n    * @param {MouseEvent} event - Document mouse down event.\n    */ function onDocumentMouseDown(event1) {\n            // Override default action\n            event1.preventDefault();\n            // But not all of it\n            container.focus();\n            // Only do something if the panorama is loaded\n            if (!loaded || !config.draggable) {\n                return;\n            }\n            // Calculate mouse position relative to top left of viewer container\n            var pos = mousePosition(event1);\n            // Log pitch / yaw of mouse click when debugging / placing hot spots\n            if (config.hotSpotDebug) {\n                var coords = mouseEventToCoords(event1);\n                console.log(\"Pitch: \" + coords[0] + \", Yaw: \" + coords[1] + \", Center Pitch: \" + config.pitch + \", Center Yaw: \" + config.yaw + \", HFOV: \" + config.hfov);\n            }\n            // Turn off auto-rotation if enabled\n            stopAnimation();\n            stopOrientation();\n            config.roll = 0;\n            speed.hfov = 0;\n            isUserInteracting = true;\n            latestInteraction = Date.now();\n            onPointerDownPointerX = pos.x;\n            onPointerDownPointerY = pos.y;\n            onPointerDownYaw = config.yaw;\n            onPointerDownPitch = config.pitch;\n            uiContainer.classList.add(\"pnlm-grabbing\");\n            uiContainer.classList.remove(\"pnlm-grab\");\n            fireEvent(\"mousedown\", event1);\n            animateInit();\n        }\n        /**\n    * Event handler for double clicks. Zooms in at clicked location\n    * @private\n    * @param {MouseEvent} event - Document mouse down event.\n    */ function onDocumentDoubleClick(event1) {\n            if (config.minHfov === config.hfov) {\n                _this.setHfov(origHfov, 1000);\n            } else {\n                var coords = mouseEventToCoords(event1);\n                _this.lookAt(coords[0], coords[1], config.minHfov, 1000);\n            }\n        }\n        /**\n    * Calculate panorama pitch and yaw from location of mouse event.\n    * @private\n    * @param {MouseEvent} event - Document mouse down event.\n    * @returns {number[]} [pitch, yaw]\n    */ function mouseEventToCoords(event1) {\n            var pos = mousePosition(event1);\n            var canvas = renderer.getCanvas();\n            var canvasWidth = canvas.clientWidth, canvasHeight = canvas.clientHeight;\n            var x = pos.x / canvasWidth * 2 - 1;\n            var y = (1 - pos.y / canvasHeight * 2) * canvasHeight / canvasWidth;\n            var focal = 1 / Math.tan(config.hfov * Math.PI / 360);\n            var s = Math.sin(config.pitch * Math.PI / 180);\n            var c = Math.cos(config.pitch * Math.PI / 180);\n            var a = focal * c - y * s;\n            var root = Math.sqrt(x * x + a * a);\n            var pitch = Math.atan((y * c + focal * s) / root) * 180 / Math.PI;\n            var yaw = Math.atan2(x / root, a / root) * 180 / Math.PI + config.yaw;\n            if (yaw < -180) {\n                yaw += 360;\n            }\n            if (yaw > 180) {\n                yaw -= 360;\n            }\n            return [\n                pitch,\n                yaw\n            ];\n        }\n        /**\n    * Event handler for mouse moves. Pans center of view.\n    * @private\n    * @param {MouseEvent} event - Document mouse move event.\n    */ function onDocumentMouseMove(event1) {\n            if (isUserInteracting && loaded) {\n                latestInteraction = Date.now();\n                var canvas = renderer.getCanvas();\n                var canvasWidth = canvas.clientWidth, canvasHeight = canvas.clientHeight;\n                var pos = mousePosition(event1);\n                //TODO: This still isn't quite right\n                var yaw = (Math.atan(onPointerDownPointerX / canvasWidth * 2 - 1) - Math.atan(pos.x / canvasWidth * 2 - 1)) * 180 / Math.PI * config.hfov / 90 + onPointerDownYaw;\n                speed.yaw = (yaw - config.yaw) % 360 * 0.2;\n                config.yaw = yaw;\n                var vfov = 2 * Math.atan(Math.tan(config.hfov / 360 * Math.PI) * canvasHeight / canvasWidth) * 180 / Math.PI;\n                var pitch = (Math.atan(pos.y / canvasHeight * 2 - 1) - Math.atan(onPointerDownPointerY / canvasHeight * 2 - 1)) * 180 / Math.PI * vfov / 90 + onPointerDownPitch;\n                speed.pitch = (pitch - config.pitch) * 0.2;\n                config.pitch = pitch;\n            }\n        }\n        /**\n    * Event handler for mouse up events. Stops panning.\n    * @private\n    */ function onDocumentMouseUp(event1) {\n            if (!isUserInteracting) {\n                return;\n            }\n            isUserInteracting = false;\n            if (Date.now() - latestInteraction > 15) {\n                // Prevents jump when user rapidly moves mouse, stops, and then\n                // releases the mouse button\n                speed.pitch = speed.yaw = 0;\n            }\n            uiContainer.classList.add(\"pnlm-grab\");\n            uiContainer.classList.remove(\"pnlm-grabbing\");\n            latestInteraction = Date.now();\n            fireEvent(\"mouseup\", event1);\n        }\n        /**\n    * Event handler for touches. Initializes panning if one touch or zooming if\n    * two touches.\n    * @private\n    * @param {TouchEvent} event - Document touch start event.\n    */ function onDocumentTouchStart(event1) {\n            // Only do something if the panorama is loaded\n            if (!loaded || !config.draggable) {\n                return;\n            }\n            // Turn off auto-rotation if enabled\n            stopAnimation();\n            stopOrientation();\n            config.roll = 0;\n            speed.hfov = 0;\n            // Calculate touch position relative to top left of viewer container\n            var pos0 = mousePosition(event1.targetTouches[0]);\n            onPointerDownPointerX = pos0.x;\n            onPointerDownPointerY = pos0.y;\n            if (event1.targetTouches.length == 2) {\n                // Down pointer is the center of the two fingers\n                var pos1 = mousePosition(event1.targetTouches[1]);\n                onPointerDownPointerX += (pos1.x - pos0.x) * 0.5;\n                onPointerDownPointerY += (pos1.y - pos0.y) * 0.5;\n                onPointerDownPointerDist = Math.sqrt((pos0.x - pos1.x) * (pos0.x - pos1.x) + (pos0.y - pos1.y) * (pos0.y - pos1.y));\n            }\n            isUserInteracting = true;\n            latestInteraction = Date.now();\n            onPointerDownYaw = config.yaw;\n            onPointerDownPitch = config.pitch;\n            fireEvent(\"touchstart\", event1);\n            animateInit();\n        }\n        /**\n    * Event handler for touch movements. Pans center of view if one touch or\n    * adjusts zoom if two touches.\n    * @private\n    * @param {TouchEvent} event - Document touch move event.\n    */ function onDocumentTouchMove(event1) {\n            if (!config.draggable) {\n                return;\n            }\n            // Override default action\n            event1.preventDefault();\n            if (loaded) {\n                latestInteraction = Date.now();\n            }\n            if (isUserInteracting && loaded) {\n                var pos0 = mousePosition(event1.targetTouches[0]);\n                var clientX = pos0.x;\n                var clientY = pos0.y;\n                if (event1.targetTouches.length == 2 && onPointerDownPointerDist != -1) {\n                    var pos1 = mousePosition(event1.targetTouches[1]);\n                    clientX += (pos1.x - pos0.x) * 0.5;\n                    clientY += (pos1.y - pos0.y) * 0.5;\n                    var clientDist = Math.sqrt((pos0.x - pos1.x) * (pos0.x - pos1.x) + (pos0.y - pos1.y) * (pos0.y - pos1.y));\n                    setHfov(config.hfov + (onPointerDownPointerDist - clientDist) * 0.1);\n                    onPointerDownPointerDist = clientDist;\n                }\n                // The smaller the config.hfov value (the more zoomed-in the user is), the faster\n                // yaw/pitch are perceived to change on one-finger touchmove (panning) events and vice versa.\n                // To improve usability at both small and large zoom levels (config.hfov values)\n                // we introduce a dynamic pan speed coefficient.\n                //\n                // Currently this seems to *roughly* keep initial drag/pan start position close to\n                // the user's finger while panning regardless of zoom level / config.hfov value.\n                var touchmovePanSpeedCoeff = config.hfov / 360 * config.touchPanSpeedCoeffFactor;\n                var yaw = (onPointerDownPointerX - clientX) * touchmovePanSpeedCoeff + onPointerDownYaw;\n                speed.yaw = (yaw - config.yaw) % 360 * 0.2;\n                config.yaw = yaw;\n                var pitch = (clientY - onPointerDownPointerY) * touchmovePanSpeedCoeff + onPointerDownPitch;\n                speed.pitch = (pitch - config.pitch) * 0.2;\n                config.pitch = pitch;\n            }\n        }\n        /**\n    * Event handler for end of touches. Stops panning and/or zooming.\n    * @private\n    */ function onDocumentTouchEnd() {\n            isUserInteracting = false;\n            if (Date.now() - latestInteraction > 150) {\n                speed.pitch = speed.yaw = 0;\n            }\n            onPointerDownPointerDist = -1;\n            latestInteraction = Date.now();\n            fireEvent(\"touchend\", event);\n        }\n        var pointerIDs = [], pointerCoordinates = [];\n        /**\n    * Event handler for touch starts in IE / Edge.\n    * @private\n    * @param {PointerEvent} event - Document pointer down event.\n    */ function onDocumentPointerDown(event1) {\n            if (event1.pointerType == \"touch\") {\n                pointerIDs.push(event1.pointerId);\n                pointerCoordinates.push({\n                    clientX: event1.clientX,\n                    clientY: event1.clientY\n                });\n                event1.targetTouches = pointerCoordinates;\n                onDocumentTouchStart(event1);\n                event1.preventDefault();\n            }\n        }\n        /**\n    * Event handler for touch moves in IE / Edge.\n    * @private\n    * @param {PointerEvent} event - Document pointer move event.\n    */ function onDocumentPointerMove(event1) {\n            if (event1.pointerType == \"touch\") {\n                for(var i = 0; i < pointerIDs.length; i++){\n                    if (event1.pointerId == pointerIDs[i]) {\n                        pointerCoordinates[i].clientX = event1.clientX;\n                        pointerCoordinates[i].clientY = event1.clientY;\n                        event1.targetTouches = pointerCoordinates;\n                        onDocumentTouchMove(event1);\n                        event1.preventDefault();\n                        return;\n                    }\n                }\n            }\n        }\n        /**\n    * Event handler for touch ends in IE / Edge.\n    * @private\n    * @param {PointerEvent} event - Document pointer up event.\n    */ function onDocumentPointerUp(event1) {\n            if (event1.pointerType == \"touch\") {\n                var defined = false;\n                for(var i = 0; i < pointerIDs.length; i++){\n                    if (event1.pointerId == pointerIDs[i]) {\n                        pointerIDs[i] = undefined;\n                    }\n                    if (pointerIDs[i]) {\n                        defined = true;\n                    }\n                }\n                if (!defined) {\n                    pointerIDs = [];\n                    pointerCoordinates = [];\n                    onDocumentTouchEnd();\n                }\n                event1.preventDefault();\n            }\n        }\n        /**\n    * Event handler for mouse wheel. Changes zoom.\n    * @private\n    * @param {WheelEvent} event - Document mouse wheel event.\n    */ function onDocumentMouseWheel(event1) {\n            // Only do something if the panorama is loaded and mouse wheel zoom is enabled\n            if (!loaded || config.mouseZoom == \"fullscreenonly\" && !fullscreenActive) {\n                return;\n            }\n            event1.preventDefault();\n            // Turn off auto-rotation if enabled\n            stopAnimation();\n            latestInteraction = Date.now();\n            if (event1.wheelDeltaY) {\n                // WebKit\n                setHfov(config.hfov - event1.wheelDeltaY * 0.05);\n                speed.hfov = event1.wheelDelta < 0 ? 1 : -1;\n            } else if (event1.wheelDelta) {\n                // Opera / Explorer 9\n                setHfov(config.hfov - event1.wheelDelta * 0.05);\n                speed.hfov = event1.wheelDelta < 0 ? 1 : -1;\n            } else if (event1.detail) {\n                // Firefox\n                setHfov(config.hfov + event1.detail * 1.5);\n                speed.hfov = event1.detail > 0 ? 1 : -1;\n            }\n            animateInit();\n        }\n        /**\n    * Event handler for key presses. Updates list of currently pressed keys.\n    * @private\n    * @param {KeyboardEvent} event - Document key press event.\n    */ function onDocumentKeyPress(event1) {\n            // Turn off auto-rotation if enabled\n            stopAnimation();\n            latestInteraction = Date.now();\n            stopOrientation();\n            config.roll = 0;\n            // Record key pressed\n            var keynumber = event1.which || event1.keycode;\n            // Override default action for keys that are used\n            if (config.capturedKeyNumbers.indexOf(keynumber) < 0) {\n                return;\n            }\n            event1.preventDefault();\n            // If escape key is pressed\n            if (keynumber == 27) {\n                // If in fullscreen mode\n                if (fullscreenActive) {\n                    toggleFullscreen();\n                }\n            } else {\n                // Change key\n                changeKey(keynumber, true);\n            }\n        }\n        /**\n    * Clears list of currently pressed keys.\n    * @private\n    */ function clearKeys() {\n            for(var i = 0; i < 10; i++){\n                keysDown[i] = false;\n            }\n        }\n        /**\n    * Event handler for key releases. Updates list of currently pressed keys.\n    * @private\n    * @param {KeyboardEvent} event - Document key up event.\n    */ function onDocumentKeyUp(event1) {\n            // Record key pressed\n            var keynumber = event1.which || event1.keycode;\n            // Override default action for keys that are used\n            if (config.capturedKeyNumbers.indexOf(keynumber) < 0) {\n                return;\n            }\n            event1.preventDefault();\n            // Change key\n            changeKey(keynumber, false);\n        }\n        /**\n    * Updates list of currently pressed keys.\n    * @private\n    * @param {number} keynumber - Key number.\n    * @param {boolean} value - Whether or not key is pressed.\n    */ function changeKey(keynumber, value) {\n            var keyChanged = false;\n            switch(keynumber){\n                // If minus key is released\n                case 109:\n                case 189:\n                case 17:\n                case 173:\n                    if (keysDown[0] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[0] = value;\n                    break;\n                // If plus key is released\n                case 107:\n                case 187:\n                case 16:\n                case 61:\n                    if (keysDown[1] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[1] = value;\n                    break;\n                // If up arrow is released\n                case 38:\n                    if (keysDown[2] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[2] = value;\n                    break;\n                // If \"w\" is released\n                case 87:\n                    if (keysDown[6] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[6] = value;\n                    break;\n                // If down arrow is released\n                case 40:\n                    if (keysDown[3] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[3] = value;\n                    break;\n                // If \"s\" is released\n                case 83:\n                    if (keysDown[7] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[7] = value;\n                    break;\n                // If left arrow is released\n                case 37:\n                    if (keysDown[4] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[4] = value;\n                    break;\n                // If \"a\" is released\n                case 65:\n                    if (keysDown[8] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[8] = value;\n                    break;\n                // If right arrow is released\n                case 39:\n                    if (keysDown[5] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[5] = value;\n                    break;\n                // If \"d\" is released\n                case 68:\n                    if (keysDown[9] != value) {\n                        keyChanged = true;\n                    }\n                    keysDown[9] = value;\n            }\n            if (keyChanged && value) {\n                if (typeof performance !== \"undefined\" && performance.now()) {\n                    prevTime = performance.now();\n                } else {\n                    prevTime = Date.now();\n                }\n                animateInit();\n            }\n        }\n        /**\n    * Pans and/or zooms panorama based on currently pressed keys. Also handles\n    * panorama \"inertia\" and auto rotation.\n    * @private\n    */ function keyRepeat() {\n            // Only do something if the panorama is loaded\n            if (!loaded) {\n                return;\n            }\n            var isKeyDown = false;\n            var prevPitch = config.pitch;\n            var prevYaw = config.yaw;\n            var prevZoom = config.hfov;\n            var newTime;\n            if (typeof performance !== \"undefined\" && performance.now()) {\n                newTime = performance.now();\n            } else {\n                newTime = Date.now();\n            }\n            if (prevTime === undefined) {\n                prevTime = newTime;\n            }\n            var diff = (newTime - prevTime) * config.hfov / 1700;\n            diff = Math.min(diff, 1.0);\n            // If minus key is down\n            if (keysDown[0] && config.keyboardZoom === true) {\n                setHfov(config.hfov + (speed.hfov * 0.8 + 0.5) * diff);\n                isKeyDown = true;\n            }\n            // If plus key is down\n            if (keysDown[1] && config.keyboardZoom === true) {\n                setHfov(config.hfov + (speed.hfov * 0.8 - 0.2) * diff);\n                isKeyDown = true;\n            }\n            // If up arrow or \"w\" is down\n            if (keysDown[2] || keysDown[6]) {\n                // Pan up\n                config.pitch += (speed.pitch * 0.8 + 0.2) * diff;\n                isKeyDown = true;\n            }\n            // If down arrow or \"s\" is down\n            if (keysDown[3] || keysDown[7]) {\n                // Pan down\n                config.pitch += (speed.pitch * 0.8 - 0.2) * diff;\n                isKeyDown = true;\n            }\n            // If left arrow or \"a\" is down\n            if (keysDown[4] || keysDown[8]) {\n                // Pan left\n                config.yaw += (speed.yaw * 0.8 - 0.2) * diff;\n                isKeyDown = true;\n            }\n            // If right arrow or \"d\" is down\n            if (keysDown[5] || keysDown[9]) {\n                // Pan right\n                config.yaw += (speed.yaw * 0.8 + 0.2) * diff;\n                isKeyDown = true;\n            }\n            if (isKeyDown) {\n                latestInteraction = Date.now();\n            }\n            // If auto-rotate\n            var inactivityInterval = Date.now() - latestInteraction;\n            if (config.autoRotate) {\n                // Pan\n                if (newTime - prevTime > 0.001) {\n                    var timeDiff = (newTime - prevTime) / 1000;\n                    var yawDiff = (speed.yaw / timeDiff * diff - config.autoRotate * 0.2) * timeDiff;\n                    yawDiff = (-config.autoRotate > 0 ? 1 : -1) * Math.min(Math.abs(config.autoRotate * timeDiff), Math.abs(yawDiff));\n                    config.yaw += yawDiff;\n                }\n                // Deal with stopping auto rotation after a set delay\n                if (config.autoRotateStopDelay) {\n                    config.autoRotateStopDelay -= newTime - prevTime;\n                    if (config.autoRotateStopDelay <= 0) {\n                        config.autoRotateStopDelay = false;\n                        autoRotateSpeed = config.autoRotate;\n                        config.autoRotate = 0;\n                    }\n                }\n            }\n            // Animated moves\n            if (animatedMove.pitch) {\n                animateMove(\"pitch\");\n                prevPitch = config.pitch;\n            }\n            if (animatedMove.yaw) {\n                animateMove(\"yaw\");\n                prevYaw = config.yaw;\n            }\n            if (animatedMove.hfov) {\n                animateMove(\"hfov\");\n                prevZoom = config.hfov;\n            }\n            // \"Inertia\"\n            if (diff > 0 && !config.autoRotate) {\n                // \"Friction\"\n                var friction = 0.85;\n                // Yaw\n                if (!keysDown[4] && !keysDown[5] && !keysDown[8] && !keysDown[9] && !animatedMove.yaw) {\n                    config.yaw += speed.yaw * diff * friction;\n                }\n                // Pitch\n                if (!keysDown[2] && !keysDown[3] && !keysDown[6] && !keysDown[7] && !animatedMove.pitch) {\n                    config.pitch += speed.pitch * diff * friction;\n                }\n                // Zoom\n                if (!keysDown[0] && !keysDown[1] && !animatedMove.hfov) {\n                    setHfov(config.hfov + speed.hfov * diff * friction);\n                }\n            }\n            prevTime = newTime;\n            if (diff > 0) {\n                speed.yaw = speed.yaw * 0.8 + (config.yaw - prevYaw) / diff * 0.2;\n                speed.pitch = speed.pitch * 0.8 + (config.pitch - prevPitch) / diff * 0.2;\n                speed.hfov = speed.hfov * 0.8 + (config.hfov - prevZoom) / diff * 0.2;\n                // Limit speed\n                var maxSpeed = config.autoRotate ? Math.abs(config.autoRotate) : 5;\n                speed.yaw = Math.min(maxSpeed, Math.max(speed.yaw, -maxSpeed));\n                speed.pitch = Math.min(maxSpeed, Math.max(speed.pitch, -maxSpeed));\n                speed.hfov = Math.min(maxSpeed, Math.max(speed.hfov, -maxSpeed));\n            }\n            // Stop movement if opposite controls are pressed\n            if (keysDown[0] && keysDown[1]) {\n                speed.hfov = 0;\n            }\n            if ((keysDown[2] || keysDown[6]) && (keysDown[3] || keysDown[7])) {\n                speed.pitch = 0;\n            }\n            if ((keysDown[4] || keysDown[8]) && (keysDown[5] || keysDown[9])) {\n                speed.yaw = 0;\n            }\n        }\n        /**\n    * Animates moves.\n    * @param {string} axis - Axis to animate\n    * @private\n    */ function animateMove(axis) {\n            var t = animatedMove[axis];\n            var normTime = Math.min(1, Math.max((Date.now() - t.startTime) / 1000 / (t.duration / 1000), 0));\n            var result = t.startPosition + config.animationTimingFunction(normTime) * (t.endPosition - t.startPosition);\n            if (t.endPosition > t.startPosition && result >= t.endPosition || t.endPosition < t.startPosition && result <= t.endPosition || t.endPosition === t.startPosition) {\n                result = t.endPosition;\n                speed[axis] = 0;\n                var callback = animatedMove[axis].callback, callbackArgs = animatedMove[axis].callbackArgs;\n                delete animatedMove[axis];\n                if (typeof callback === \"function\") {\n                    callback(callbackArgs);\n                }\n            }\n            config[axis] = result;\n        }\n        /**\n    * @param {number} t - Normalized time in animation\n    * @return {number} Position in animation\n    * @private\n    */ function timingFunction(t) {\n            // easeInOutQuad from https://gist.github.com/gre/1650294\n            return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n        }\n        /**\n    * Event handler for document resizes. Updates viewer size and rerenders view.\n    * @private\n    */ function onDocumentResize() {\n            // Resize panorama renderer (moved to onFullScreenChange)\n            //renderer.resize();\n            //animateInit();\n            // Kludge to deal with WebKit regression: https://bugs.webkit.org/show_bug.cgi?id=93525\n            onFullScreenChange();\n        }\n        /**\n    * Initializes animation.\n    * @private\n    */ function animateInit() {\n            if (animating) {\n                return;\n            }\n            animating = true;\n            animate();\n        }\n        /**\n    * Animates view, using requestAnimationFrame to trigger rendering.\n    * @private\n    */ function animate() {\n            render();\n            if (autoRotateStart) {\n                clearTimeout(autoRotateStart);\n            }\n            if (isUserInteracting || orientation === true) {\n                requestAnimationFrame(animate);\n            } else if (keysDown[0] || keysDown[1] || keysDown[2] || keysDown[3] || keysDown[4] || keysDown[5] || keysDown[6] || keysDown[7] || keysDown[8] || keysDown[9] || config.autoRotate || animatedMove.pitch || animatedMove.yaw || animatedMove.hfov || Math.abs(speed.yaw) > 0.01 || Math.abs(speed.pitch) > 0.01 || Math.abs(speed.hfov) > 0.01) {\n                keyRepeat();\n                if (config.autoRotateInactivityDelay >= 0 && autoRotateSpeed && Date.now() - latestInteraction > config.autoRotateInactivityDelay && !config.autoRotate) {\n                    config.autoRotate = autoRotateSpeed;\n                    _this.lookAt(origPitch, undefined, origHfov, 3000);\n                }\n                requestAnimationFrame(animate);\n            } else if (renderer && (renderer.isLoading() || config.dynamic === true && update)) {\n                requestAnimationFrame(animate);\n            } else {\n                animating = false;\n                prevTime = undefined;\n                var autoRotateStartTime = config.autoRotateInactivityDelay - (Date.now() - latestInteraction);\n                if (autoRotateStartTime > 0) {\n                    autoRotateStart = setTimeout(function() {\n                        config.autoRotate = autoRotateSpeed;\n                        _this.lookAt(origPitch, undefined, origHfov, 3000);\n                        animateInit();\n                    }, autoRotateStartTime);\n                } else if (config.autoRotateInactivityDelay >= 0 && autoRotateSpeed) {\n                    config.autoRotate = autoRotateSpeed;\n                    _this.lookAt(origPitch, undefined, origHfov, 3000);\n                    animateInit();\n                }\n            }\n        }\n        /**\n    * Renders panorama view.\n    * @private\n    */ function render() {\n            var tmpyaw;\n            if (loaded) {\n                if (config.yaw > 180) {\n                    config.yaw -= 360;\n                } else if (config.yaw < -180) {\n                    config.yaw += 360;\n                }\n                // Keep a tmp value of yaw for autoRotate comparison later\n                tmpyaw = config.yaw;\n                // Optionally avoid showing background (empty space) on left or right by adapting min/max yaw\n                var hoffcut = 0, voffcut = 0;\n                if (config.avoidShowingBackground) {\n                    var canvas = renderer.getCanvas(), hfov2 = config.hfov / 2, vfov2 = Math.atan2(Math.tan(hfov2 / 180 * Math.PI), canvas.width / canvas.height) * 180 / Math.PI, transposed = config.vaov > config.haov;\n                    if (transposed) {\n                        voffcut = vfov2 * (1 - Math.min(Math.cos((config.pitch - hfov2) / 180 * Math.PI), Math.cos((config.pitch + hfov2) / 180 * Math.PI)));\n                    } else {\n                        hoffcut = hfov2 * (1 - Math.min(Math.cos((config.pitch - vfov2) / 180 * Math.PI), Math.cos((config.pitch + vfov2) / 180 * Math.PI)));\n                    }\n                }\n                // Ensure the yaw is within min and max allowed\n                var yawRange = config.maxYaw - config.minYaw, minYaw = -180, maxYaw = 180;\n                if (yawRange < 360) {\n                    minYaw = config.minYaw + config.hfov / 2 + hoffcut;\n                    maxYaw = config.maxYaw - config.hfov / 2 - hoffcut;\n                    if (yawRange < config.hfov) {\n                        // Lock yaw to average of min and max yaw when both can be seen at once\n                        minYaw = maxYaw = (minYaw + maxYaw) / 2;\n                    }\n                    config.yaw = Math.max(minYaw, Math.min(maxYaw, config.yaw));\n                }\n                // Check if we autoRotate in a limited by min and max yaw\n                // If so reverse direction\n                if (config.autoRotate !== false && tmpyaw != config.yaw && prevTime !== undefined) {\n                    // this condition prevents changing the direction initially\n                    config.autoRotate *= -1;\n                }\n                // Ensure the calculated pitch is within min and max allowed\n                var canvas = renderer.getCanvas();\n                var vfov = 2 * Math.atan(Math.tan(config.hfov / 180 * Math.PI * 0.5) / (canvas.width / canvas.height)) / Math.PI * 180;\n                var minPitch = config.minPitch + vfov / 2, maxPitch = config.maxPitch - vfov / 2;\n                var pitchRange = config.maxPitch - config.minPitch;\n                if (pitchRange < vfov) {\n                    // Lock pitch to average of min and max pitch when both can be seen at once\n                    minPitch = maxPitch = (minPitch + maxPitch) / 2;\n                }\n                if (isNaN(minPitch)) {\n                    minPitch = -90;\n                }\n                if (isNaN(maxPitch)) {\n                    maxPitch = 90;\n                }\n                config.pitch = Math.max(minPitch, Math.min(maxPitch, config.pitch));\n                renderer.render(config.pitch * Math.PI / 180, config.yaw * Math.PI / 180, config.hfov * Math.PI / 180, {\n                    roll: config.roll * Math.PI / 180\n                });\n                renderHotSpots();\n                // Update compass\n                if (config.compass) {\n                    compass.style.transform = \"rotate(\" + (-config.yaw - config.northOffset) + \"deg)\";\n                    compass.style.webkitTransform = \"rotate(\" + (-config.yaw - config.northOffset) + \"deg)\";\n                }\n                if (config.onRender) {\n                    config.onRender();\n                }\n            }\n        }\n        /**\n    * Creates a new quaternion.\n    * @private\n    * @constructor\n    * @param {Number} w - W value\n    * @param {Number} x - X value\n    * @param {Number} y - Y value\n    * @param {Number} z - Z value\n    */ function Quaternion(w, x, y, z) {\n            this.w = w;\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n        /**\n    * Multiplies quaternions.\n    * @private\n    * @param {Quaternion} q - Quaternion to multiply\n    * @returns {Quaternion} Result of multiplication\n    */ Quaternion.prototype.multiply = function(q) {\n            return new Quaternion(this.w * q.w - this.x * q.x - this.y * q.y - this.z * q.z, this.x * q.w + this.w * q.x + this.y * q.z - this.z * q.y, this.y * q.w + this.w * q.y + this.z * q.x - this.x * q.z, this.z * q.w + this.w * q.z + this.x * q.y - this.y * q.x);\n        };\n        /**\n    * Converts quaternion to Euler angles.\n    * @private\n    * @returns {Number[]} [phi angle, theta angle, psi angle]\n    */ Quaternion.prototype.toEulerAngles = function() {\n            var phi = Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y)), theta = Math.asin(2 * (this.w * this.y - this.z * this.x)), psi = Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z));\n            return [\n                phi,\n                theta,\n                psi\n            ];\n        };\n        /**\n    * Converts device orientation API Tait-Bryan angles to a quaternion.\n    * @private\n    * @param {Number} alpha - Alpha angle (in degrees)\n    * @param {Number} beta - Beta angle (in degrees)\n    * @param {Number} gamma - Gamma angle (in degrees)\n    * @returns {Quaternion} Orientation quaternion\n    */ function taitBryanToQuaternion(alpha, beta, gamma) {\n            var r = [\n                beta ? beta * Math.PI / 180 / 2 : 0,\n                gamma ? gamma * Math.PI / 180 / 2 : 0,\n                alpha ? alpha * Math.PI / 180 / 2 : 0\n            ];\n            var c = [\n                Math.cos(r[0]),\n                Math.cos(r[1]),\n                Math.cos(r[2])\n            ], s = [\n                Math.sin(r[0]),\n                Math.sin(r[1]),\n                Math.sin(r[2])\n            ];\n            return new Quaternion(c[0] * c[1] * c[2] - s[0] * s[1] * s[2], s[0] * c[1] * c[2] - c[0] * s[1] * s[2], c[0] * s[1] * c[2] + s[0] * c[1] * s[2], c[0] * c[1] * s[2] + s[0] * s[1] * c[2]);\n        }\n        /**\n    * Computes current device orientation quaternion from device orientation API\n    * Tait-Bryan angles.\n    * @private\n    * @param {Number} alpha - Alpha angle (in degrees)\n    * @param {Number} beta - Beta angle (in degrees)\n    * @param {Number} gamma - Gamma angle (in degrees)\n    * @returns {Quaternion} Orientation quaternion\n    */ function computeQuaternion(alpha, beta, gamma) {\n            // Convert Tait-Bryan angles to quaternion\n            var quaternion = taitBryanToQuaternion(alpha, beta, gamma);\n            // Apply world transform\n            quaternion = quaternion.multiply(new Quaternion(Math.sqrt(0.5), -Math.sqrt(0.5), 0, 0));\n            // Apply screen transform\n            var angle = window1.orientation ? -window1.orientation * Math.PI / 180 / 2 : 0;\n            return quaternion.multiply(new Quaternion(Math.cos(angle), 0, -Math.sin(angle), 0));\n        }\n        /**\n    * Event handler for device orientation API. Controls pointing.\n    * @private\n    * @param {DeviceOrientationEvent} event - Device orientation event.\n    */ function orientationListener(e) {\n            var q = computeQuaternion(e.alpha, e.beta, e.gamma).toEulerAngles();\n            if (typeof orientation === \"number\" && orientation < 10) {\n                // This kludge is necessary because iOS sometimes provides a few stale\n                // device orientation events when the listener is removed and then\n                // readded. Thus, we skip the first 10 events to prevent this from\n                // causing problems.\n                orientation += 1;\n            } else if (orientation === 10) {\n                // Record starting yaw to prevent jumping\n                orientationYawOffset = q[2] / Math.PI * 180 + config.yaw;\n                orientation = true;\n                requestAnimationFrame(animate);\n            } else {\n                config.pitch = q[0] / Math.PI * 180;\n                config.roll = -q[1] / Math.PI * 180;\n                config.yaw = -q[2] / Math.PI * 180 + orientationYawOffset;\n            }\n        }\n        /**\n    * Initializes renderer.\n    * @private\n    */ function renderInit() {\n            try {\n                var params = {};\n                if (config.horizonPitch !== undefined) {\n                    params.horizonPitch = config.horizonPitch * Math.PI / 180;\n                }\n                if (config.horizonRoll !== undefined) {\n                    params.horizonRoll = config.horizonRoll * Math.PI / 180;\n                }\n                if (config.backgroundColor !== undefined) {\n                    params.backgroundColor = config.backgroundColor;\n                }\n                renderer.init(panoImage, config.type, config.dynamic, config.haov * Math.PI / 180, config.vaov * Math.PI / 180, config.vOffset * Math.PI / 180, renderInitCallback, params);\n                if (config.dynamic !== true) {\n                    // Allow image to be garbage collected\n                    panoImage = undefined;\n                }\n            } catch (event1) {\n                // Panorama not loaded\n                // Display error if there is a bad texture\n                if (event1.type == \"webgl error\" || event1.type == \"no webgl\") {\n                    anError();\n                } else if (event1.type == \"webgl size error\") {\n                    anError(config.strings.textureSizeError.replace(\"%s\", event1.width).replace(\"%s\", event1.maxWidth));\n                } else {\n                    anError(config.strings.unknownError);\n                    throw event1;\n                }\n            }\n        }\n        /**\n    * Triggered when render initialization finishes. Handles fading between\n    * scenes as well as showing the compass and hotspots and hiding the loading\n    * display.\n    * @private\n    */ function renderInitCallback() {\n            // Fade if specified\n            if (config.sceneFadeDuration && renderer.fadeImg !== undefined) {\n                renderer.fadeImg.style.opacity = 0;\n                // Remove image\n                var fadeImg = renderer.fadeImg;\n                delete renderer.fadeImg;\n                setTimeout(function() {\n                    renderContainer.removeChild(fadeImg);\n                    fireEvent(\"scenechangefadedone\");\n                }, config.sceneFadeDuration);\n            }\n            // Show compass if applicable\n            if (config.compass) {\n                compass.style.display = \"inline\";\n            } else {\n                compass.style.display = \"none\";\n            }\n            // Show hotspots\n            createHotSpots();\n            // Hide loading display\n            infoDisplay.load.box.style.display = \"none\";\n            if (preview !== undefined) {\n                renderContainer.removeChild(preview);\n                preview = undefined;\n            }\n            loaded = true;\n            fireEvent(\"load\");\n            animateInit();\n        }\n        /**\n    * Creates hot spot element for the current scene.\n    * @private\n    * @param {Object} hs - The configuration for the hotspot\n    */ function createHotSpot(hs) {\n            // Make sure hot spot pitch and yaw are numbers\n            hs.pitch = Number(hs.pitch) || 0;\n            hs.yaw = Number(hs.yaw) || 0;\n            var div = document1.createElement(\"div\");\n            div.className = \"pnlm-hotspot-base\";\n            if (hs.cssClass) {\n                div.className += \" \" + hs.cssClass;\n            } else {\n                div.className += \" pnlm-hotspot pnlm-sprite pnlm-\" + escapeHTML(hs.type);\n            }\n            var span = document1.createElement(\"span\");\n            if (hs.text) {\n                span.innerHTML = escapeHTML(hs.text);\n            }\n            var a;\n            if (hs.video) {\n                var video = document1.createElement(\"video\"), p = hs.video;\n                if (config.basePath && !absoluteURL(p)) {\n                    p = config.basePath + p;\n                }\n                video.src = sanitizeURL(p);\n                video.controls = true;\n                video.style.width = hs.width + \"px\";\n                renderContainer.appendChild(div);\n                span.appendChild(video);\n            } else if (hs.image) {\n                var p = hs.image;\n                if (config.basePath && !absoluteURL(p)) {\n                    p = config.basePath + p;\n                }\n                a = document1.createElement(\"a\");\n                a.href = sanitizeURL(hs.URL ? hs.URL : p);\n                a.target = \"_blank\";\n                span.appendChild(a);\n                var image = document1.createElement(\"img\");\n                image.src = sanitizeURL(p);\n                image.style.width = hs.width + \"px\";\n                image.style.paddingTop = \"5px\";\n                renderContainer.appendChild(div);\n                a.appendChild(image);\n                span.style.maxWidth = \"initial\";\n            } else if (hs.URL) {\n                a = document1.createElement(\"a\");\n                a.href = sanitizeURL(hs.URL);\n                a.target = \"_blank\";\n                renderContainer.appendChild(a);\n                div.className += \" pnlm-pointer\";\n                span.className += \" pnlm-pointer\";\n                a.appendChild(div);\n            } else {\n                if (hs.sceneId) {\n                    div.onclick = div.ontouchend = function() {\n                        if (!div.clicked) {\n                            div.clicked = true;\n                            loadScene(hs.sceneId, hs.targetPitch, hs.targetYaw, hs.targetHfov);\n                        }\n                        return false;\n                    };\n                    div.className += \" pnlm-pointer\";\n                    span.className += \" pnlm-pointer\";\n                }\n                renderContainer.appendChild(div);\n            }\n            if (hs.createTooltipFunc) {\n                hs.createTooltipFunc(div, hs.createTooltipArgs);\n            } else if (hs.text || hs.video || hs.image) {\n                div.classList.add(\"pnlm-tooltip\");\n                div.appendChild(span);\n                span.style.width = span.scrollWidth - 20 + \"px\";\n                span.style.marginLeft = -(span.scrollWidth - div.offsetWidth) / 2 + \"px\";\n                span.style.marginTop = -span.scrollHeight - 12 + \"px\";\n            }\n            if (hs.clickHandlerFunc) {\n                div.addEventListener(\"click\", function(e) {\n                    hs.clickHandlerFunc(e, hs.clickHandlerArgs);\n                }, \"false\");\n                div.className += \" pnlm-pointer\";\n                span.className += \" pnlm-pointer\";\n            }\n            hs.div = div;\n        }\n        ;\n        /**\n    * Creates hot spot elements for the current scene.\n    * @private\n    */ function createHotSpots() {\n            if (hotspotsCreated) {\n                return;\n            }\n            if (!config.hotSpots) {\n                config.hotSpots = [];\n            } else {\n                // Sort by pitch so tooltip is never obscured by another hot spot\n                config.hotSpots = config.hotSpots.sort(function(a, b) {\n                    return a.pitch < b.pitch;\n                });\n                config.hotSpots.forEach(createHotSpot);\n            }\n            hotspotsCreated = true;\n            renderHotSpots();\n        }\n        /**\n    * Destroys currently created hot spot elements.\n    * @private\n    */ function destroyHotSpots() {\n            var hs = config.hotSpots;\n            hotspotsCreated = false;\n            delete config.hotSpots;\n            if (hs) {\n                for(var i = 0; i < hs.length; i++){\n                    var current = hs[i].div;\n                    while(current.parentNode != renderContainer){\n                        current = current.parentNode;\n                    }\n                    renderContainer.removeChild(current);\n                    delete hs[i].div;\n                }\n            }\n        }\n        /**\n    * Renders hot spot, updating its position and visibility.\n    * @private\n    */ function renderHotSpot(hs) {\n            var hsPitchSin = Math.sin(hs.pitch * Math.PI / 180), hsPitchCos = Math.cos(hs.pitch * Math.PI / 180), configPitchSin = Math.sin(config.pitch * Math.PI / 180), configPitchCos = Math.cos(config.pitch * Math.PI / 180), yawCos = Math.cos((-hs.yaw + config.yaw) * Math.PI / 180);\n            var z = hsPitchSin * configPitchSin + hsPitchCos * yawCos * configPitchCos;\n            if (hs.yaw <= 90 && hs.yaw > -90 && z <= 0 || (hs.yaw > 90 || hs.yaw <= -90) && z <= 0) {\n                hs.div.style.visibility = \"hidden\";\n            } else {\n                var yawSin = Math.sin((-hs.yaw + config.yaw) * Math.PI / 180), hfovTan = Math.tan(config.hfov * Math.PI / 360);\n                hs.div.style.visibility = \"visible\";\n                // Subpixel rendering doesn't work in Firefox\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=739176\n                var canvas = renderer.getCanvas(), canvasWidth = canvas.clientWidth, canvasHeight = canvas.clientHeight;\n                var coord = [\n                    -canvasWidth / hfovTan * yawSin * hsPitchCos / z / 2,\n                    -canvasWidth / hfovTan * (hsPitchSin * configPitchCos - hsPitchCos * yawCos * configPitchSin) / z / 2\n                ];\n                // Apply roll\n                var rollSin = Math.sin(config.roll * Math.PI / 180), rollCos = Math.cos(config.roll * Math.PI / 180);\n                coord = [\n                    coord[0] * rollCos - coord[1] * rollSin,\n                    coord[0] * rollSin + coord[1] * rollCos\n                ];\n                // Apply transform\n                coord[0] += (canvasWidth - hs.div.offsetWidth) / 2;\n                coord[1] += (canvasHeight - hs.div.offsetHeight) / 2;\n                var transform = \"translate(\" + coord[0] + \"px, \" + coord[1] + \"px) translateZ(9999px) rotate(\" + config.roll + \"deg)\";\n                hs.div.style.webkitTransform = transform;\n                hs.div.style.MozTransform = transform;\n                hs.div.style.transform = transform;\n            }\n        }\n        /**\n    * Renders hot spots, updating their positions and visibility.\n    * @private\n    */ function renderHotSpots() {\n            config.hotSpots.forEach(renderHotSpot);\n        }\n        /**\n    * Merges a scene configuration into the current configuration.\n    * @private\n    * @param {string} sceneId - Identifier of scene configuration to merge in.\n    */ function mergeConfig(sceneId) {\n            config = {};\n            var k, s;\n            var photoSphereExcludes = [\n                \"haov\",\n                \"vaov\",\n                \"vOffset\",\n                \"northOffset\",\n                \"horizonPitch\",\n                \"horizonRoll\"\n            ];\n            specifiedPhotoSphereExcludes = [];\n            // Merge default config\n            for(k in defaultConfig){\n                if (defaultConfig.hasOwnProperty(k)) {\n                    config[k] = defaultConfig[k];\n                }\n            }\n            // Merge default scene config\n            for(k in initialConfig.default){\n                if (initialConfig.default.hasOwnProperty(k)) {\n                    if (k == \"strings\") {\n                        for(s in initialConfig.default.strings){\n                            if (initialConfig.default.strings.hasOwnProperty(s)) {\n                                config.strings[s] = escapeHTML(initialConfig.default.strings[s]);\n                            }\n                        }\n                    } else {\n                        config[k] = initialConfig.default[k];\n                        if (photoSphereExcludes.indexOf(k) >= 0) {\n                            specifiedPhotoSphereExcludes.push(k);\n                        }\n                    }\n                }\n            }\n            // Merge current scene config\n            if (sceneId !== null && sceneId !== \"\" && initialConfig.scenes && initialConfig.scenes[sceneId]) {\n                var scene = initialConfig.scenes[sceneId];\n                for(k in scene){\n                    if (scene.hasOwnProperty(k)) {\n                        if (k == \"strings\") {\n                            for(s in scene.strings){\n                                if (scene.strings.hasOwnProperty(s)) {\n                                    config.strings[s] = escapeHTML(scene.strings[s]);\n                                }\n                            }\n                        } else {\n                            config[k] = scene[k];\n                            if (photoSphereExcludes.indexOf(k) >= 0) {\n                                specifiedPhotoSphereExcludes.push(k);\n                            }\n                        }\n                    }\n                }\n                config.scene = sceneId;\n            }\n            // Merge initial config\n            for(k in initialConfig){\n                if (initialConfig.hasOwnProperty(k)) {\n                    if (k == \"strings\") {\n                        for(s in initialConfig.strings){\n                            if (initialConfig.strings.hasOwnProperty(s)) {\n                                config.strings[s] = escapeHTML(initialConfig.strings[s]);\n                            }\n                        }\n                    } else {\n                        config[k] = initialConfig[k];\n                        if (photoSphereExcludes.indexOf(k) >= 0) {\n                            specifiedPhotoSphereExcludes.push(k);\n                        }\n                    }\n                }\n            }\n        }\n        /**\n    * Processes configuration options.\n    * @param {boolean} [isPreview] - Whether or not the preview is being displayed\n    * @private\n    */ function processOptions(isPreview) {\n            isPreview = isPreview ? isPreview : false;\n            // Process preview first so it always loads before the browser hits its\n            // maximum number of connections to a server as can happen with cubic\n            // panoramas\n            if (isPreview && \"preview\" in config) {\n                var p = config.preview;\n                if (config.basePath && !absoluteURL(p)) {\n                    p = config.basePath + p;\n                }\n                preview = document1.createElement(\"div\");\n                preview.className = \"pnlm-preview-img\";\n                preview.style.backgroundImage = \"url('\" + sanitizeURLForCss(p) + \"')\";\n                renderContainer.appendChild(preview);\n            }\n            // Handle different preview values\n            var title = config.title, author = config.author;\n            if (isPreview) {\n                if (\"previewTitle\" in config) {\n                    config.title = config.previewTitle;\n                }\n                if (\"previewAuthor\" in config) {\n                    config.author = config.previewAuthor;\n                }\n            }\n            // Reset title / author display\n            if (!config.hasOwnProperty(\"title\")) {\n                infoDisplay.title.innerHTML = \"\";\n            }\n            if (!config.hasOwnProperty(\"author\")) {\n                infoDisplay.author.innerHTML = \"\";\n            }\n            if (!config.hasOwnProperty(\"title\") && !config.hasOwnProperty(\"author\")) {\n                infoDisplay.container.style.display = \"none\";\n            }\n            // Fill in load button label and loading box text\n            controls.load.innerHTML = \"<p>\" + config.strings.loadButtonLabel + \"</p>\";\n            infoDisplay.load.boxp.innerHTML = config.strings.loadingLabel;\n            // Process other options\n            for(var key in config){\n                if (config.hasOwnProperty(key)) {\n                    switch(key){\n                        case \"title\":\n                            infoDisplay.title.innerHTML = escapeHTML(config[key]);\n                            infoDisplay.container.style.display = \"inline\";\n                            break;\n                        case \"author\":\n                            infoDisplay.author.innerHTML = config.strings.bylineLabel.replace(\"%s\", escapeHTML(config[key]));\n                            infoDisplay.container.style.display = \"inline\";\n                            break;\n                        case \"fallback\":\n                            var link = document1.createElement(\"a\");\n                            link.href = sanitizeURL(config[key]);\n                            link.target = \"_blank\";\n                            link.textContent = \"Click here to view this panorama in an alternative viewer.\";\n                            var message = document1.createElement(\"p\");\n                            message.textContent = \"Your browser does not support WebGL.\";\n                            message.appendChild(document1.createElement(\"br\"));\n                            message.appendChild(link);\n                            infoDisplay.errorMsg.innerHTML = \"\"; // Removes all children nodes\n                            infoDisplay.errorMsg.appendChild(message);\n                            break;\n                        case \"hfov\":\n                            setHfov(Number(config[key]));\n                            break;\n                        case \"autoLoad\":\n                            if (config[key] === true && renderer === undefined) {\n                                // Show loading box\n                                infoDisplay.load.box.style.display = \"inline\";\n                                // Hide load button\n                                controls.load.style.display = \"none\";\n                                // Initialize\n                                init();\n                            }\n                            break;\n                        case \"showZoomCtrl\":\n                            if (config[key] && config.showControls != false) {\n                                // Show zoom controls\n                                controls.zoom.style.display = \"block\";\n                            } else {\n                                // Hide zoom controls\n                                controls.zoom.style.display = \"none\";\n                            }\n                            break;\n                        case \"showFullscreenCtrl\":\n                            if (config[key] && config.showControls != false && (\"fullscreen\" in document1 || \"mozFullScreen\" in document1 || \"webkitIsFullScreen\" in document1 || \"msFullscreenElement\" in document1)) {\n                                // Show fullscreen control\n                                controls.fullscreen.style.display = \"block\";\n                            } else {\n                                // Hide fullscreen control\n                                controls.fullscreen.style.display = \"none\";\n                            }\n                            break;\n                        case \"hotSpotDebug\":\n                            if (config[key]) {\n                                hotSpotDebugIndicator.style.display = \"block\";\n                            } else {\n                                hotSpotDebugIndicator.style.display = \"none\";\n                            }\n                            break;\n                        case \"showControls\":\n                            if (!config[key]) {\n                                controls.orientation.style.display = \"none\";\n                                controls.zoom.style.display = \"none\";\n                                controls.fullscreen.style.display = \"none\";\n                            }\n                            break;\n                        case \"orientationOnByDefault\":\n                            if (config[key]) {\n                                if (orientationSupport === undefined) {\n                                    startOrientationIfSupported = true;\n                                } else if (orientationSupport === true) {\n                                    startOrientation();\n                                }\n                            }\n                            break;\n                    }\n                }\n            }\n            if (isPreview) {\n                // Restore original values if changed for preview\n                if (title) {\n                    config.title = title;\n                } else {\n                    delete config.title;\n                }\n                if (author) {\n                    config.author = author;\n                } else {\n                    delete config.author;\n                }\n            }\n        }\n        /**\n    * Toggles fullscreen mode.\n    * @private\n    */ function toggleFullscreen() {\n            if (loaded && !error) {\n                if (!fullscreenActive) {\n                    try {\n                        if (container.requestFullscreen) {\n                            container.requestFullscreen();\n                        } else if (container.mozRequestFullScreen) {\n                            container.mozRequestFullScreen();\n                        } else if (container.msRequestFullscreen) {\n                            container.msRequestFullscreen();\n                        } else {\n                            container.webkitRequestFullScreen();\n                        }\n                    } catch (event1) {\n                    // Fullscreen doesn't work\n                    }\n                } else {\n                    if (document1.exitFullscreen) {\n                        document1.exitFullscreen();\n                    } else if (document1.mozCancelFullScreen) {\n                        document1.mozCancelFullScreen();\n                    } else if (document1.webkitCancelFullScreen) {\n                        document1.webkitCancelFullScreen();\n                    } else if (document1.msExitFullscreen) {\n                        document1.msExitFullscreen();\n                    }\n                }\n            }\n        }\n        /**\n    * Event handler for fullscreen changes.\n    * @private\n    */ function onFullScreenChange() {\n            var isFullScreen = window1.innerWidth == screen.width && window1.innerHeight == screen.height;\n            if (document1.fullscreen || document1.mozFullScreen || document1.webkitIsFullScreen || document1.msFullscreenElement || isFullScreen) {\n                controls.fullscreen.classList.add(\"pnlm-fullscreen-toggle-button-active\");\n                fullscreenActive = true;\n            } else {\n                controls.fullscreen.classList.remove(\"pnlm-fullscreen-toggle-button-active\");\n                fullscreenActive = false;\n            }\n            // Resize renderer (deal with browser quirks and fixes #155)\n            renderer.resize();\n            setHfov(config.hfov);\n            animateInit();\n        }\n        /**\n    * Increases panorama zoom. For use with zoom button.\n    * @private\n    */ function zoomIn() {\n            if (loaded) {\n                setHfov(config.hfov - 5);\n                animateInit();\n            }\n        }\n        /**\n    * Decreases panorama zoom. For use with zoom button.\n    * @private\n    */ function zoomOut() {\n            if (loaded) {\n                setHfov(config.hfov + 5);\n                animateInit();\n            }\n        }\n        /**\n    * Clamps horzontal field of view to viewer's limits.\n    * @private\n    * @param {number} hfov - Input horizontal field of view (in degrees)\n    * @return {number} - Clamped horizontal field of view (in degrees)\n    */ function constrainHfov(hfov) {\n            // Keep field of view within bounds\n            var minHfov = config.minHfov;\n            if (config.type == \"multires\" && renderer) {\n                minHfov = Math.min(minHfov, renderer.getCanvas().width / (config.multiRes.cubeResolution / 90 * 0.9));\n            }\n            if (minHfov > config.maxHfov) {\n                // Don't change view if bounds don't make sense\n                console.log(\"HFOV bounds do not make sense (minHfov > maxHfov).\");\n                return config.hfov;\n            }\n            var newHfov = config.hfov;\n            if (hfov < minHfov) {\n                newHfov = minHfov;\n            } else if (hfov > config.maxHfov) {\n                newHfov = config.maxHfov;\n            } else {\n                newHfov = hfov;\n            }\n            // Optionally avoid showing background (empty space) on top or bottom by adapting newHfov\n            if (config.avoidShowingBackground && renderer) {\n                var canvas = renderer.getCanvas();\n                newHfov = Math.min(newHfov, Math.atan(Math.tan((config.maxPitch - config.minPitch) / 360 * Math.PI) / canvas.height * canvas.width) * 360 / Math.PI);\n            }\n            return newHfov;\n        }\n        /**\n    * Sets viewer's horizontal field of view.\n    * @private\n    * @param {number} hfov - Desired horizontal field of view in degrees.\n    */ function setHfov(hfov) {\n            config.hfov = constrainHfov(hfov);\n        }\n        /**\n    * Stops auto rotation and animated moves.\n    * @private\n    */ function stopAnimation() {\n            animatedMove = {};\n            autoRotateSpeed = config.autoRotate ? config.autoRotate : autoRotateSpeed;\n            config.autoRotate = false;\n        }\n        /**\n    * Loads panorama.\n    * @private\n    */ function load() {\n            // Since WebGL error handling is very general, first we clear any error box\n            // since it is a new scene and the error from previous maybe because of lacking\n            // memory etc and not because of a lack of WebGL support etc\n            clearError();\n            loaded = false;\n            controls.load.style.display = \"none\";\n            infoDisplay.load.box.style.display = \"inline\";\n            init();\n        }\n        /**\n    * Loads scene.\n    * @private\n    * @param {string} sceneId - Identifier of scene configuration to merge in.\n    * @param {number} targetPitch - Pitch viewer should be centered on once scene loads.\n    * @param {number} targetYaw - Yaw viewer should be centered on once scene loads.\n    * @param {number} targetHfov - HFOV viewer should use once scene loads.\n    * @param {boolean} [fadeDone] - If `true`, fade setup is skipped.\n    */ function loadScene(sceneId, targetPitch, targetYaw, targetHfov, fadeDone) {\n            loaded = false;\n            animatedMove = {};\n            // Set up fade if specified\n            var fadeImg, workingPitch, workingYaw, workingHfov;\n            if (config.sceneFadeDuration && !fadeDone) {\n                var data = renderer.render(config.pitch * Math.PI / 180, config.yaw * Math.PI / 180, config.hfov * Math.PI / 180, {\n                    returnImage: true\n                });\n                if (data !== undefined) {\n                    fadeImg = new Image();\n                    fadeImg.className = \"pnlm-fade-img\";\n                    fadeImg.style.transition = \"opacity \" + config.sceneFadeDuration / 1000 + \"s\";\n                    fadeImg.style.width = \"100%\";\n                    fadeImg.style.height = \"100%\";\n                    fadeImg.onload = function() {\n                        loadScene(sceneId, targetPitch, targetYaw, targetHfov, true);\n                    };\n                    fadeImg.src = data;\n                    renderContainer.appendChild(fadeImg);\n                    renderer.fadeImg = fadeImg;\n                    return;\n                }\n            }\n            // Set new pointing\n            if (targetPitch === \"same\") {\n                workingPitch = config.pitch;\n            } else {\n                workingPitch = targetPitch;\n            }\n            if (targetYaw === \"same\") {\n                workingYaw = config.yaw;\n            } else if (targetYaw === \"sameAzimuth\") {\n                workingYaw = config.yaw + (config.northOffset || 0) - (initialConfig.scenes[sceneId].northOffset || 0);\n            } else {\n                workingYaw = targetYaw;\n            }\n            if (targetHfov === \"same\") {\n                workingHfov = config.hfov;\n            } else {\n                workingHfov = targetHfov;\n            }\n            // Destroy hot spots from previous scene\n            destroyHotSpots();\n            // Create the new config for the scene\n            mergeConfig(sceneId);\n            // Stop motion\n            speed.yaw = speed.pitch = speed.hfov = 0;\n            // Reload scene\n            processOptions();\n            if (workingPitch !== undefined) {\n                config.pitch = workingPitch;\n            }\n            if (workingYaw !== undefined) {\n                config.yaw = workingYaw;\n            }\n            if (workingHfov !== undefined) {\n                config.hfov = workingHfov;\n            }\n            fireEvent(\"scenechange\", sceneId);\n            load();\n        }\n        /**\n    * Stop using device orientation.\n    * @private\n    */ function stopOrientation() {\n            window1.removeEventListener(\"deviceorientation\", orientationListener);\n            controls.orientation.classList.remove(\"pnlm-orientation-button-active\");\n            orientation = false;\n        }\n        /**\n    * Start using device orientation.\n    * @private\n    */ function startOrientation() {\n            orientation = 1;\n            window1.addEventListener(\"deviceorientation\", orientationListener);\n            controls.orientation.classList.add(\"pnlm-orientation-button-active\");\n        }\n        /**\n    * Escapes HTML string (to mitigate possible DOM XSS attacks).\n    * @private\n    * @param {string} s - String to escape\n    * @returns {string} Escaped string\n    */ function escapeHTML(s) {\n            if (!initialConfig.escapeHTML) {\n                return String(s).split(\"\\n\").join(\"<br>\");\n            }\n            return String(s).split(/&/g).join(\"&amp;\").split('\"').join(\"&quot;\").split(\"'\").join(\"&#39;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\").split(\"/\").join(\"&#x2f;\").split(\"\\n\").join(\"<br>\"); // Allow line breaks\n        }\n        /**\n    * Removes possibility of XSS attacks with URLs.\n    * The URL cannot be of protocol 'javascript'.\n    * @private\n    * @param {string} url - URL to sanitize\n    * @returns {string} Sanitized URL\n    */ function sanitizeURL(url) {\n            if (url.trim().toLowerCase().indexOf(\"javascript:\") === 0) {\n                return \"about:blank\";\n            }\n            return url;\n        }\n        /**\n    * Removes possibility of XSS atacks with URLs for CSS.\n    * The URL will be sanitized with `sanitizeURL()` and single quotes\n    * and double quotes escaped.\n    * @private\n    * @param {string} url - URL to sanitize\n    * @returns {string} Sanitized URL\n    */ function sanitizeURLForCss(url) {\n            return sanitizeURL(url).replace(/\"/g, \"%22\").replace(/'/g, \"%27\");\n        }\n        /**\n    * Checks whether or not a panorama is loaded.\n    * @memberof Viewer\n    * @instance\n    * @returns {boolean} `true` if a panorama is loaded, else `false`\n    */ this.isLoaded = function() {\n            return Boolean(loaded);\n        };\n        /**\n    * Returns the pitch of the center of the view.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} Pitch in degrees\n    */ this.getPitch = function() {\n            return config.pitch;\n        };\n        /**\n    * Sets the pitch of the center of the view.\n    * @memberof Viewer\n    * @instance\n    * @param {number} pitch - Pitch in degrees\n    * @param {boolean|number} [animated=1000] - Animation duration in milliseconds or false for no animation\n    * @param {function} [callback] - Function to call when animation finishes\n    * @param {object} [callbackArgs] - Arguments to pass to callback function\n    * @returns {Viewer} `this`\n    */ this.setPitch = function(pitch, animated, callback, callbackArgs) {\n            animated = animated == undefined ? 1000 : Number(animated);\n            if (animated) {\n                animatedMove.pitch = {\n                    \"startTime\": Date.now(),\n                    \"startPosition\": config.pitch,\n                    \"endPosition\": pitch,\n                    \"duration\": animated,\n                    \"callback\": callback,\n                    \"callbackArgs\": callbackArgs\n                };\n            } else {\n                config.pitch = pitch;\n            }\n            animateInit();\n            return this;\n        };\n        /**\n    * Returns the minimum and maximum allowed pitches (in degrees).\n    * @memberof Viewer\n    * @instance\n    * @returns {number[]} [minimum pitch, maximum pitch]\n    */ this.getPitchBounds = function() {\n            return [\n                config.minPitch,\n                config.maxPitch\n            ];\n        };\n        /**\n    * Set the minimum and maximum allowed pitches (in degrees).\n    * @memberof Viewer\n    * @instance\n    * @param {number[]} bounds - [minimum pitch, maximum pitch]\n    * @returns {Viewer} `this`\n    */ this.setPitchBounds = function(bounds) {\n            config.minPitch = Math.max(-90, Math.min(bounds[0], 90));\n            config.maxPitch = Math.max(-90, Math.min(bounds[1], 90));\n            return this;\n        };\n        /**\n    * Returns the yaw of the center of the view.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} Yaw in degrees\n    */ this.getYaw = function() {\n            return config.yaw;\n        };\n        /**\n    * Sets the yaw of the center of the view.\n    * @memberof Viewer\n    * @instance\n    * @param {number} yaw - Yaw in degrees [-180, 180]\n    * @param {boolean|number} [animated=1000] - Animation duration in milliseconds or false for no animation\n    * @param {function} [callback] - Function to call when animation finishes\n    * @param {object} [callbackArgs] - Arguments to pass to callback function\n    * @returns {Viewer} `this`\n    */ this.setYaw = function(yaw, animated, callback, callbackArgs) {\n            animated = animated == undefined ? 1000 : Number(animated);\n            yaw = (yaw + 180) % 360 - 180; // Keep in bounds\n            if (animated) {\n                // Animate in shortest direction\n                if (config.yaw - yaw > 180) {\n                    yaw += 360;\n                } else if (yaw - config.yaw > 180) {\n                    yaw -= 360;\n                }\n                animatedMove.yaw = {\n                    \"startTime\": Date.now(),\n                    \"startPosition\": config.yaw,\n                    \"endPosition\": yaw,\n                    \"duration\": animated,\n                    \"callback\": callback,\n                    \"callbackArgs\": callbackArgs\n                };\n            } else {\n                config.yaw = yaw;\n            }\n            animateInit();\n            return this;\n        };\n        /**\n    * Returns the minimum and maximum allowed pitches (in degrees).\n    * @memberof Viewer\n    * @instance\n    * @returns {number[]} [yaw pitch, maximum yaw]\n    */ this.getYawBounds = function() {\n            return [\n                config.minYaw,\n                config.maxYaw\n            ];\n        };\n        /**\n    * Set the minimum and maximum allowed yaws (in degrees [-180, 180]).\n    * @memberof Viewer\n    * @instance\n    * @param {number[]} bounds - [minimum yaw, maximum yaw]\n    * @returns {Viewer} `this`\n    */ this.setYawBounds = function(bounds) {\n            config.minYaw = Math.max(-180, Math.min(bounds[0], 180));\n            config.maxYaw = Math.max(-180, Math.min(bounds[1], 180));\n            return this;\n        };\n        /**\n    * Returns the horizontal field of view.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} Horizontal field of view in degrees\n    */ this.getHfov = function() {\n            return config.hfov;\n        };\n        /**\n    * Sets the horizontal field of view.\n    * @memberof Viewer\n    * @instance\n    * @param {number} hfov - Horizontal field of view in degrees\n    * @param {boolean|number} [animated=1000] - Animation duration in milliseconds or false for no animation\n    * @param {function} [callback] - Function to call when animation finishes\n    * @param {object} [callbackArgs] - Arguments to pass to callback function\n    * @returns {Viewer} `this`\n    */ this.setHfov = function(hfov, animated, callback, callbackArgs) {\n            animated = animated == undefined ? 1000 : Number(animated);\n            if (animated) {\n                animatedMove.hfov = {\n                    \"startTime\": Date.now(),\n                    \"startPosition\": config.hfov,\n                    \"endPosition\": constrainHfov(hfov),\n                    \"duration\": animated,\n                    \"callback\": callback,\n                    \"callbackArgs\": callbackArgs\n                };\n            } else {\n                setHfov(hfov);\n            }\n            animateInit();\n            return this;\n        };\n        /**\n    * Returns the minimum and maximum allowed horizontal fields of view\n    * (in degrees).\n    * @memberof Viewer\n    * @instance\n    * @returns {number[]} [minimum hfov, maximum hfov]\n    */ this.getHfovBounds = function() {\n            return [\n                config.minHfov,\n                config.maxHfov\n            ];\n        };\n        /**\n    * Set the minimum and maximum allowed horizontal fields of view (in degrees).\n    * @memberof Viewer\n    * @instance\n    * @param {number[]} bounds - [minimum hfov, maximum hfov]\n    * @returns {Viewer} `this`\n    */ this.setHfovBounds = function(bounds) {\n            config.minHfov = Math.max(0, bounds[0]);\n            config.maxHfov = Math.max(0, bounds[1]);\n            return this;\n        };\n        /**\n    * Set a new view. Any parameters not specified remain the same.\n    * @memberof Viewer\n    * @instance\n    * @param {number} [pitch] - Target pitch\n    * @param {number} [yaw] - Target yaw\n    * @param {number} [hfov] - Target hfov\n    * @param {boolean|number} [animated=1000] - Animation duration in milliseconds or false for no animation\n    * @param {function} [callback] - Function to call when animation finishes\n    * @param {object} [callbackArgs] - Arguments to pass to callback function\n    * @returns {Viewer} `this`\n    */ this.lookAt = function(pitch, yaw, hfov, animated, callback, callbackArgs) {\n            animated = animated == undefined ? 1000 : Number(animated);\n            if (pitch !== undefined) {\n                this.setPitch(pitch, animated, callback, callbackArgs);\n                callback = undefined;\n            }\n            if (yaw !== undefined) {\n                this.setYaw(yaw, animated, callback, callbackArgs);\n                callback = undefined;\n            }\n            if (hfov !== undefined) {\n                this.setHfov(hfov, animated, callback, callbackArgs);\n            }\n            return this;\n        };\n        /**\n    * Returns the panorama's north offset.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} North offset in degrees\n    */ this.getNorthOffset = function() {\n            return config.northOffset;\n        };\n        /**\n    * Sets the panorama's north offset.\n    * @memberof Viewer\n    * @instance\n    * @param {number} heading - North offset in degrees\n    * @returns {Viewer} `this`\n    */ this.setNorthOffset = function(heading) {\n            config.northOffset = Math.min(360, Math.max(0, heading));\n            animateInit();\n            return this;\n        };\n        /**\n    * Returns the panorama's horizon roll.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} Horizon roll in degrees\n    */ this.getHorizonRoll = function() {\n            return config.horizonRoll;\n        };\n        /**\n    * Sets the panorama's horizon roll.\n    * @memberof Viewer\n    * @instance\n    * @param {number} roll - Horizon roll in degrees [-90, 90]\n    * @returns {Viewer} `this`\n    */ this.setHorizonRoll = function(roll) {\n            config.horizonRoll = Math.min(90, Math.max(-90, roll));\n            renderer.setPose(config.horizonPitch * Math.PI / 180, config.horizonRoll * Math.PI / 180);\n            animateInit();\n            return this;\n        };\n        /**\n    * Returns the panorama's horizon pitch.\n    * @memberof Viewer\n    * @instance\n    * @returns {number} Horizon pitch in degrees\n    */ this.getHorizonPitch = function() {\n            return config.horizonPitch;\n        };\n        /**\n    * Sets the panorama's horizon pitch.\n    * @memberof Viewer\n    * @instance\n    * @param {number} pitch - Horizon pitch in degrees [-90, 90]\n    * @returns {Viewer} `this`\n    */ this.setHorizonPitch = function(pitch) {\n            config.horizonPitch = Math.min(90, Math.max(-90, pitch));\n            renderer.setPose(config.horizonPitch * Math.PI / 180, config.horizonRoll * Math.PI / 180);\n            animateInit();\n            return this;\n        };\n        /**\n    * Start auto rotation.\n    * @memberof Viewer\n    * @instance\n    * @param {number} [speed] - Auto rotation speed / direction. If not specified, previous value is used.\n    * @returns {Viewer} `this`\n    */ this.startAutoRotate = function(speed) {\n            speed = speed || autoRotateSpeed || 1;\n            config.autoRotate = speed;\n            _this.lookAt(origPitch, undefined, origHfov, 3000);\n            animateInit();\n            return this;\n        };\n        /**\n    * Stop auto rotation.\n    * @memberof Viewer\n    * @instance\n    * @returns {Viewer} `this`\n    */ this.stopAutoRotate = function() {\n            autoRotateSpeed = config.autoRotate ? config.autoRotate : autoRotateSpeed;\n            config.autoRotate = false;\n            config.autoRotateInactivityDelay = -1;\n            return this;\n        };\n        /**\n    * Returns the panorama renderer.\n    * @memberof Viewer\n    * @instance\n    * @returns {Renderer}\n    */ this.getRenderer = function() {\n            return renderer;\n        };\n        /**\n    * Sets update flag for dynamic content.\n    * @memberof Viewer\n    * @instance\n    * @param {boolean} bool - Whether or not viewer should update even when still\n    * @returns {Viewer} `this`\n    */ this.setUpdate = function(bool) {\n            update = bool === true;\n            if (renderer === undefined) {\n                onImageLoad();\n            } else {\n                animateInit();\n            }\n            return this;\n        };\n        /**\n    * Calculate panorama pitch and yaw from location of mouse event.\n    * @memberof Viewer\n    * @instance\n    * @param {MouseEvent} event - Document mouse down event.\n    * @returns {number[]} [pitch, yaw]\n    */ this.mouseEventToCoords = function(event1) {\n            return mouseEventToCoords(event1);\n        };\n        /**\n    * Change scene being viewed.\n    * @memberof Viewer\n    * @instance\n    * @param {string} sceneId - Identifier of scene to switch to.\n    * @param {number} [pitch] - Pitch to use with new scene\n    * @param {number} [yaw] - Yaw to use with new scene\n    * @param {number} [hfov] - HFOV to use with new scene\n    * @returns {Viewer} `this`\n    */ this.loadScene = function(sceneId, pitch, yaw, hfov) {\n            if (loaded !== false) {\n                loadScene(sceneId, pitch, yaw, hfov);\n            }\n            return this;\n        };\n        /**\n    * Get ID of current scene.\n    * @memberof Viewer\n    * @instance\n    * @returns {string} ID of current scene\n    */ this.getScene = function() {\n            return config.scene;\n        };\n        /**\n    * Add a new scene.\n    * @memberof Viewer\n    * @instance\n    * @param {string} sceneId - The ID of the new scene\n    * @param {string} config - The configuration of the new scene\n    * @returns {Viewer} `this`\n    */ this.addScene = function(sceneId, config) {\n            initialConfig.scenes[sceneId] = config;\n            return this;\n        };\n        /**\n    * Remove a scene.\n    * @memberof Viewer\n    * @instance\n    * @param {string} sceneId - The ID of the scene\n    * @returns {boolean} False if the scene is the current scene or if the scene doesn't exists, else true\n    */ this.removeScene = function(sceneId) {\n            if (config.scene === sceneId || !initialConfig.scenes.hasOwnProperty(sceneId)) {\n                return false;\n            }\n            delete initialConfig.scenes[sceneId];\n            return true;\n        };\n        /**\n    * Toggle fullscreen.\n    * @memberof Viewer\n    * @instance\n    * @returns {Viewer} `this`\n    */ this.toggleFullscreen = function() {\n            toggleFullscreen();\n            return this;\n        };\n        /**\n    * Get configuration of current scene.\n    * @memberof Viewer\n    * @instance\n    * @returns {Object} Configuration of current scene\n    */ this.getConfig = function() {\n            return config;\n        };\n        /**\n    * Get viewer's container element.\n    * @memberof Viewer\n    * @instance\n    * @returns {HTMLElement} Container `div` element\n    */ this.getContainer = function() {\n            return container;\n        };\n        /**\n    * Add a new hot spot.\n    * @memberof Viewer\n    * @instance\n    * @param {Object} hs - The configuration for the hot spot\n    * @param {string} [sceneId] - Adds hot spot to specified scene if provided, else to current scene\n    * @returns {Viewer} `this`\n    * @throws Throws an error if the scene ID is provided but invalid\n    */ this.addHotSpot = function(hs, sceneId) {\n            if (sceneId === undefined && config.scene === undefined) {\n                // Not a tour\n                config.hotSpots.push(hs);\n            } else {\n                // Tour\n                var id = sceneId !== undefined ? sceneId : config.scene;\n                if (initialConfig.scenes.hasOwnProperty(id)) {\n                    if (!initialConfig.scenes[id].hasOwnProperty(\"hotSpots\")) {\n                        initialConfig.scenes[id].hotSpots = []; // Create hot spots array if needed\n                        if (id == config.scene) {\n                            config.hotSpots = initialConfig.scenes[id].hotSpots;\n                        } // Link to current config\n                    }\n                    initialConfig.scenes[id].hotSpots.push(hs); // Add hot spot to config\n                } else {\n                    throw \"Invalid scene ID!\";\n                }\n            }\n            if (sceneId === undefined || config.scene == sceneId) {\n                // Add to current scene\n                createHotSpot(hs);\n                if (loaded) {\n                    renderHotSpot(hs);\n                }\n            }\n            return this;\n        };\n        /**\n    * Remove a hot spot.\n    * @memberof Viewer\n    * @instance\n    * @param {string} hotSpotId - The ID of the hot spot\n    * @param {string} [sceneId] - Removes hot spot from specified scene if provided, else from current scene\n    * @returns {boolean} True if deletion is successful, else false\n    */ this.removeHotSpot = function(hotSpotId, sceneId) {\n            if (sceneId === undefined || config.scene == sceneId) {\n                if (!config.hotSpots) {\n                    return false;\n                }\n                for(var i = 0; i < config.hotSpots.length; i++){\n                    if (config.hotSpots[i].hasOwnProperty(\"id\") && config.hotSpots[i].id === hotSpotId) {\n                        // Delete hot spot DOM elements\n                        var current = config.hotSpots[i].div;\n                        while(current.parentNode != renderContainer){\n                            current = current.parentNode;\n                        }\n                        renderContainer.removeChild(current);\n                        delete config.hotSpots[i].div;\n                        // Remove hot spot from configuration\n                        config.hotSpots.splice(i, 1);\n                        return true;\n                    }\n                }\n            } else {\n                if (initialConfig.scenes.hasOwnProperty(sceneId)) {\n                    if (!initialConfig.scenes[sceneId].hasOwnProperty(\"hotSpots\")) {\n                        return false;\n                    }\n                    for(var i = 0; i < initialConfig.scenes[sceneId].hotSpots.length; i++){\n                        if (initialConfig.scenes[sceneId].hotSpots[i].hasOwnProperty(\"id\") && initialConfig.scenes[sceneId].hotSpots[i].id === hotSpotId) {\n                            // Remove hot spot from configuration\n                            initialConfig.scenes[sceneId].hotSpots.splice(i, 1);\n                            return true;\n                        }\n                    }\n                } else {\n                    return false;\n                }\n            }\n        };\n        /**\n    * This method should be called if the viewer's container is resized.\n    * @memberof Viewer\n    * @instance\n    */ this.resize = function() {\n            if (renderer) {\n                onDocumentResize();\n            }\n        };\n        /**\n    * Check if a panorama is loaded.\n    * @memberof Viewer\n    * @instance\n    * @returns {boolean} True if a panorama is loaded, else false\n    */ this.isLoaded = function() {\n            return loaded;\n        };\n        /**\n    * Check if device orientation control is supported.\n    * @memberof Viewer\n    * @instance\n    * @returns {boolean} True if supported, else false\n    */ this.isOrientationSupported = function() {\n            return orientationSupport || false;\n        };\n        /**\n    * Stop using device orientation.\n    * @memberof Viewer\n    * @instance\n    */ this.stopOrientation = function() {\n            stopOrientation();\n        };\n        /**\n    * Start using device orientation (does nothing if not supported).\n    * @memberof Viewer\n    * @instance\n    */ this.startOrientation = function() {\n            if (orientationSupport) {\n                startOrientation();\n            }\n        };\n        /**\n    * Check if device orientation control is currently activated.\n    * @memberof Viewer\n    * @instance\n    * @returns {boolean} True if active, else false\n    */ this.isOrientationActive = function() {\n            return Boolean(orientation);\n        };\n        /**\n    * Subscribe listener to specified event.\n    * @memberof Viewer\n    * @instance\n    * @param {string} type - Type of event to subscribe to.\n    * @param {Function} listener - Listener function to subscribe to event.\n    * @returns {Viewer} `this`\n    */ this.on = function(type, listener) {\n            externalEventListeners[type] = externalEventListeners[type] || [];\n            externalEventListeners[type].push(listener);\n            return this;\n        };\n        /**\n    * Remove an event listener (or listeners).\n    * @memberof Viewer\n    * @param {string} [type] - Type of event to remove listeners from. If not specified, all listeners are removed.\n    * @param {Function} [listener] - Listener function to remove. If not specified, all listeners of specified type are removed.\n    * @returns {Viewer} `this`\n    */ this.off = function(type, listener) {\n            if (!type) {\n                // Remove all listeners if type isn't specified\n                externalEventListeners = {};\n                return this;\n            }\n            if (listener) {\n                var i = externalEventListeners[type].indexOf(listener);\n                if (i >= 0) {\n                    // Remove listener if found\n                    externalEventListeners[type].splice(i, 1);\n                }\n                if (externalEventListeners[type].length == 0) {\n                    // Remove category if empty\n                    delete externalEventListeners[type];\n                }\n            } else {\n                // Remove category of listeners if listener isn't specified\n                delete externalEventListeners[type];\n            }\n            return this;\n        };\n        /**\n    * Fire listeners attached to specified event.\n    * @private\n    * @param {string} [type] - Type of event to fire listeners for.\n    */ function fireEvent(type) {\n            if (type in externalEventListeners) {\n                // Reverse iteration is useful, if event listener is removed inside its definition\n                for(var i = externalEventListeners[type].length; i > 0; i--){\n                    externalEventListeners[type][externalEventListeners[type].length - i].apply(null, [].slice.call(arguments, 1));\n                }\n            }\n        }\n        /**\n    * Destructor.\n    * @instance\n    * @memberof Viewer\n    */ this.destroy = function() {\n            if (renderer) {\n                renderer.destroy();\n            }\n            ;\n            if (listenersAdded) {\n                dragFix.removeEventListener(\"mousedown\", onDocumentMouseDown, false);\n                dragFix.removeEventListener(\"dblclick\", onDocumentDoubleClick, false);\n                document1.removeEventListener(\"mousemove\", onDocumentMouseMove, false);\n                document1.removeEventListener(\"mouseup\", onDocumentMouseUp, false);\n                container.removeEventListener(\"mousewheel\", onDocumentMouseWheel, false);\n                container.removeEventListener(\"DOMMouseScroll\", onDocumentMouseWheel, false);\n                container.removeEventListener(\"mozfullscreenchange\", onFullScreenChange, false);\n                container.removeEventListener(\"webkitfullscreenchange\", onFullScreenChange, false);\n                container.removeEventListener(\"msfullscreenchange\", onFullScreenChange, false);\n                container.removeEventListener(\"fullscreenchange\", onFullScreenChange, false);\n                window1.removeEventListener(\"resize\", onDocumentResize, false);\n                window1.removeEventListener(\"orientationchange\", onDocumentResize, false);\n                container.removeEventListener(\"keydown\", onDocumentKeyPress, false);\n                container.removeEventListener(\"keyup\", onDocumentKeyUp, false);\n                container.removeEventListener(\"blur\", clearKeys, false);\n                document1.removeEventListener(\"mouseleave\", onDocumentMouseUp, false);\n                dragFix.removeEventListener(\"touchstart\", onDocumentTouchStart, false);\n                dragFix.removeEventListener(\"touchmove\", onDocumentTouchMove, false);\n                dragFix.removeEventListener(\"touchend\", onDocumentTouchEnd, false);\n                dragFix.removeEventListener(\"pointerdown\", onDocumentPointerDown, false);\n                dragFix.removeEventListener(\"pointermove\", onDocumentPointerMove, false);\n                dragFix.removeEventListener(\"pointerup\", onDocumentPointerUp, false);\n                dragFix.removeEventListener(\"pointerleave\", onDocumentPointerUp, false);\n            }\n            container.innerHTML = \"\";\n            container.classList.remove(\"pnlm-container\");\n            uiContainer.classList.remove(\"pnlm-grab\");\n            uiContainer.classList.remove(\"pnlm-grabbing\");\n        };\n    }\n    return {\n        viewer: function viewer(container, config) {\n            return new Viewer(container, config);\n        }\n    };\n}(window, document);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/js/pannellum.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/js/videojs-pannellum-plugin.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/js/videojs-pannellum-plugin.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ \"(ssr)/../node_modules/video.js/dist/video.es.js\");\n/*\n * Video.js plugin for Pannellum\n * Copyright (c) 2015-2018 Matthew Petroff\n * MIT License\n */ \n(function(document1, videojs, pannellum1) {\n    \"use strict\";\n    videojs.registerPlugin(\"pannellum\", function(config) {\n        // Create Pannellum instance\n        var player = this;\n        var container = player.el();\n        var vid = container.getElementsByTagName(\"video\")[0], pnlmContainer = document1.createElement(\"div\");\n        config = config || {};\n        config.type = \"equirectangular\";\n        config.dynamic = true;\n        config.showZoomCtrl = false;\n        config.showFullscreenCtrl = false;\n        config.autoLoad = true;\n        config.panorama = vid;\n        pnlmContainer.style.visibility = \"hidden\";\n        player.pnlmViewer = pannellum1.viewer(pnlmContainer, config);\n        container.insertBefore(pnlmContainer, container.firstChild);\n        vid.style.display = \"none\";\n        // Handle update settings\n        player.on(\"play\", function() {\n            if (vid.readyState > 1) player.pnlmViewer.setUpdate(true);\n        });\n        player.on(\"canplay\", function() {\n            if (!player.paused()) player.pnlmViewer.setUpdate(true);\n        });\n        player.on(\"pause\", function() {\n            player.pnlmViewer.setUpdate(false);\n        });\n        player.on(\"loadeddata\", function() {\n            pnlmContainer.style.visibility = \"visible\";\n        });\n        player.on(\"seeking\", function() {\n            if (player.paused()) player.pnlmViewer.setUpdate(true);\n        });\n        player.on(\"seeked\", function() {\n            if (player.paused()) player.pnlmViewer.setUpdate(false);\n        });\n    });\n})(document, video_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], pannellum);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vanMvdmlkZW9qcy1wYW5uZWxsdW0tcGx1Z2luLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Q0FJQyxHQUM4QjtBQUU5QixVQUFVQyxTQUFRLEVBQUVELE9BQU8sRUFBRUUsVUFBUztJQUNuQztJQUVBRixRQUFRRyxjQUFjLENBQUMsYUFBYSxTQUFVQyxNQUFNO1FBQ2hELDRCQUE0QjtRQUM1QixJQUFJQyxTQUFTLElBQUk7UUFDakIsSUFBSUMsWUFBWUQsT0FBT0UsRUFBRTtRQUN6QixJQUFJQyxNQUFNRixVQUFVRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUNoREMsZ0JBQWdCVCxVQUFTVSxhQUFhLENBQUM7UUFDM0NQLFNBQVNBLFVBQVUsQ0FBQztRQUNwQkEsT0FBT1EsSUFBSSxHQUFHO1FBQ2RSLE9BQU9TLE9BQU8sR0FBRztRQUNqQlQsT0FBT1UsWUFBWSxHQUFHO1FBQ3RCVixPQUFPVyxrQkFBa0IsR0FBRztRQUM1QlgsT0FBT1ksUUFBUSxHQUFHO1FBQ2xCWixPQUFPYSxRQUFRLEdBQUdUO1FBQ2xCRSxjQUFjUSxLQUFLLENBQUNDLFVBQVUsR0FBRztRQUNqQ2QsT0FBT2UsVUFBVSxHQUFHbEIsV0FBVW1CLE1BQU0sQ0FBQ1gsZUFBZU47UUFDcERFLFVBQVVnQixZQUFZLENBQUNaLGVBQWVKLFVBQVVpQixVQUFVO1FBQzFEZixJQUFJVSxLQUFLLENBQUNNLE9BQU8sR0FBRztRQUVwQix5QkFBeUI7UUFDekJuQixPQUFPb0IsRUFBRSxDQUFDLFFBQVE7WUFDZCxJQUFJakIsSUFBSWtCLFVBQVUsR0FBRyxHQUFHckIsT0FBT2UsVUFBVSxDQUFDTyxTQUFTLENBQUM7UUFDeEQ7UUFDQXRCLE9BQU9vQixFQUFFLENBQUMsV0FBVztZQUNqQixJQUFJLENBQUNwQixPQUFPdUIsTUFBTSxJQUFJdkIsT0FBT2UsVUFBVSxDQUFDTyxTQUFTLENBQUM7UUFDdEQ7UUFDQXRCLE9BQU9vQixFQUFFLENBQUMsU0FBUztZQUNmcEIsT0FBT2UsVUFBVSxDQUFDTyxTQUFTLENBQUM7UUFDaEM7UUFDQXRCLE9BQU9vQixFQUFFLENBQUMsY0FBYztZQUNwQmYsY0FBY1EsS0FBSyxDQUFDQyxVQUFVLEdBQUc7UUFDckM7UUFDQWQsT0FBT29CLEVBQUUsQ0FBQyxXQUFXO1lBQ2pCLElBQUlwQixPQUFPdUIsTUFBTSxJQUFJdkIsT0FBT2UsVUFBVSxDQUFDTyxTQUFTLENBQUM7UUFDckQ7UUFDQXRCLE9BQU9vQixFQUFFLENBQUMsVUFBVTtZQUNoQixJQUFJcEIsT0FBT3VCLE1BQU0sSUFBSXZCLE9BQU9lLFVBQVUsQ0FBQ08sU0FBUyxDQUFDO1FBQ3JEO0lBQ0o7QUFDSixHQUFHMUIsVUFBVUQsZ0RBQU9BLEVBQUVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJlZXplLW5leHQvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vanMvdmlkZW9qcy1wYW5uZWxsdW0tcGx1Z2luLmpzPzY2NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFZpZGVvLmpzIHBsdWdpbiBmb3IgUGFubmVsbHVtXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtMjAxOCBNYXR0aGV3IFBldHJvZmZcbiAqIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB2aWRlb2pzIGZyb20gJ3ZpZGVvLmpzJztcblxuKGZ1bmN0aW9uIChkb2N1bWVudCwgdmlkZW9qcywgcGFubmVsbHVtKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmlkZW9qcy5yZWdpc3RlclBsdWdpbigncGFubmVsbHVtJywgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAvLyBDcmVhdGUgUGFubmVsbHVtIGluc3RhbmNlXG4gICAgICAgIHZhciBwbGF5ZXIgPSB0aGlzO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gcGxheWVyLmVsKCk7XG4gICAgICAgIHZhciB2aWQgPSBjb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ZpZGVvJylbMF0sXG4gICAgICAgICAgICBwbmxtQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgICAgY29uZmlnLnR5cGUgPSAnZXF1aXJlY3Rhbmd1bGFyJztcbiAgICAgICAgY29uZmlnLmR5bmFtaWMgPSB0cnVlO1xuICAgICAgICBjb25maWcuc2hvd1pvb21DdHJsID0gZmFsc2U7XG4gICAgICAgIGNvbmZpZy5zaG93RnVsbHNjcmVlbkN0cmwgPSBmYWxzZTtcbiAgICAgICAgY29uZmlnLmF1dG9Mb2FkID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLnBhbm9yYW1hID0gdmlkO1xuICAgICAgICBwbmxtQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgcGxheWVyLnBubG1WaWV3ZXIgPSBwYW5uZWxsdW0udmlld2VyKHBubG1Db250YWluZXIsIGNvbmZpZyk7XG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUocG5sbUNvbnRhaW5lciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICB2aWQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAvLyBIYW5kbGUgdXBkYXRlIHNldHRpbmdzXG4gICAgICAgIHBsYXllci5vbigncGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh2aWQucmVhZHlTdGF0ZSA+IDEpIHBsYXllci5wbmxtVmlld2VyLnNldFVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYXllci5vbignY2FucGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghcGxheWVyLnBhdXNlZCgpKSBwbGF5ZXIucG5sbVZpZXdlci5zZXRVcGRhdGUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwbGF5ZXIub24oJ3BhdXNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcGxheWVyLnBubG1WaWV3ZXIuc2V0VXBkYXRlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYXllci5vbignbG9hZGVkZGF0YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHBubG1Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYXllci5vbignc2Vla2luZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIucGF1c2VkKCkpIHBsYXllci5wbmxtVmlld2VyLnNldFVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBsYXllci5vbignc2Vla2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHBsYXllci5wYXVzZWQoKSkgcGxheWVyLnBubG1WaWV3ZXIuc2V0VXBkYXRlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KShkb2N1bWVudCwgdmlkZW9qcywgcGFubmVsbHVtKTsiXSwibmFtZXMiOlsidmlkZW9qcyIsImRvY3VtZW50IiwicGFubmVsbHVtIiwicmVnaXN0ZXJQbHVnaW4iLCJjb25maWciLCJwbGF5ZXIiLCJjb250YWluZXIiLCJlbCIsInZpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicG5sbUNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiZHluYW1pYyIsInNob3dab29tQ3RybCIsInNob3dGdWxsc2NyZWVuQ3RybCIsImF1dG9Mb2FkIiwicGFub3JhbWEiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJwbmxtVmlld2VyIiwidmlld2VyIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImRpc3BsYXkiLCJvbiIsInJlYWR5U3RhdGUiLCJzZXRVcGRhdGUiLCJwYXVzZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/js/videojs-pannellum-plugin.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/css/pannellum.css":
/*!**********************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/css/pannellum.css ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"3beda97ce821\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vY3NzL3Bhbm5lbGx1bS5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9icmVlemUtbmV4dC8uLi9ub2RlX21vZHVsZXMvcGFubmVsbHVtLXJlYWN0L2VzL3Bhbm5lbGx1bS9jc3MvcGFubmVsbHVtLmNzcz8xZWVlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiM2JlZGE5N2NlODIxXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/css/pannellum.css\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/css/style-textInfo.css":
/*!***************************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/css/style-textInfo.css ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"69a0d4f93ed2\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vY3NzL3N0eWxlLXRleHRJbmZvLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9wYW5uZWxsdW0tcmVhY3QvZXMvcGFubmVsbHVtL2Nzcy9zdHlsZS10ZXh0SW5mby5jc3M/ZjFhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjY5YTBkNGY5M2VkMlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/css/style-textInfo.css\n");

/***/ }),

/***/ "(ssr)/../node_modules/pannellum-react/es/pannellum/css/video-js.css":
/*!*********************************************************************!*\
  !*** ../node_modules/pannellum-react/es/pannellum/css/video-js.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"850966876046\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Bhbm5lbGx1bS1yZWFjdC9lcy9wYW5uZWxsdW0vY3NzL3ZpZGVvLWpzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2JyZWV6ZS1uZXh0Ly4uL25vZGVfbW9kdWxlcy9wYW5uZWxsdW0tcmVhY3QvZXMvcGFubmVsbHVtL2Nzcy92aWRlby1qcy5jc3M/MzUwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjg1MDk2Njg3NjA0NlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/pannellum-react/es/pannellum/css/video-js.css\n");

/***/ })

};
;