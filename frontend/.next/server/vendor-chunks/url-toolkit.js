"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/url-toolkit";
exports.ids = ["vendor-chunks/url-toolkit"];
exports.modules = {

/***/ "(ssr)/../node_modules/url-toolkit/src/url-toolkit.js":
/*!******************************************************!*\
  !*** ../node_modules/url-toolkit/src/url-toolkit.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\n// see https://tools.ietf.org/html/rfc1808\n(function(root) {\n    var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n    var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n    var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n    var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n    var URLToolkit = {\n        // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n        // E.g\n        // With opts.alwaysNormalize = false (default, spec compliant)\n        // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n        // With opts.alwaysNormalize = true (not spec compliant)\n        // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n        buildAbsoluteURL: function(baseURL, relativeURL, opts) {\n            opts = opts || {};\n            // remove any remaining space and CRLF\n            baseURL = baseURL.trim();\n            relativeURL = relativeURL.trim();\n            if (!relativeURL) {\n                // 2a) If the embedded URL is entirely empty, it inherits the\n                // entire base URL (i.e., is set equal to the base URL)\n                // and we are done.\n                if (!opts.alwaysNormalize) {\n                    return baseURL;\n                }\n                var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n                if (!basePartsForNormalise) {\n                    throw new Error(\"Error trying to parse base URL.\");\n                }\n                basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\n                return URLToolkit.buildURLFromParts(basePartsForNormalise);\n            }\n            var relativeParts = URLToolkit.parseURL(relativeURL);\n            if (!relativeParts) {\n                throw new Error(\"Error trying to parse relative URL.\");\n            }\n            if (relativeParts.scheme) {\n                // 2b) If the embedded URL starts with a scheme name, it is\n                // interpreted as an absolute URL and we are done.\n                if (!opts.alwaysNormalize) {\n                    return relativeURL;\n                }\n                relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n                return URLToolkit.buildURLFromParts(relativeParts);\n            }\n            var baseParts = URLToolkit.parseURL(baseURL);\n            if (!baseParts) {\n                throw new Error(\"Error trying to parse base URL.\");\n            }\n            if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== \"/\") {\n                // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n                // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n                var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n                baseParts.netLoc = pathParts[1];\n                baseParts.path = pathParts[2];\n            }\n            if (baseParts.netLoc && !baseParts.path) {\n                baseParts.path = \"/\";\n            }\n            var builtParts = {\n                // 2c) Otherwise, the embedded URL inherits the scheme of\n                // the base URL.\n                scheme: baseParts.scheme,\n                netLoc: relativeParts.netLoc,\n                path: null,\n                params: relativeParts.params,\n                query: relativeParts.query,\n                fragment: relativeParts.fragment\n            };\n            if (!relativeParts.netLoc) {\n                // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n                // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n                // (if any) of the base URL.\n                builtParts.netLoc = baseParts.netLoc;\n                // 4) If the embedded URL path is preceded by a slash \"/\", the\n                // path is not relative and we skip to Step 7.\n                if (relativeParts.path[0] !== \"/\") {\n                    if (!relativeParts.path) {\n                        // 5) If the embedded URL path is empty (and not preceded by a\n                        // slash), then the embedded URL inherits the base URL path\n                        builtParts.path = baseParts.path;\n                        // 5a) if the embedded URL's <params> is non-empty, we skip to\n                        // step 7; otherwise, it inherits the <params> of the base\n                        // URL (if any) and\n                        if (!relativeParts.params) {\n                            builtParts.params = baseParts.params;\n                            // 5b) if the embedded URL's <query> is non-empty, we skip to\n                            // step 7; otherwise, it inherits the <query> of the base\n                            // URL (if any) and we skip to step 7.\n                            if (!relativeParts.query) {\n                                builtParts.query = baseParts.query;\n                            }\n                        }\n                    } else {\n                        // 6) The last segment of the base URL's path (anything\n                        // following the rightmost slash \"/\", or the entire path if no\n                        // slash is present) is removed and the embedded URL's path is\n                        // appended in its place.\n                        var baseURLPath = baseParts.path;\n                        var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf(\"/\") + 1) + relativeParts.path;\n                        builtParts.path = URLToolkit.normalizePath(newPath);\n                    }\n                }\n            }\n            if (builtParts.path === null) {\n                builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\n            }\n            return URLToolkit.buildURLFromParts(builtParts);\n        },\n        parseURL: function(url) {\n            var parts = URL_REGEX.exec(url);\n            if (!parts) {\n                return null;\n            }\n            return {\n                scheme: parts[1] || \"\",\n                netLoc: parts[2] || \"\",\n                path: parts[3] || \"\",\n                params: parts[4] || \"\",\n                query: parts[5] || \"\",\n                fragment: parts[6] || \"\"\n            };\n        },\n        normalizePath: function(path) {\n            // The following operations are\n            // then applied, in order, to the new path:\n            // 6a) All occurrences of \"./\", where \".\" is a complete path\n            // segment, are removed.\n            // 6b) If the path ends with \".\" as a complete path segment,\n            // that \".\" is removed.\n            path = path.split(\"\").reverse().join(\"\").replace(SLASH_DOT_REGEX, \"\");\n            // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n            // complete path segment not equal to \"..\", are removed.\n            // Removal of these path segments is performed iteratively,\n            // removing the leftmost matching pattern on each iteration,\n            // until no matching pattern remains.\n            // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n            // complete path segment not equal to \"..\", that\n            // \"<segment>/..\" is removed.\n            while(path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, \"\")).length){}\n            return path.split(\"\").reverse().join(\"\");\n        },\n        buildURLFromParts: function(parts) {\n            return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\n        }\n    };\n    if (true) module.exports = URLToolkit;\n    else {}\n})(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/url-toolkit/src/url-toolkit.js\n");

/***/ })

};
;